using DotQuant.Core.Common;

namespace DotQuant.Core.Traders;

/// <summary>
/// A trader is responsible for creating [Orders][Order], typically based on the [Signals][Signal] generated by a
/// strategy. Besides, turning signals into orders, a trader could also take care of:
/// - signal conflicts: for example, receive both a SELL and BUY signal for the same asset at the same time
/// - order management: for example, how to deal with open orders
/// - portfolio construction: for example, re-balancing of the portfolio based on some pre-defined risk parameters
/// - risk management: for example, limit exposure to certain sectors
///
/// Please note that a broker which receives the orders that a Trader created, might not support all the different order types. 
/// </summary>
public abstract class Trader
{
    /// <summary>
    /// Based on the received [signals], the latest state of the [account] and the last known [event], create zero or more orders.
    /// </summary>
    /// <param name="signals">the list of signals generated by the strategy</param>
    /// <param name="account">account the account state at a point in time</param>
    /// <param name="evt">the data available</param>
    /// <returns>a list of orders</returns>
    public abstract List<Order> CreateOrders(List<Signal> signals, IAccount account, Event evt);
}