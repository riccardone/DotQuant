@page "/"
@using System.Text.Json.Nodes
@using System.Net.Http.Json
@using DotQuant.Ui.Services
@rendermode InteractiveServer
@inject IJSRuntime JsRuntime;
@inject MessageSender MessageSender
@inject WebSocketClient WebSocketClient
@inject AuthService AuthService

<Topbar title="Dashboard" />

<AuthorizeView>
    <Authorized>
        <div class="dashboard-chart-container" style="height:80vh; min-height:400px; width:100%;">
            <div id="line-chart-annotations" class="apex-charts" style="height:100%; width:100%;"></div>
        </div>
        <div class="row row-cols-xxl-4 row-cols-md-2 row-cols-1">
            <div class="col">
                <div class="card">
                    <div class="d-flex card-header justify-content-between align-items-center">
                        <div>
                            <h4 class="header-title">Available funds</h4>
                        </div>
                        <div class="d-flex gap-2 justify-content-end text-end">
                            <button type="button" class="btn btn-light" data-bs-toggle="modal" data-bs-target="#deposit-modal">Deposit</button>
                            <div id="deposit-modal" class="modal fade" tabindex="-1" role="dialog"
                                 aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-body">
                                            <div class="auth-brand text-center mt-2 mb-4 position-relative top-0">
                                                <a href="/" class="logo-dark">
                                                    <span>
                                                        <img src="/images/logo-dark.png" alt="dark logo"
                                                             height="22">
                                                    </span>
                                                </a>
                                                <a href="/" class="logo-light">
                                                    <span>
                                                        <img src="/images/logo.png" alt="logo"
                                                             height="22">
                                                    </span>
                                                </a>
                                            </div>

                                            <form class="ps-3 pe-3" action="#">
                                                <div class="mb-3">
                                                    <label class="form-label">Deposit via</label>
                                                    <label class="form-label">HSBC 564565666</label>
                                                    <button type="button" class="btn btn-light" data-bs-toggle="modal" data-bs-target="#deposit-modal">Change</button>
                                                </div>
                                                <div class="mb-3">
                                                    <label for="amount" class="form-label">Amount</label>
                                                    <input class="form-control" type="number" id="amount" required="" placeholder="0">
                                                </div>
                                                <div class="mb-3 text-center">
                                                    <button class="btn btn-primary" type="submit" @onclick="Deposit">Test deposit</button>
                                                </div>
                                            </form>

                                        </div>
                                    </div><!-- /.modal-content -->
                                </div><!-- /.modal-dialog -->
                            </div><!-- /.modal -->
                        </div>
                    </div>

                    <div class="card-body pt-0">
                        <div class="d-flex align-items-end gap-2 justify-content-between">
                            <div class="text-end flex-shrink-0">
                                <div id="linked-bank-account">
                                    <img src="/images/bank-green-64.png" alt="Bank account is linked"
                                         width="64">
                                </div>
                            </div>
                            <div class="text-end">
                                <h3 class="fw-semibold">@AuthService.User.Financials.AvailableFunds k</h3>
                                <p class="text-muted mb-0"></p>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Other dashboard cards and content can go here -->
            </div>
        </div>
        <!-- Kanban board and other dashboard elements can remain below -->
    </Authorized>
    <NotAuthorized>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>

<!-- Kanban board and other dashboard elements remain outside -->
<div class="row">
    <div class="d-flex gap-3 kanban-board">
        <div class="kanban-board-item">
            <div class="card">
                @* ...existing kanban content... *@
            </div>
        </div>
    </div>
</div>

@code {
    private IJSObjectReference? _module;
    private string _status = "Waiting...";
    private string _result = string.Empty;
    private WebSocketClient? _webSocketClient;
    private static readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger();
    private CancellationTokenSource? _cts;
    private readonly int _refreshIntervalMs = 5000; // xxx seconds, make configurable as needed
    private bool _firstRenderComplete = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/pages/dashboard.js");
            await JsRuntime.InvokeVoidAsync("loadDashboard");
            await JsRuntime.InvokeVoidAsync("loadThemeConfig");
            await JsRuntime.InvokeVoidAsync("loadApps");

            _cts = new CancellationTokenSource();
            _firstRenderComplete = true;
            _ = PeriodicGraphDataFetchAsync(_cts.Token);
        }
    }

    private async Task PeriodicGraphDataFetchAsync(CancellationToken token)
    {
        var httpClient = new HttpClient { BaseAddress = new Uri("https://localhost:5001") };
        while (!token.IsCancellationRequested)
        {
            try
            {
                var graphData = await httpClient.GetFromJsonAsync<SessionGraphData>("/session/graph", token);
                if (graphData?.Prices != null && graphData.Prices.Count > 0)
                {
                    // Group all data by ticker
                    var tickers = graphData.Prices.Select(p => p.Ticker).Distinct().ToList();
                    var tickerData = tickers.ToDictionary(
                        ticker => ticker,
                        ticker => new
                        {
                            prices = graphData.Prices.Where(p => p.Ticker == ticker)
                                .Select(p => new { time = p.Time.ToString("yyyy-MM-dd HH:mm"), close = p.Close }).ToList(),
                            orders = (graphData.Orders == null ? new List<object>() : graphData.Orders.Where(o => o.Ticker == ticker)
                                .Select(o => new { time = o.Time.ToString("yyyy-MM-dd HH:mm"), side = o.Side, price = o.Price, quantity = o.Quantity }).Cast<object>().ToList()),
                            signals = (graphData.Signals == null ? new List<object>() : graphData.Signals.Where(s => s.Ticker == ticker)
                                .Select(s => new { time = s.Time.ToString("yyyy-MM-dd HH:mm"), type = s.Type, confidence = s.Confidence }).Cast<object>().ToList())
                        }
                    );
                    await JsRuntime.InvokeVoidAsync("renderLineChart", tickerData);
                }
            }
            catch (Exception ex)
            {
                // Optionally log or handle errors
            }
            await Task.Delay(_refreshIntervalMs, token);
        }
    }

    private async Task Deposit()
    {
        _status = "Sending deposit command...";
        Logger.Info("Initiating deposit command...");

        var cloudEvent = new CloudEventRequest
        {
            Type = "DepositFunds",
            Source = "accounting",
            Id = Guid.NewGuid().ToString(),
            Time = DateTime.UtcNow,
            DataContentType = "application/json",
            Data = JsonNode.Parse("{\"amount\": 100, \"currency\": \"USD\"}")
        };

        string? eventId = await MessageSender.SendAsync(cloudEvent);

        if (!string.IsNullOrEmpty(eventId))
        {
            _status = $"Event sent. Waiting for result (ID: {eventId})...";
            Logger.Info("Event {0} sent. Waiting for result...", eventId);

            await WebSocketClient.ConnectAsync();

            _ = WebSocketClient.ReceiveAsync(message =>
            {
                _result = message;
                _status = "Result received!";
                Logger.Info("Received result for event {0}: {1}", eventId, message);
                StateHasChanged();
            });
            await WebSocketClient.SubscribeAsync($"accounting,{"todo"}");
        }
        else
        {
            _status = "Failed to send deposit event.";
            Logger.Warn("Failed to receive event ID from API.");
        }
    }

    private async Task OnDisposeAsync()
    {
        if (_webSocketClient != null)
        {
            await _webSocketClient.DisconnectAsync();
        }
        _cts?.Cancel();
    }

    public async ValueTask DisposeAsync()
    {
        await OnDisposeAsync();
    }

    // Models for deserialization
    public class PricePoint
    {
        public string Ticker { get; set; } = "";
        public DateTime Time { get; set; }
        public decimal Open { get; set; }
        public decimal High { get; set; }
        public decimal Low { get; set; }
        public decimal Close { get; set; }
    }
    public class OrderPoint
    {
        public string Ticker { get; set; } = "";
        public DateTime Time { get; set; }
        public string Side { get; set; } = "";
        public decimal Price { get; set; }
        public decimal Quantity { get; set; }
    }
    public class SignalPoint
    {
        public string Ticker { get; set; } = "";
        public DateTime Time { get; set; }
        public string Type { get; set; } = "";
        public int Confidence { get; set; }
    }
    public class AccountInfo
    {
        // Add properties as needed
    }
    public class SessionGraphData
    {
        public List<PricePoint> Prices { get; set; } = new();
        public List<OrderPoint> Orders { get; set; } = new();
        public List<SignalPoint> Signals { get; set; } = new();
        public AccountInfo? Account { get; set; }
    }
}