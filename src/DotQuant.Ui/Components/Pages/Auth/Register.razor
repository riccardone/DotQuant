@page "/auth-register"
@rendermode InteractiveServer
@inject ILogger<Register> Logger
@inject MessageSender MessageSender
@inject WebSocketClient WebSocketClient
@inject NavigationManager NavigationManager
@using System.Text.Json
@using System.Text.Json.Nodes
@using System.ComponentModel.DataAnnotations
@using DotQuant.Ui.Components.Layout
@using DotQuant.Ui.Models
@using DotQuant.Ui.Services
@layout BaseLayout

<div class="auth-bg d-flex min-vh-100">
    <div class="row g-0 justify-content-center w-100 m-xxl-5 px-xxl-4 m-3">
        <div class="col-xxl-3 col-lg-5 col-md-6">
            <a href="/" class="auth-brand d-flex justify-content-center mb-2">
                <img src="/images/logo-dark.png" alt="dark logo" height="26" class="logo-dark">
                <img src="/images/logo.png" alt="logo light" height="26" class="logo-light">
            </a>

            <p class="fw-semibold mb-4 text-center text-muted fs-15">...</p>

            <div class="card overflow-hidden text-center p-xxl-4 p-3 mb-0">
                <h4 class="fw-semibold mb-3 fs-18">Sign Up to your account</h4>

                <EditForm OnValidSubmit="HandleSubmit" Model="@_formModel" class="text-start mb-3">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- Email -->
                    <div class="mb-3">
                        <label class="form-label" for="email">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="@_formModel.Email" required />
                    </div>

                    <!-- Password -->
                    <div class="mb-3">
                        <label class="form-label" for="password">Password</label>
                        <InputText id="password" class="form-control" @bind-Value="@_formModel.Password" type="password" required />
                        <ValidationMessage For="@(() => _formModel.Password)" />
                    </div>

                    <!-- Confirm Password -->
                    <div class="mb-3">
                        <label class="form-label" for="confirm-password">Confirm Password</label>
                        <InputText id="confirm-password" class="form-control" @bind-Value="@_confirmPassword" type="password" required />
                        <span class="text-danger" role="alert">@_passwordMismatchError</span>
                    </div>

                    <!-- First Name -->
                    <div class="mb-3">
                        <label class="form-label" for="first-name">First Name</label>
                        <InputText id="first-name" class="form-control" @bind-Value="@_formModel.FirstName" required />
                    </div>

                    <!-- Last Name -->
                    <div class="mb-3">
                        <label class="form-label" for="last-name">Last Name</label>
                        <InputText id="last-name" class="form-control" @bind-Value="@_formModel.LastName" required />
                    </div>
                    
                    <!-- Address -->
                    <div class="mb-3">
                        <label class="form-label" for="address">Address</label>
                        <InputText id="address" class="form-control" @bind-Value="@_formModel.Address" required />
                    </div>

                    <!-- Post Code -->
                    <div class="mb-3">
                        <label class="form-label" for="post-code">Post Code</label>
                        <InputText id="post-code" class="form-control" @bind-Value="@_formModel.PostCode" required />
                    </div>

                    <!-- City -->
                    <div class="mb-3">
                        <label class="form-label" for="city">City</label>
                        <InputText id="city" class="form-control" @bind-Value="@_formModel.City" required />
                    </div>

                    <!-- Phone Number -->
                    <div class="mb-3">
                        <label class="form-label" for="phone">Phone Number</label>
                        <InputText id="phone" class="form-control" @bind-Value="@_formModel.Phone" required />
                    </div>

                    <!-- Country Dropdown -->
                    <div class="mb-3">
                        <label class="form-label" for="country">Country</label>
                        <InputSelect id="country" class="form-select" @bind-Value="@_formModel.CountryCode" required>
                            <option value="">Select your country</option>
                            <option value="US">United States</option>
                            <option value="GB">United Kingdom</option>
                            @foreach (var country in _countryList)
                            {
                                <option value="@country.Code">@country.Name</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="d-flex justify-content-between mb-3">
                        <div class="form-check">
                            <InputCheckbox id="checkbox-terms" class="form-check-input" @bind-Value="@_formModel.AcceptTerms" />
                            <label class="form-check-label" for="checkbox-terms">
                                I agree to all <a href="#!" class="link-dark text-decoration-underline">Terms & Conditions</a>
                            </label>
                        </div>
                    </div>

                    <div class="d-grid">
                        <button class="btn btn-primary fw-semibold" type="submit" disabled="@_isSubmitting">Sign Up</button>
                    </div>
                </EditForm>

                <p class="text-muted fs-14 mb-0">
                    Already have an account?
                    <a href="auth-login" class="fw-semibold text-danger ms-1">Login!</a>
                </p>
            </div>

            <p class="mt-4 text-center mb-0">
                @_fullYear Prelude - By
                <span class="fw-bold text-decoration-underline text-uppercase text-reset fs-12">DotQuant Trading</span>
            </p>
        </div>
    </div>
</div>

<!-- Success Modal -->
@if (_showSuccessModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content modal-filled bg-success">
                <div class="modal-body p-4 text-center">
                    <i class="ti ti-check h1"></i>
                    <h4 class="mt-2">Success!</h4>
                    <p class="mt-3">@_successMessage</p>
                    <button class="btn btn-light my-2" @onclick="CloseSuccessModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Warning Modal -->
@if (_showWarningModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-body p-4 text-center">
                    <i class="ti ti-alert-circle h1 text-warning"></i>
                    <h4 class="mt-2">Warning</h4>
                    <p class="mt-3">@_warningMessage</p>
                    <button class="btn btn-warning my-2" @onclick="CloseWarningModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private readonly string _fullYear = DateTime.Now.Year.ToString();
    private readonly RegistrationForm _formModel = new();
    private string _successMessage = string.Empty;
    private string _warningMessage = string.Empty;
    private string _confirmPassword = string.Empty;
    private string _passwordMismatchError = string.Empty;

    private bool _isSubmitting = false;
    private bool _showSuccessModal = false;
    private bool _showWarningModal = false;

    private List<CountryItem> _countryList = new();

    protected override async Task OnInitializedAsync()
    {
        LoadCountryList();
    }

    private async Task HandleSubmit()
    {
        _passwordMismatchError = string.Empty;

        if (_formModel.Password != _confirmPassword)
        {
            _passwordMismatchError = "Passwords do not match.";
            return;
        }

        if (!_formModel.AcceptTerms)
        {
            _warningMessage = "You must accept the terms and conditions.";
            _showWarningModal = true;
            Logger.LogWarning("User did not accept terms and conditions.");
            return;
        }

        try
        {
            _isSubmitting = true;
            var correlationId = _formModel.Email.CreateCorrelationId();
            var cloudEventRequest = CreateCloudEventRequest(correlationId);

            Logger.LogInformation("Subscribing to WebSocket for completion event...");
            var channelName = $"accounting:{correlationId}";
            await WebSocketClient.ConnectAsync();

            _ = Task.Run(async () =>
            {
                await WebSocketClient.ReceiveAsync(msg =>
                {
                    InvokeAsync(() =>
                    {
                        ProcessWebSocketMessage(msg);
                        WebSocketClient?.UnsubscribeAsync(channelName).Wait();
                        StateHasChanged();
                    });
                });
            });
            await WebSocketClient.SubscribeAsync(channelName);
            Logger.LogInformation($"Subscribed to WebSocketServer channel {channelName}");

            Logger.LogInformation("Sending OnboardIndividual request...");
            var eventId = await MessageSender.SendAsync(cloudEventRequest);

            if (string.IsNullOrEmpty(eventId))
            {
                _warningMessage = "Failed to receive an Event ID from the server.";
                _showWarningModal = true;
                return;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"An error occurred during registration: {ex.GetBaseException().Message}");
            _warningMessage = "An error occurred. Please try again.";
            _showWarningModal = true;
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private CloudEventRequest CreateCloudEventRequest(string correlationId)
    {
        return new CloudEventRequest
            {
                Id = Guid.NewGuid().ToString(),
                Time = DateTime.UtcNow,
                Type = "OnboardIndividual",
                Source = "accounting",
                DataSchema = "onboard-individual/1.0",
                DataContentType = "application/json",
                Data = JsonNode.Parse(JsonSerializer.Serialize(new
                {
                    CorrelationId = correlationId,
                    Email = _formModel.Email,
                    Password = _formModel.Password,
                    FirstName = _formModel.FirstName,
                    LastName = _formModel.LastName,
                    Address = _formModel.Address,
                    PostCode = _formModel.PostCode,
                    City = _formModel.City,
                    Phone = _formModel.Phone,
                    CountryCode = _formModel.CountryCode,
                    TenantId = "default"
                }))
            };
    }

    private void ProcessWebSocketMessage(string message)
    {
        try
        {
            // TODO test this (make sure the sync send back the same type)
            var response = JsonSerializer.Deserialize<WebSocketResponse>(message);
            if (response == null)
            {
                Logger.LogWarning("Received unknown WebSocket message: {message}", message);
                _warningMessage = "Failed to parse WebSocket response.";
                _showWarningModal = true;
            }
            else
            {
                _successMessage = "Processing completed successfully!";
                _showSuccessModal = true;
                Logger.LogInformation("Processing completed via WebSocket.");
                NavigationManager.NavigateTo("/auth-login");
            }            
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing WebSocket message.");
            _warningMessage = "Failed to parse WebSocket response.";
            _showWarningModal = true;
        }
    }

    private void CloseSuccessModal() => _showSuccessModal = false;
    private void CloseWarningModal() => _showWarningModal = false;

    private void LoadCountryList()
    {
        var allCountries = new List<CountryItem>
        {
            new("United States", "US"),
            new("United Kingdom", "GB"),
            new("Canada", "CA"),
            new("Australia", "AU"),
            new("Germany", "DE"),
            new("France", "FR"),
            new("Italy", "IT"),
            new("Spain", "ES"),
            new("Mexico", "MX"),
            new("India", "IN"),
            new("Japan", "JP"),
            new("China", "CN"),
            new("Brazil", "BR"),
            new("South Africa", "ZA"),
            new("New Zealand", "NZ"),
            new("Sweden", "SE"),
            new("Norway", "NO"),
            new("Finland", "FI"),
            new("Denmark", "DK"),
            new("Switzerland", "CH")
        };

        _countryList = allCountries
            .Where(c => c.Code != "US" && c.Code != "GB")
            .OrderBy(c => c.Name)
            .ToList();
    }

    public class CountryItem
    {
        public string Name { get; set; }
        public string Code { get; set; }
        public CountryItem(string name, string code)
        {
            Name = name;
            Code = code;
        }
    }

    public class RegistrationForm
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        [MaxLength(100, ErrorMessage = "Email cannot exceed 100 characters.")]
        public string Email { get; set; } = string.Empty;

    // [RegularExpression(@"^(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$",
    //     ErrorMessage = "Password must contain at least one uppercase letter, one number, and one special character.")]
        [Required(ErrorMessage = "Password is required.")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters long.")]
        [MaxLength(100, ErrorMessage = "Password cannot exceed 100 characters.")]
        public string Password { get; set; } = string.Empty;

        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Address { get; set; } = string.Empty;
        public string PostCode { get; set; } = string.Empty;
        public string City { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public string CountryCode { get; set; } = string.Empty;
        public bool AcceptTerms { get; set; }
    }
}
