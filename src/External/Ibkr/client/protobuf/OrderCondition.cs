// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: OrderCondition.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IBApi.protobuf {

  /// <summary>Holder for reflection information generated from OrderCondition.proto</summary>
  public static partial class OrderConditionReflection {

    #region Descriptor
    /// <summary>File descriptor for OrderCondition.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OrderConditionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRPcmRlckNvbmRpdGlvbi5wcm90bxIIcHJvdG9idWYi6gMKDk9yZGVyQ29u",
            "ZGl0aW9uEhEKBHR5cGUYASABKAVIAIgBARIkChdpc0Nvbmp1bmN0aW9uQ29u",
            "bmVjdGlvbhgCIAEoCEgBiAEBEhMKBmlzTW9yZRgDIAEoCEgCiAEBEhIKBWNv",
            "bklkGAQgASgFSAOIAQESFQoIZXhjaGFuZ2UYBSABKAlIBIgBARITCgZzeW1i",
            "b2wYBiABKAlIBYgBARIUCgdzZWNUeXBlGAcgASgJSAaIAQESFAoHcGVyY2Vu",
            "dBgIIAEoBUgHiAEBEhoKDWNoYW5nZVBlcmNlbnQYCSABKAFICIgBARISCgVw",
            "cmljZRgKIAEoAUgJiAEBEhoKDXRyaWdnZXJNZXRob2QYCyABKAVICogBARIR",
            "CgR0aW1lGAwgASgJSAuIAQESEwoGdm9sdW1lGA0gASgFSAyIAQFCBwoFX3R5",
            "cGVCGgoYX2lzQ29uanVuY3Rpb25Db25uZWN0aW9uQgkKB19pc01vcmVCCAoG",
            "X2NvbklkQgsKCV9leGNoYW5nZUIJCgdfc3ltYm9sQgoKCF9zZWNUeXBlQgoK",
            "CF9wZXJjZW50QhAKDl9jaGFuZ2VQZXJjZW50QggKBl9wcmljZUIQCg5fdHJp",
            "Z2dlck1ldGhvZEIHCgVfdGltZUIJCgdfdm9sdW1lQj4KFmNvbS5pYi5jbGll",
            "bnQucHJvdG9idWZCE09yZGVyQ29uZGl0aW9uUHJvdG+qAg5JQkFwaS5wcm90",
            "b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IBApi.protobuf.OrderCondition), global::IBApi.protobuf.OrderCondition.Parser, new[]{ "Type", "IsConjunctionConnection", "IsMore", "ConId", "Exchange", "Symbol", "SecType", "Percent", "ChangePercent", "Price", "TriggerMethod", "Time", "Volume" }, new[]{ "Type", "IsConjunctionConnection", "IsMore", "ConId", "Exchange", "Symbol", "SecType", "Percent", "ChangePercent", "Price", "TriggerMethod", "Time", "Volume" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OrderCondition : pb::IMessage<OrderCondition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderCondition> _parser = new pb::MessageParser<OrderCondition>(() => new OrderCondition());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OrderCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IBApi.protobuf.OrderConditionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderCondition(OrderCondition other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      isConjunctionConnection_ = other.isConjunctionConnection_;
      isMore_ = other.isMore_;
      conId_ = other.conId_;
      exchange_ = other.exchange_;
      symbol_ = other.symbol_;
      secType_ = other.secType_;
      percent_ = other.percent_;
      changePercent_ = other.changePercent_;
      price_ = other.price_;
      triggerMethod_ = other.triggerMethod_;
      time_ = other.time_;
      volume_ = other.volume_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderCondition Clone() {
      return new OrderCondition(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static int TypeDefaultValue = 0;

    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "isConjunctionConnection" field.</summary>
    public const int IsConjunctionConnectionFieldNumber = 2;
    private readonly static bool IsConjunctionConnectionDefaultValue = false;

    private bool isConjunctionConnection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsConjunctionConnection {
      get { if ((_hasBits0 & 2) != 0) { return isConjunctionConnection_; } else { return IsConjunctionConnectionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isConjunctionConnection_ = value;
      }
    }
    /// <summary>Gets whether the "isConjunctionConnection" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsConjunctionConnection {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "isConjunctionConnection" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsConjunctionConnection() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "isMore" field.</summary>
    public const int IsMoreFieldNumber = 3;
    private readonly static bool IsMoreDefaultValue = false;

    private bool isMore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsMore {
      get { if ((_hasBits0 & 4) != 0) { return isMore_; } else { return IsMoreDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isMore_ = value;
      }
    }
    /// <summary>Gets whether the "isMore" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsMore {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "isMore" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsMore() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "conId" field.</summary>
    public const int ConIdFieldNumber = 4;
    private readonly static int ConIdDefaultValue = 0;

    private int conId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ConId {
      get { if ((_hasBits0 & 8) != 0) { return conId_; } else { return ConIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        conId_ = value;
      }
    }
    /// <summary>Gets whether the "conId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "conId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 5;
    private readonly static string ExchangeDefaultValue = "";

    private string exchange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_ ?? ExchangeDefaultValue; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "exchange" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExchange {
      get { return exchange_ != null; }
    }
    /// <summary>Clears the value of the "exchange" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExchange() {
      exchange_ = null;
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 6;
    private readonly static string SymbolDefaultValue = "";

    private string symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Symbol {
      get { return symbol_ ?? SymbolDefaultValue; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "symbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSymbol {
      get { return symbol_ != null; }
    }
    /// <summary>Clears the value of the "symbol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSymbol() {
      symbol_ = null;
    }

    /// <summary>Field number for the "secType" field.</summary>
    public const int SecTypeFieldNumber = 7;
    private readonly static string SecTypeDefaultValue = "";

    private string secType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecType {
      get { return secType_ ?? SecTypeDefaultValue; }
      set {
        secType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "secType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSecType {
      get { return secType_ != null; }
    }
    /// <summary>Clears the value of the "secType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSecType() {
      secType_ = null;
    }

    /// <summary>Field number for the "percent" field.</summary>
    public const int PercentFieldNumber = 8;
    private readonly static int PercentDefaultValue = 0;

    private int percent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Percent {
      get { if ((_hasBits0 & 16) != 0) { return percent_; } else { return PercentDefaultValue; } }
      set {
        _hasBits0 |= 16;
        percent_ = value;
      }
    }
    /// <summary>Gets whether the "percent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPercent {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "percent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPercent() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "changePercent" field.</summary>
    public const int ChangePercentFieldNumber = 9;
    private readonly static double ChangePercentDefaultValue = 0D;

    private double changePercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ChangePercent {
      get { if ((_hasBits0 & 32) != 0) { return changePercent_; } else { return ChangePercentDefaultValue; } }
      set {
        _hasBits0 |= 32;
        changePercent_ = value;
      }
    }
    /// <summary>Gets whether the "changePercent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChangePercent {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "changePercent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChangePercent() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 10;
    private readonly static double PriceDefaultValue = 0D;

    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Price {
      get { if ((_hasBits0 & 64) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 64;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPrice {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPrice() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "triggerMethod" field.</summary>
    public const int TriggerMethodFieldNumber = 11;
    private readonly static int TriggerMethodDefaultValue = 0;

    private int triggerMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TriggerMethod {
      get { if ((_hasBits0 & 128) != 0) { return triggerMethod_; } else { return TriggerMethodDefaultValue; } }
      set {
        _hasBits0 |= 128;
        triggerMethod_ = value;
      }
    }
    /// <summary>Gets whether the "triggerMethod" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTriggerMethod {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "triggerMethod" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTriggerMethod() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 12;
    private readonly static string TimeDefaultValue = "";

    private string time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Time {
      get { return time_ ?? TimeDefaultValue; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTime {
      get { return time_ != null; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTime() {
      time_ = null;
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 13;
    private readonly static int VolumeDefaultValue = 0;

    private int volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Volume {
      get { if ((_hasBits0 & 256) != 0) { return volume_; } else { return VolumeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        volume_ = value;
      }
    }
    /// <summary>Gets whether the "volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVolume {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVolume() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OrderCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OrderCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (IsConjunctionConnection != other.IsConjunctionConnection) return false;
      if (IsMore != other.IsMore) return false;
      if (ConId != other.ConId) return false;
      if (Exchange != other.Exchange) return false;
      if (Symbol != other.Symbol) return false;
      if (SecType != other.SecType) return false;
      if (Percent != other.Percent) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChangePercent, other.ChangePercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (TriggerMethod != other.TriggerMethod) return false;
      if (Time != other.Time) return false;
      if (Volume != other.Volume) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasIsConjunctionConnection) hash ^= IsConjunctionConnection.GetHashCode();
      if (HasIsMore) hash ^= IsMore.GetHashCode();
      if (HasConId) hash ^= ConId.GetHashCode();
      if (HasExchange) hash ^= Exchange.GetHashCode();
      if (HasSymbol) hash ^= Symbol.GetHashCode();
      if (HasSecType) hash ^= SecType.GetHashCode();
      if (HasPercent) hash ^= Percent.GetHashCode();
      if (HasChangePercent) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChangePercent);
      if (HasPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (HasTriggerMethod) hash ^= TriggerMethod.GetHashCode();
      if (HasTime) hash ^= Time.GetHashCode();
      if (HasVolume) hash ^= Volume.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (HasIsConjunctionConnection) {
        output.WriteRawTag(16);
        output.WriteBool(IsConjunctionConnection);
      }
      if (HasIsMore) {
        output.WriteRawTag(24);
        output.WriteBool(IsMore);
      }
      if (HasConId) {
        output.WriteRawTag(32);
        output.WriteInt32(ConId);
      }
      if (HasExchange) {
        output.WriteRawTag(42);
        output.WriteString(Exchange);
      }
      if (HasSymbol) {
        output.WriteRawTag(50);
        output.WriteString(Symbol);
      }
      if (HasSecType) {
        output.WriteRawTag(58);
        output.WriteString(SecType);
      }
      if (HasPercent) {
        output.WriteRawTag(64);
        output.WriteInt32(Percent);
      }
      if (HasChangePercent) {
        output.WriteRawTag(73);
        output.WriteDouble(ChangePercent);
      }
      if (HasPrice) {
        output.WriteRawTag(81);
        output.WriteDouble(Price);
      }
      if (HasTriggerMethod) {
        output.WriteRawTag(88);
        output.WriteInt32(TriggerMethod);
      }
      if (HasTime) {
        output.WriteRawTag(98);
        output.WriteString(Time);
      }
      if (HasVolume) {
        output.WriteRawTag(104);
        output.WriteInt32(Volume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (HasIsConjunctionConnection) {
        output.WriteRawTag(16);
        output.WriteBool(IsConjunctionConnection);
      }
      if (HasIsMore) {
        output.WriteRawTag(24);
        output.WriteBool(IsMore);
      }
      if (HasConId) {
        output.WriteRawTag(32);
        output.WriteInt32(ConId);
      }
      if (HasExchange) {
        output.WriteRawTag(42);
        output.WriteString(Exchange);
      }
      if (HasSymbol) {
        output.WriteRawTag(50);
        output.WriteString(Symbol);
      }
      if (HasSecType) {
        output.WriteRawTag(58);
        output.WriteString(SecType);
      }
      if (HasPercent) {
        output.WriteRawTag(64);
        output.WriteInt32(Percent);
      }
      if (HasChangePercent) {
        output.WriteRawTag(73);
        output.WriteDouble(ChangePercent);
      }
      if (HasPrice) {
        output.WriteRawTag(81);
        output.WriteDouble(Price);
      }
      if (HasTriggerMethod) {
        output.WriteRawTag(88);
        output.WriteInt32(TriggerMethod);
      }
      if (HasTime) {
        output.WriteRawTag(98);
        output.WriteString(Time);
      }
      if (HasVolume) {
        output.WriteRawTag(104);
        output.WriteInt32(Volume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (HasIsConjunctionConnection) {
        size += 1 + 1;
      }
      if (HasIsMore) {
        size += 1 + 1;
      }
      if (HasConId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConId);
      }
      if (HasExchange) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (HasSymbol) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (HasSecType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecType);
      }
      if (HasPercent) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Percent);
      }
      if (HasChangePercent) {
        size += 1 + 8;
      }
      if (HasPrice) {
        size += 1 + 8;
      }
      if (HasTriggerMethod) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerMethod);
      }
      if (HasTime) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (HasVolume) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Volume);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OrderCondition other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasIsConjunctionConnection) {
        IsConjunctionConnection = other.IsConjunctionConnection;
      }
      if (other.HasIsMore) {
        IsMore = other.IsMore;
      }
      if (other.HasConId) {
        ConId = other.ConId;
      }
      if (other.HasExchange) {
        Exchange = other.Exchange;
      }
      if (other.HasSymbol) {
        Symbol = other.Symbol;
      }
      if (other.HasSecType) {
        SecType = other.SecType;
      }
      if (other.HasPercent) {
        Percent = other.Percent;
      }
      if (other.HasChangePercent) {
        ChangePercent = other.ChangePercent;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      if (other.HasTriggerMethod) {
        TriggerMethod = other.TriggerMethod;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      if (other.HasVolume) {
        Volume = other.Volume;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            IsConjunctionConnection = input.ReadBool();
            break;
          }
          case 24: {
            IsMore = input.ReadBool();
            break;
          }
          case 32: {
            ConId = input.ReadInt32();
            break;
          }
          case 42: {
            Exchange = input.ReadString();
            break;
          }
          case 50: {
            Symbol = input.ReadString();
            break;
          }
          case 58: {
            SecType = input.ReadString();
            break;
          }
          case 64: {
            Percent = input.ReadInt32();
            break;
          }
          case 73: {
            ChangePercent = input.ReadDouble();
            break;
          }
          case 81: {
            Price = input.ReadDouble();
            break;
          }
          case 88: {
            TriggerMethod = input.ReadInt32();
            break;
          }
          case 98: {
            Time = input.ReadString();
            break;
          }
          case 104: {
            Volume = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            IsConjunctionConnection = input.ReadBool();
            break;
          }
          case 24: {
            IsMore = input.ReadBool();
            break;
          }
          case 32: {
            ConId = input.ReadInt32();
            break;
          }
          case 42: {
            Exchange = input.ReadString();
            break;
          }
          case 50: {
            Symbol = input.ReadString();
            break;
          }
          case 58: {
            SecType = input.ReadString();
            break;
          }
          case 64: {
            Percent = input.ReadInt32();
            break;
          }
          case 73: {
            ChangePercent = input.ReadDouble();
            break;
          }
          case 81: {
            Price = input.ReadDouble();
            break;
          }
          case 88: {
            TriggerMethod = input.ReadInt32();
            break;
          }
          case 98: {
            Time = input.ReadString();
            break;
          }
          case 104: {
            Volume = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
