// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ContractDetails.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IBApi.protobuf {

  /// <summary>Holder for reflection information generated from ContractDetails.proto</summary>
  public static partial class ContractDetailsReflection {

    #region Descriptor
    /// <summary>File descriptor for ContractDetails.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ContractDetailsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVDb250cmFjdERldGFpbHMucHJvdG8SCHByb3RvYnVmGhlJbmVsaWdpYmls",
            "aXR5UmVhc29uLnByb3RvIrYVCg9Db250cmFjdERldGFpbHMSFwoKbWFya2V0",
            "TmFtZRgBIAEoCUgAiAEBEhQKB21pblRpY2sYAiABKAlIAYgBARIXCgpvcmRl",
            "clR5cGVzGAMgASgJSAKIAQESGwoOdmFsaWRFeGNoYW5nZXMYBCABKAlIA4gB",
            "ARIbCg5wcmljZU1hZ25pZmllchgFIAEoBUgEiAEBEhcKCnVuZGVyQ29uSWQY",
            "BiABKAVIBYgBARIVCghsb25nTmFtZRgHIAEoCUgGiAEBEhoKDWNvbnRyYWN0",
            "TW9udGgYCCABKAlIB4gBARIVCghpbmR1c3RyeRgJIAEoCUgIiAEBEhUKCGNh",
            "dGVnb3J5GAogASgJSAmIAQESGAoLc3ViY2F0ZWdvcnkYCyABKAlICogBARIX",
            "Cgp0aW1lWm9uZUlkGAwgASgJSAuIAQESGQoMdHJhZGluZ0hvdXJzGA0gASgJ",
            "SAyIAQESGAoLbGlxdWlkSG91cnMYDiABKAlIDYgBARITCgZldlJ1bGUYDyAB",
            "KAlIDogBARIZCgxldk11bHRpcGxpZXIYECABKAFID4gBARI7CglzZWNJZExp",
            "c3QYESADKAsyKC5wcm90b2J1Zi5Db250cmFjdERldGFpbHMuU2VjSWRMaXN0",
            "RW50cnkSFQoIYWdnR3JvdXAYEiABKAVIEIgBARIYCgt1bmRlclN5bWJvbBgT",
            "IAEoCUgRiAEBEhkKDHVuZGVyU2VjVHlwZRgUIAEoCUgSiAEBEhoKDW1hcmtl",
            "dFJ1bGVJZHMYFSABKAlIE4gBARIfChJyZWFsRXhwaXJhdGlvbkRhdGUYFiAB",
            "KAlIFIgBARIWCglzdG9ja1R5cGUYFyABKAlIFYgBARIUCgdtaW5TaXplGBgg",
            "ASgJSBaIAQESGgoNc2l6ZUluY3JlbWVudBgZIAEoCUgXiAEBEiMKFnN1Z2dl",
            "c3RlZFNpemVJbmNyZW1lbnQYGiABKAlIGIgBARIVCghmdW5kTmFtZRgbIAEo",
            "CUgZiAEBEhcKCmZ1bmRGYW1pbHkYHCABKAlIGogBARIVCghmdW5kVHlwZRgd",
            "IAEoCUgbiAEBEhoKDWZ1bmRGcm9udExvYWQYHiABKAlIHIgBARIZCgxmdW5k",
            "QmFja0xvYWQYHyABKAlIHYgBARIlChhmdW5kQmFja0xvYWRUaW1lSW50ZXJ2",
            "YWwYICABKAlIHogBARIeChFmdW5kTWFuYWdlbWVudEZlZRghIAEoCUgfiAEB",
            "EhcKCmZ1bmRDbG9zZWQYIiABKAhIIIgBARImChlmdW5kQ2xvc2VkRm9yTmV3",
            "SW52ZXN0b3JzGCMgASgISCGIAQESIgoVZnVuZENsb3NlZEZvck5ld01vbmV5",
            "GCQgASgISCKIAQESHQoQZnVuZE5vdGlmeUFtb3VudBglIAEoCUgjiAEBEicK",
            "GmZ1bmRNaW5pbXVtSW5pdGlhbFB1cmNoYXNlGCYgASgJSCSIAQESKgodZnVu",
            "ZE1pbmltdW1TdWJzZXF1ZW50UHVyY2hhc2UYJyABKAlIJYgBARIeChFmdW5k",
            "Qmx1ZVNreVN0YXRlcxgoIAEoCUgmiAEBEiMKFmZ1bmRCbHVlU2t5VGVycml0",
            "b3JpZXMYKSABKAlIJ4gBARIsCh9mdW5kRGlzdHJpYnV0aW9uUG9saWN5SW5k",
            "aWNhdG9yGCogASgJSCiIAQESGgoNZnVuZEFzc2V0VHlwZRgrIAEoCUgpiAEB",
            "EhIKBWN1c2lwGCwgASgJSCqIAQESFgoJaXNzdWVEYXRlGC0gASgJSCuIAQES",
            "FAoHcmF0aW5ncxguIAEoCUgsiAEBEhUKCGJvbmRUeXBlGC8gASgJSC2IAQES",
            "EwoGY291cG9uGDAgASgBSC6IAQESFwoKY291cG9uVHlwZRgxIAEoCUgviAEB",
            "EhgKC2NvbnZlcnRpYmxlGDIgASgISDCIAQESFQoIY2FsbGFibGUYMyABKAhI",
            "MYgBARIVCghwdXR0YWJsZRg0IAEoCEgyiAEBEhcKCmRlc2NBcHBlbmQYNSAB",
            "KAlIM4gBARIbCg5uZXh0T3B0aW9uRGF0ZRg2IAEoCUg0iAEBEhsKDm5leHRP",
            "cHRpb25UeXBlGDcgASgJSDWIAQESHgoRbmV4dE9wdGlvblBhcnRpYWwYOCAB",
            "KAhINogBARIWCglib25kTm90ZXMYOSABKAlIN4gBARI+ChdpbmVsaWdpYmls",
            "aXR5UmVhc29uTGlzdBg6IAMoCzIdLnByb3RvYnVmLkluZWxpZ2liaWxpdHlS",
            "ZWFzb24aMAoOU2VjSWRMaXN0RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVl",
            "GAIgASgJOgI4AUINCgtfbWFya2V0TmFtZUIKCghfbWluVGlja0INCgtfb3Jk",
            "ZXJUeXBlc0IRCg9fdmFsaWRFeGNoYW5nZXNCEQoPX3ByaWNlTWFnbmlmaWVy",
            "Qg0KC191bmRlckNvbklkQgsKCV9sb25nTmFtZUIQCg5fY29udHJhY3RNb250",
            "aEILCglfaW5kdXN0cnlCCwoJX2NhdGVnb3J5Qg4KDF9zdWJjYXRlZ29yeUIN",
            "CgtfdGltZVpvbmVJZEIPCg1fdHJhZGluZ0hvdXJzQg4KDF9saXF1aWRIb3Vy",
            "c0IJCgdfZXZSdWxlQg8KDV9ldk11bHRpcGxpZXJCCwoJX2FnZ0dyb3VwQg4K",
            "DF91bmRlclN5bWJvbEIPCg1fdW5kZXJTZWNUeXBlQhAKDl9tYXJrZXRSdWxl",
            "SWRzQhUKE19yZWFsRXhwaXJhdGlvbkRhdGVCDAoKX3N0b2NrVHlwZUIKCghf",
            "bWluU2l6ZUIQCg5fc2l6ZUluY3JlbWVudEIZChdfc3VnZ2VzdGVkU2l6ZUlu",
            "Y3JlbWVudEILCglfZnVuZE5hbWVCDQoLX2Z1bmRGYW1pbHlCCwoJX2Z1bmRU",
            "eXBlQhAKDl9mdW5kRnJvbnRMb2FkQg8KDV9mdW5kQmFja0xvYWRCGwoZX2Z1",
            "bmRCYWNrTG9hZFRpbWVJbnRlcnZhbEIUChJfZnVuZE1hbmFnZW1lbnRGZWVC",
            "DQoLX2Z1bmRDbG9zZWRCHAoaX2Z1bmRDbG9zZWRGb3JOZXdJbnZlc3RvcnNC",
            "GAoWX2Z1bmRDbG9zZWRGb3JOZXdNb25leUITChFfZnVuZE5vdGlmeUFtb3Vu",
            "dEIdChtfZnVuZE1pbmltdW1Jbml0aWFsUHVyY2hhc2VCIAoeX2Z1bmRNaW5p",
            "bXVtU3Vic2VxdWVudFB1cmNoYXNlQhQKEl9mdW5kQmx1ZVNreVN0YXRlc0IZ",
            "ChdfZnVuZEJsdWVTa3lUZXJyaXRvcmllc0IiCiBfZnVuZERpc3RyaWJ1dGlv",
            "blBvbGljeUluZGljYXRvckIQCg5fZnVuZEFzc2V0VHlwZUIICgZfY3VzaXBC",
            "DAoKX2lzc3VlRGF0ZUIKCghfcmF0aW5nc0ILCglfYm9uZFR5cGVCCQoHX2Nv",
            "dXBvbkINCgtfY291cG9uVHlwZUIOCgxfY29udmVydGlibGVCCwoJX2NhbGxh",
            "YmxlQgsKCV9wdXR0YWJsZUINCgtfZGVzY0FwcGVuZEIRCg9fbmV4dE9wdGlv",
            "bkRhdGVCEQoPX25leHRPcHRpb25UeXBlQhQKEl9uZXh0T3B0aW9uUGFydGlh",
            "bEIMCgpfYm9uZE5vdGVzQj8KFmNvbS5pYi5jbGllbnQucHJvdG9idWZCFENv",
            "bnRyYWN0RGV0YWlsc1Byb3RvqgIOSUJBcGkucHJvdG9idWZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::IBApi.protobuf.IneligibilityReasonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IBApi.protobuf.ContractDetails), global::IBApi.protobuf.ContractDetails.Parser, new[]{ "MarketName", "MinTick", "OrderTypes", "ValidExchanges", "PriceMagnifier", "UnderConId", "LongName", "ContractMonth", "Industry", "Category", "Subcategory", "TimeZoneId", "TradingHours", "LiquidHours", "EvRule", "EvMultiplier", "SecIdList", "AggGroup", "UnderSymbol", "UnderSecType", "MarketRuleIds", "RealExpirationDate", "StockType", "MinSize", "SizeIncrement", "SuggestedSizeIncrement", "FundName", "FundFamily", "FundType", "FundFrontLoad", "FundBackLoad", "FundBackLoadTimeInterval", "FundManagementFee", "FundClosed", "FundClosedForNewInvestors", "FundClosedForNewMoney", "FundNotifyAmount", "FundMinimumInitialPurchase", "FundMinimumSubsequentPurchase", "FundBlueSkyStates", "FundBlueSkyTerritories", "FundDistributionPolicyIndicator", "FundAssetType", "Cusip", "IssueDate", "Ratings", "BondType", "Coupon", "CouponType", "Convertible", "Callable", "Puttable", "DescAppend", "NextOptionDate", "NextOptionType", "NextOptionPartial", "BondNotes", "IneligibilityReasonList" }, new[]{ "MarketName", "MinTick", "OrderTypes", "ValidExchanges", "PriceMagnifier", "UnderConId", "LongName", "ContractMonth", "Industry", "Category", "Subcategory", "TimeZoneId", "TradingHours", "LiquidHours", "EvRule", "EvMultiplier", "AggGroup", "UnderSymbol", "UnderSecType", "MarketRuleIds", "RealExpirationDate", "StockType", "MinSize", "SizeIncrement", "SuggestedSizeIncrement", "FundName", "FundFamily", "FundType", "FundFrontLoad", "FundBackLoad", "FundBackLoadTimeInterval", "FundManagementFee", "FundClosed", "FundClosedForNewInvestors", "FundClosedForNewMoney", "FundNotifyAmount", "FundMinimumInitialPurchase", "FundMinimumSubsequentPurchase", "FundBlueSkyStates", "FundBlueSkyTerritories", "FundDistributionPolicyIndicator", "FundAssetType", "Cusip", "IssueDate", "Ratings", "BondType", "Coupon", "CouponType", "Convertible", "Callable", "Puttable", "DescAppend", "NextOptionDate", "NextOptionType", "NextOptionPartial", "BondNotes" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ContractDetails : pb::IMessage<ContractDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContractDetails> _parser = new pb::MessageParser<ContractDetails>(() => new ContractDetails());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ContractDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IBApi.protobuf.ContractDetailsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContractDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContractDetails(ContractDetails other) : this() {
      _hasBits0 = other._hasBits0;
      marketName_ = other.marketName_;
      minTick_ = other.minTick_;
      orderTypes_ = other.orderTypes_;
      validExchanges_ = other.validExchanges_;
      priceMagnifier_ = other.priceMagnifier_;
      underConId_ = other.underConId_;
      longName_ = other.longName_;
      contractMonth_ = other.contractMonth_;
      industry_ = other.industry_;
      category_ = other.category_;
      subcategory_ = other.subcategory_;
      timeZoneId_ = other.timeZoneId_;
      tradingHours_ = other.tradingHours_;
      liquidHours_ = other.liquidHours_;
      evRule_ = other.evRule_;
      evMultiplier_ = other.evMultiplier_;
      secIdList_ = other.secIdList_.Clone();
      aggGroup_ = other.aggGroup_;
      underSymbol_ = other.underSymbol_;
      underSecType_ = other.underSecType_;
      marketRuleIds_ = other.marketRuleIds_;
      realExpirationDate_ = other.realExpirationDate_;
      stockType_ = other.stockType_;
      minSize_ = other.minSize_;
      sizeIncrement_ = other.sizeIncrement_;
      suggestedSizeIncrement_ = other.suggestedSizeIncrement_;
      fundName_ = other.fundName_;
      fundFamily_ = other.fundFamily_;
      fundType_ = other.fundType_;
      fundFrontLoad_ = other.fundFrontLoad_;
      fundBackLoad_ = other.fundBackLoad_;
      fundBackLoadTimeInterval_ = other.fundBackLoadTimeInterval_;
      fundManagementFee_ = other.fundManagementFee_;
      fundClosed_ = other.fundClosed_;
      fundClosedForNewInvestors_ = other.fundClosedForNewInvestors_;
      fundClosedForNewMoney_ = other.fundClosedForNewMoney_;
      fundNotifyAmount_ = other.fundNotifyAmount_;
      fundMinimumInitialPurchase_ = other.fundMinimumInitialPurchase_;
      fundMinimumSubsequentPurchase_ = other.fundMinimumSubsequentPurchase_;
      fundBlueSkyStates_ = other.fundBlueSkyStates_;
      fundBlueSkyTerritories_ = other.fundBlueSkyTerritories_;
      fundDistributionPolicyIndicator_ = other.fundDistributionPolicyIndicator_;
      fundAssetType_ = other.fundAssetType_;
      cusip_ = other.cusip_;
      issueDate_ = other.issueDate_;
      ratings_ = other.ratings_;
      bondType_ = other.bondType_;
      coupon_ = other.coupon_;
      couponType_ = other.couponType_;
      convertible_ = other.convertible_;
      callable_ = other.callable_;
      puttable_ = other.puttable_;
      descAppend_ = other.descAppend_;
      nextOptionDate_ = other.nextOptionDate_;
      nextOptionType_ = other.nextOptionType_;
      nextOptionPartial_ = other.nextOptionPartial_;
      bondNotes_ = other.bondNotes_;
      ineligibilityReasonList_ = other.ineligibilityReasonList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContractDetails Clone() {
      return new ContractDetails(this);
    }

    /// <summary>Field number for the "marketName" field.</summary>
    public const int MarketNameFieldNumber = 1;
    private readonly static string MarketNameDefaultValue = "";

    private string marketName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MarketName {
      get { return marketName_ ?? MarketNameDefaultValue; }
      set {
        marketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "marketName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMarketName {
      get { return marketName_ != null; }
    }
    /// <summary>Clears the value of the "marketName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMarketName() {
      marketName_ = null;
    }

    /// <summary>Field number for the "minTick" field.</summary>
    public const int MinTickFieldNumber = 2;
    private readonly static string MinTickDefaultValue = "";

    private string minTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MinTick {
      get { return minTick_ ?? MinTickDefaultValue; }
      set {
        minTick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "minTick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinTick {
      get { return minTick_ != null; }
    }
    /// <summary>Clears the value of the "minTick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinTick() {
      minTick_ = null;
    }

    /// <summary>Field number for the "orderTypes" field.</summary>
    public const int OrderTypesFieldNumber = 3;
    private readonly static string OrderTypesDefaultValue = "";

    private string orderTypes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderTypes {
      get { return orderTypes_ ?? OrderTypesDefaultValue; }
      set {
        orderTypes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "orderTypes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrderTypes {
      get { return orderTypes_ != null; }
    }
    /// <summary>Clears the value of the "orderTypes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrderTypes() {
      orderTypes_ = null;
    }

    /// <summary>Field number for the "validExchanges" field.</summary>
    public const int ValidExchangesFieldNumber = 4;
    private readonly static string ValidExchangesDefaultValue = "";

    private string validExchanges_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ValidExchanges {
      get { return validExchanges_ ?? ValidExchangesDefaultValue; }
      set {
        validExchanges_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "validExchanges" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValidExchanges {
      get { return validExchanges_ != null; }
    }
    /// <summary>Clears the value of the "validExchanges" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValidExchanges() {
      validExchanges_ = null;
    }

    /// <summary>Field number for the "priceMagnifier" field.</summary>
    public const int PriceMagnifierFieldNumber = 5;
    private readonly static int PriceMagnifierDefaultValue = 0;

    private int priceMagnifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PriceMagnifier {
      get { if ((_hasBits0 & 1) != 0) { return priceMagnifier_; } else { return PriceMagnifierDefaultValue; } }
      set {
        _hasBits0 |= 1;
        priceMagnifier_ = value;
      }
    }
    /// <summary>Gets whether the "priceMagnifier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPriceMagnifier {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "priceMagnifier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPriceMagnifier() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "underConId" field.</summary>
    public const int UnderConIdFieldNumber = 6;
    private readonly static int UnderConIdDefaultValue = 0;

    private int underConId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnderConId {
      get { if ((_hasBits0 & 2) != 0) { return underConId_; } else { return UnderConIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        underConId_ = value;
      }
    }
    /// <summary>Gets whether the "underConId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUnderConId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "underConId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUnderConId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "longName" field.</summary>
    public const int LongNameFieldNumber = 7;
    private readonly static string LongNameDefaultValue = "";

    private string longName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LongName {
      get { return longName_ ?? LongNameDefaultValue; }
      set {
        longName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "longName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLongName {
      get { return longName_ != null; }
    }
    /// <summary>Clears the value of the "longName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLongName() {
      longName_ = null;
    }

    /// <summary>Field number for the "contractMonth" field.</summary>
    public const int ContractMonthFieldNumber = 8;
    private readonly static string ContractMonthDefaultValue = "";

    private string contractMonth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ContractMonth {
      get { return contractMonth_ ?? ContractMonthDefaultValue; }
      set {
        contractMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "contractMonth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContractMonth {
      get { return contractMonth_ != null; }
    }
    /// <summary>Clears the value of the "contractMonth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContractMonth() {
      contractMonth_ = null;
    }

    /// <summary>Field number for the "industry" field.</summary>
    public const int IndustryFieldNumber = 9;
    private readonly static string IndustryDefaultValue = "";

    private string industry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Industry {
      get { return industry_ ?? IndustryDefaultValue; }
      set {
        industry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "industry" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIndustry {
      get { return industry_ != null; }
    }
    /// <summary>Clears the value of the "industry" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIndustry() {
      industry_ = null;
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 10;
    private readonly static string CategoryDefaultValue = "";

    private string category_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Category {
      get { return category_ ?? CategoryDefaultValue; }
      set {
        category_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "category" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCategory {
      get { return category_ != null; }
    }
    /// <summary>Clears the value of the "category" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCategory() {
      category_ = null;
    }

    /// <summary>Field number for the "subcategory" field.</summary>
    public const int SubcategoryFieldNumber = 11;
    private readonly static string SubcategoryDefaultValue = "";

    private string subcategory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Subcategory {
      get { return subcategory_ ?? SubcategoryDefaultValue; }
      set {
        subcategory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "subcategory" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSubcategory {
      get { return subcategory_ != null; }
    }
    /// <summary>Clears the value of the "subcategory" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSubcategory() {
      subcategory_ = null;
    }

    /// <summary>Field number for the "timeZoneId" field.</summary>
    public const int TimeZoneIdFieldNumber = 12;
    private readonly static string TimeZoneIdDefaultValue = "";

    private string timeZoneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TimeZoneId {
      get { return timeZoneId_ ?? TimeZoneIdDefaultValue; }
      set {
        timeZoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "timeZoneId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimeZoneId {
      get { return timeZoneId_ != null; }
    }
    /// <summary>Clears the value of the "timeZoneId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimeZoneId() {
      timeZoneId_ = null;
    }

    /// <summary>Field number for the "tradingHours" field.</summary>
    public const int TradingHoursFieldNumber = 13;
    private readonly static string TradingHoursDefaultValue = "";

    private string tradingHours_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TradingHours {
      get { return tradingHours_ ?? TradingHoursDefaultValue; }
      set {
        tradingHours_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tradingHours" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTradingHours {
      get { return tradingHours_ != null; }
    }
    /// <summary>Clears the value of the "tradingHours" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTradingHours() {
      tradingHours_ = null;
    }

    /// <summary>Field number for the "liquidHours" field.</summary>
    public const int LiquidHoursFieldNumber = 14;
    private readonly static string LiquidHoursDefaultValue = "";

    private string liquidHours_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LiquidHours {
      get { return liquidHours_ ?? LiquidHoursDefaultValue; }
      set {
        liquidHours_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "liquidHours" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLiquidHours {
      get { return liquidHours_ != null; }
    }
    /// <summary>Clears the value of the "liquidHours" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLiquidHours() {
      liquidHours_ = null;
    }

    /// <summary>Field number for the "evRule" field.</summary>
    public const int EvRuleFieldNumber = 15;
    private readonly static string EvRuleDefaultValue = "";

    private string evRule_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EvRule {
      get { return evRule_ ?? EvRuleDefaultValue; }
      set {
        evRule_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "evRule" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEvRule {
      get { return evRule_ != null; }
    }
    /// <summary>Clears the value of the "evRule" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEvRule() {
      evRule_ = null;
    }

    /// <summary>Field number for the "evMultiplier" field.</summary>
    public const int EvMultiplierFieldNumber = 16;
    private readonly static double EvMultiplierDefaultValue = 0D;

    private double evMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EvMultiplier {
      get { if ((_hasBits0 & 4) != 0) { return evMultiplier_; } else { return EvMultiplierDefaultValue; } }
      set {
        _hasBits0 |= 4;
        evMultiplier_ = value;
      }
    }
    /// <summary>Gets whether the "evMultiplier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEvMultiplier {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "evMultiplier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEvMultiplier() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "secIdList" field.</summary>
    public const int SecIdListFieldNumber = 17;
    private static readonly pbc::MapField<string, string>.Codec _map_secIdList_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 138);
    private readonly pbc::MapField<string, string> secIdList_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> SecIdList {
      get { return secIdList_; }
    }

    /// <summary>Field number for the "aggGroup" field.</summary>
    public const int AggGroupFieldNumber = 18;
    private readonly static int AggGroupDefaultValue = 0;

    private int aggGroup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AggGroup {
      get { if ((_hasBits0 & 8) != 0) { return aggGroup_; } else { return AggGroupDefaultValue; } }
      set {
        _hasBits0 |= 8;
        aggGroup_ = value;
      }
    }
    /// <summary>Gets whether the "aggGroup" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAggGroup {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "aggGroup" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAggGroup() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "underSymbol" field.</summary>
    public const int UnderSymbolFieldNumber = 19;
    private readonly static string UnderSymbolDefaultValue = "";

    private string underSymbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UnderSymbol {
      get { return underSymbol_ ?? UnderSymbolDefaultValue; }
      set {
        underSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "underSymbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUnderSymbol {
      get { return underSymbol_ != null; }
    }
    /// <summary>Clears the value of the "underSymbol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUnderSymbol() {
      underSymbol_ = null;
    }

    /// <summary>Field number for the "underSecType" field.</summary>
    public const int UnderSecTypeFieldNumber = 20;
    private readonly static string UnderSecTypeDefaultValue = "";

    private string underSecType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UnderSecType {
      get { return underSecType_ ?? UnderSecTypeDefaultValue; }
      set {
        underSecType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "underSecType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUnderSecType {
      get { return underSecType_ != null; }
    }
    /// <summary>Clears the value of the "underSecType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUnderSecType() {
      underSecType_ = null;
    }

    /// <summary>Field number for the "marketRuleIds" field.</summary>
    public const int MarketRuleIdsFieldNumber = 21;
    private readonly static string MarketRuleIdsDefaultValue = "";

    private string marketRuleIds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MarketRuleIds {
      get { return marketRuleIds_ ?? MarketRuleIdsDefaultValue; }
      set {
        marketRuleIds_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "marketRuleIds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMarketRuleIds {
      get { return marketRuleIds_ != null; }
    }
    /// <summary>Clears the value of the "marketRuleIds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMarketRuleIds() {
      marketRuleIds_ = null;
    }

    /// <summary>Field number for the "realExpirationDate" field.</summary>
    public const int RealExpirationDateFieldNumber = 22;
    private readonly static string RealExpirationDateDefaultValue = "";

    private string realExpirationDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RealExpirationDate {
      get { return realExpirationDate_ ?? RealExpirationDateDefaultValue; }
      set {
        realExpirationDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "realExpirationDate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRealExpirationDate {
      get { return realExpirationDate_ != null; }
    }
    /// <summary>Clears the value of the "realExpirationDate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRealExpirationDate() {
      realExpirationDate_ = null;
    }

    /// <summary>Field number for the "stockType" field.</summary>
    public const int StockTypeFieldNumber = 23;
    private readonly static string StockTypeDefaultValue = "";

    private string stockType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StockType {
      get { return stockType_ ?? StockTypeDefaultValue; }
      set {
        stockType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "stockType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStockType {
      get { return stockType_ != null; }
    }
    /// <summary>Clears the value of the "stockType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStockType() {
      stockType_ = null;
    }

    /// <summary>Field number for the "minSize" field.</summary>
    public const int MinSizeFieldNumber = 24;
    private readonly static string MinSizeDefaultValue = "";

    private string minSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MinSize {
      get { return minSize_ ?? MinSizeDefaultValue; }
      set {
        minSize_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "minSize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinSize {
      get { return minSize_ != null; }
    }
    /// <summary>Clears the value of the "minSize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinSize() {
      minSize_ = null;
    }

    /// <summary>Field number for the "sizeIncrement" field.</summary>
    public const int SizeIncrementFieldNumber = 25;
    private readonly static string SizeIncrementDefaultValue = "";

    private string sizeIncrement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SizeIncrement {
      get { return sizeIncrement_ ?? SizeIncrementDefaultValue; }
      set {
        sizeIncrement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "sizeIncrement" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSizeIncrement {
      get { return sizeIncrement_ != null; }
    }
    /// <summary>Clears the value of the "sizeIncrement" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSizeIncrement() {
      sizeIncrement_ = null;
    }

    /// <summary>Field number for the "suggestedSizeIncrement" field.</summary>
    public const int SuggestedSizeIncrementFieldNumber = 26;
    private readonly static string SuggestedSizeIncrementDefaultValue = "";

    private string suggestedSizeIncrement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SuggestedSizeIncrement {
      get { return suggestedSizeIncrement_ ?? SuggestedSizeIncrementDefaultValue; }
      set {
        suggestedSizeIncrement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "suggestedSizeIncrement" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuggestedSizeIncrement {
      get { return suggestedSizeIncrement_ != null; }
    }
    /// <summary>Clears the value of the "suggestedSizeIncrement" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuggestedSizeIncrement() {
      suggestedSizeIncrement_ = null;
    }

    /// <summary>Field number for the "fundName" field.</summary>
    public const int FundNameFieldNumber = 27;
    private readonly static string FundNameDefaultValue = "";

    private string fundName_;
    /// <summary>
    /// fund	fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FundName {
      get { return fundName_ ?? FundNameDefaultValue; }
      set {
        fundName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fundName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundName {
      get { return fundName_ != null; }
    }
    /// <summary>Clears the value of the "fundName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundName() {
      fundName_ = null;
    }

    /// <summary>Field number for the "fundFamily" field.</summary>
    public const int FundFamilyFieldNumber = 28;
    private readonly static string FundFamilyDefaultValue = "";

    private string fundFamily_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FundFamily {
      get { return fundFamily_ ?? FundFamilyDefaultValue; }
      set {
        fundFamily_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fundFamily" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundFamily {
      get { return fundFamily_ != null; }
    }
    /// <summary>Clears the value of the "fundFamily" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundFamily() {
      fundFamily_ = null;
    }

    /// <summary>Field number for the "fundType" field.</summary>
    public const int FundTypeFieldNumber = 29;
    private readonly static string FundTypeDefaultValue = "";

    private string fundType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FundType {
      get { return fundType_ ?? FundTypeDefaultValue; }
      set {
        fundType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fundType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundType {
      get { return fundType_ != null; }
    }
    /// <summary>Clears the value of the "fundType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundType() {
      fundType_ = null;
    }

    /// <summary>Field number for the "fundFrontLoad" field.</summary>
    public const int FundFrontLoadFieldNumber = 30;
    private readonly static string FundFrontLoadDefaultValue = "";

    private string fundFrontLoad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FundFrontLoad {
      get { return fundFrontLoad_ ?? FundFrontLoadDefaultValue; }
      set {
        fundFrontLoad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fundFrontLoad" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundFrontLoad {
      get { return fundFrontLoad_ != null; }
    }
    /// <summary>Clears the value of the "fundFrontLoad" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundFrontLoad() {
      fundFrontLoad_ = null;
    }

    /// <summary>Field number for the "fundBackLoad" field.</summary>
    public const int FundBackLoadFieldNumber = 31;
    private readonly static string FundBackLoadDefaultValue = "";

    private string fundBackLoad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FundBackLoad {
      get { return fundBackLoad_ ?? FundBackLoadDefaultValue; }
      set {
        fundBackLoad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fundBackLoad" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundBackLoad {
      get { return fundBackLoad_ != null; }
    }
    /// <summary>Clears the value of the "fundBackLoad" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundBackLoad() {
      fundBackLoad_ = null;
    }

    /// <summary>Field number for the "fundBackLoadTimeInterval" field.</summary>
    public const int FundBackLoadTimeIntervalFieldNumber = 32;
    private readonly static string FundBackLoadTimeIntervalDefaultValue = "";

    private string fundBackLoadTimeInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FundBackLoadTimeInterval {
      get { return fundBackLoadTimeInterval_ ?? FundBackLoadTimeIntervalDefaultValue; }
      set {
        fundBackLoadTimeInterval_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fundBackLoadTimeInterval" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundBackLoadTimeInterval {
      get { return fundBackLoadTimeInterval_ != null; }
    }
    /// <summary>Clears the value of the "fundBackLoadTimeInterval" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundBackLoadTimeInterval() {
      fundBackLoadTimeInterval_ = null;
    }

    /// <summary>Field number for the "fundManagementFee" field.</summary>
    public const int FundManagementFeeFieldNumber = 33;
    private readonly static string FundManagementFeeDefaultValue = "";

    private string fundManagementFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FundManagementFee {
      get { return fundManagementFee_ ?? FundManagementFeeDefaultValue; }
      set {
        fundManagementFee_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fundManagementFee" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundManagementFee {
      get { return fundManagementFee_ != null; }
    }
    /// <summary>Clears the value of the "fundManagementFee" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundManagementFee() {
      fundManagementFee_ = null;
    }

    /// <summary>Field number for the "fundClosed" field.</summary>
    public const int FundClosedFieldNumber = 34;
    private readonly static bool FundClosedDefaultValue = false;

    private bool fundClosed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FundClosed {
      get { if ((_hasBits0 & 16) != 0) { return fundClosed_; } else { return FundClosedDefaultValue; } }
      set {
        _hasBits0 |= 16;
        fundClosed_ = value;
      }
    }
    /// <summary>Gets whether the "fundClosed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundClosed {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "fundClosed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundClosed() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "fundClosedForNewInvestors" field.</summary>
    public const int FundClosedForNewInvestorsFieldNumber = 35;
    private readonly static bool FundClosedForNewInvestorsDefaultValue = false;

    private bool fundClosedForNewInvestors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FundClosedForNewInvestors {
      get { if ((_hasBits0 & 32) != 0) { return fundClosedForNewInvestors_; } else { return FundClosedForNewInvestorsDefaultValue; } }
      set {
        _hasBits0 |= 32;
        fundClosedForNewInvestors_ = value;
      }
    }
    /// <summary>Gets whether the "fundClosedForNewInvestors" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundClosedForNewInvestors {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "fundClosedForNewInvestors" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundClosedForNewInvestors() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "fundClosedForNewMoney" field.</summary>
    public const int FundClosedForNewMoneyFieldNumber = 36;
    private readonly static bool FundClosedForNewMoneyDefaultValue = false;

    private bool fundClosedForNewMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FundClosedForNewMoney {
      get { if ((_hasBits0 & 64) != 0) { return fundClosedForNewMoney_; } else { return FundClosedForNewMoneyDefaultValue; } }
      set {
        _hasBits0 |= 64;
        fundClosedForNewMoney_ = value;
      }
    }
    /// <summary>Gets whether the "fundClosedForNewMoney" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundClosedForNewMoney {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "fundClosedForNewMoney" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundClosedForNewMoney() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "fundNotifyAmount" field.</summary>
    public const int FundNotifyAmountFieldNumber = 37;
    private readonly static string FundNotifyAmountDefaultValue = "";

    private string fundNotifyAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FundNotifyAmount {
      get { return fundNotifyAmount_ ?? FundNotifyAmountDefaultValue; }
      set {
        fundNotifyAmount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fundNotifyAmount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundNotifyAmount {
      get { return fundNotifyAmount_ != null; }
    }
    /// <summary>Clears the value of the "fundNotifyAmount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundNotifyAmount() {
      fundNotifyAmount_ = null;
    }

    /// <summary>Field number for the "fundMinimumInitialPurchase" field.</summary>
    public const int FundMinimumInitialPurchaseFieldNumber = 38;
    private readonly static string FundMinimumInitialPurchaseDefaultValue = "";

    private string fundMinimumInitialPurchase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FundMinimumInitialPurchase {
      get { return fundMinimumInitialPurchase_ ?? FundMinimumInitialPurchaseDefaultValue; }
      set {
        fundMinimumInitialPurchase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fundMinimumInitialPurchase" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundMinimumInitialPurchase {
      get { return fundMinimumInitialPurchase_ != null; }
    }
    /// <summary>Clears the value of the "fundMinimumInitialPurchase" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundMinimumInitialPurchase() {
      fundMinimumInitialPurchase_ = null;
    }

    /// <summary>Field number for the "fundMinimumSubsequentPurchase" field.</summary>
    public const int FundMinimumSubsequentPurchaseFieldNumber = 39;
    private readonly static string FundMinimumSubsequentPurchaseDefaultValue = "";

    private string fundMinimumSubsequentPurchase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FundMinimumSubsequentPurchase {
      get { return fundMinimumSubsequentPurchase_ ?? FundMinimumSubsequentPurchaseDefaultValue; }
      set {
        fundMinimumSubsequentPurchase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fundMinimumSubsequentPurchase" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundMinimumSubsequentPurchase {
      get { return fundMinimumSubsequentPurchase_ != null; }
    }
    /// <summary>Clears the value of the "fundMinimumSubsequentPurchase" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundMinimumSubsequentPurchase() {
      fundMinimumSubsequentPurchase_ = null;
    }

    /// <summary>Field number for the "fundBlueSkyStates" field.</summary>
    public const int FundBlueSkyStatesFieldNumber = 40;
    private readonly static string FundBlueSkyStatesDefaultValue = "";

    private string fundBlueSkyStates_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FundBlueSkyStates {
      get { return fundBlueSkyStates_ ?? FundBlueSkyStatesDefaultValue; }
      set {
        fundBlueSkyStates_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fundBlueSkyStates" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundBlueSkyStates {
      get { return fundBlueSkyStates_ != null; }
    }
    /// <summary>Clears the value of the "fundBlueSkyStates" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundBlueSkyStates() {
      fundBlueSkyStates_ = null;
    }

    /// <summary>Field number for the "fundBlueSkyTerritories" field.</summary>
    public const int FundBlueSkyTerritoriesFieldNumber = 41;
    private readonly static string FundBlueSkyTerritoriesDefaultValue = "";

    private string fundBlueSkyTerritories_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FundBlueSkyTerritories {
      get { return fundBlueSkyTerritories_ ?? FundBlueSkyTerritoriesDefaultValue; }
      set {
        fundBlueSkyTerritories_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fundBlueSkyTerritories" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundBlueSkyTerritories {
      get { return fundBlueSkyTerritories_ != null; }
    }
    /// <summary>Clears the value of the "fundBlueSkyTerritories" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundBlueSkyTerritories() {
      fundBlueSkyTerritories_ = null;
    }

    /// <summary>Field number for the "fundDistributionPolicyIndicator" field.</summary>
    public const int FundDistributionPolicyIndicatorFieldNumber = 42;
    private readonly static string FundDistributionPolicyIndicatorDefaultValue = "";

    private string fundDistributionPolicyIndicator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FundDistributionPolicyIndicator {
      get { return fundDistributionPolicyIndicator_ ?? FundDistributionPolicyIndicatorDefaultValue; }
      set {
        fundDistributionPolicyIndicator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fundDistributionPolicyIndicator" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundDistributionPolicyIndicator {
      get { return fundDistributionPolicyIndicator_ != null; }
    }
    /// <summary>Clears the value of the "fundDistributionPolicyIndicator" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundDistributionPolicyIndicator() {
      fundDistributionPolicyIndicator_ = null;
    }

    /// <summary>Field number for the "fundAssetType" field.</summary>
    public const int FundAssetTypeFieldNumber = 43;
    private readonly static string FundAssetTypeDefaultValue = "";

    private string fundAssetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FundAssetType {
      get { return fundAssetType_ ?? FundAssetTypeDefaultValue; }
      set {
        fundAssetType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fundAssetType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFundAssetType {
      get { return fundAssetType_ != null; }
    }
    /// <summary>Clears the value of the "fundAssetType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFundAssetType() {
      fundAssetType_ = null;
    }

    /// <summary>Field number for the "cusip" field.</summary>
    public const int CusipFieldNumber = 44;
    private readonly static string CusipDefaultValue = "";

    private string cusip_;
    /// <summary>
    /// bond fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cusip {
      get { return cusip_ ?? CusipDefaultValue; }
      set {
        cusip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cusip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCusip {
      get { return cusip_ != null; }
    }
    /// <summary>Clears the value of the "cusip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCusip() {
      cusip_ = null;
    }

    /// <summary>Field number for the "issueDate" field.</summary>
    public const int IssueDateFieldNumber = 45;
    private readonly static string IssueDateDefaultValue = "";

    private string issueDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IssueDate {
      get { return issueDate_ ?? IssueDateDefaultValue; }
      set {
        issueDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "issueDate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIssueDate {
      get { return issueDate_ != null; }
    }
    /// <summary>Clears the value of the "issueDate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIssueDate() {
      issueDate_ = null;
    }

    /// <summary>Field number for the "ratings" field.</summary>
    public const int RatingsFieldNumber = 46;
    private readonly static string RatingsDefaultValue = "";

    private string ratings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ratings {
      get { return ratings_ ?? RatingsDefaultValue; }
      set {
        ratings_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ratings" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRatings {
      get { return ratings_ != null; }
    }
    /// <summary>Clears the value of the "ratings" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRatings() {
      ratings_ = null;
    }

    /// <summary>Field number for the "bondType" field.</summary>
    public const int BondTypeFieldNumber = 47;
    private readonly static string BondTypeDefaultValue = "";

    private string bondType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BondType {
      get { return bondType_ ?? BondTypeDefaultValue; }
      set {
        bondType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "bondType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBondType {
      get { return bondType_ != null; }
    }
    /// <summary>Clears the value of the "bondType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBondType() {
      bondType_ = null;
    }

    /// <summary>Field number for the "coupon" field.</summary>
    public const int CouponFieldNumber = 48;
    private readonly static double CouponDefaultValue = 0D;

    private double coupon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Coupon {
      get { if ((_hasBits0 & 128) != 0) { return coupon_; } else { return CouponDefaultValue; } }
      set {
        _hasBits0 |= 128;
        coupon_ = value;
      }
    }
    /// <summary>Gets whether the "coupon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCoupon {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "coupon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCoupon() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "couponType" field.</summary>
    public const int CouponTypeFieldNumber = 49;
    private readonly static string CouponTypeDefaultValue = "";

    private string couponType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CouponType {
      get { return couponType_ ?? CouponTypeDefaultValue; }
      set {
        couponType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "couponType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCouponType {
      get { return couponType_ != null; }
    }
    /// <summary>Clears the value of the "couponType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCouponType() {
      couponType_ = null;
    }

    /// <summary>Field number for the "convertible" field.</summary>
    public const int ConvertibleFieldNumber = 50;
    private readonly static bool ConvertibleDefaultValue = false;

    private bool convertible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Convertible {
      get { if ((_hasBits0 & 256) != 0) { return convertible_; } else { return ConvertibleDefaultValue; } }
      set {
        _hasBits0 |= 256;
        convertible_ = value;
      }
    }
    /// <summary>Gets whether the "convertible" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConvertible {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "convertible" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConvertible() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "callable" field.</summary>
    public const int CallableFieldNumber = 51;
    private readonly static bool CallableDefaultValue = false;

    private bool callable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Callable {
      get { if ((_hasBits0 & 512) != 0) { return callable_; } else { return CallableDefaultValue; } }
      set {
        _hasBits0 |= 512;
        callable_ = value;
      }
    }
    /// <summary>Gets whether the "callable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCallable {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "callable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCallable() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "puttable" field.</summary>
    public const int PuttableFieldNumber = 52;
    private readonly static bool PuttableDefaultValue = false;

    private bool puttable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Puttable {
      get { if ((_hasBits0 & 1024) != 0) { return puttable_; } else { return PuttableDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        puttable_ = value;
      }
    }
    /// <summary>Gets whether the "puttable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPuttable {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "puttable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPuttable() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "descAppend" field.</summary>
    public const int DescAppendFieldNumber = 53;
    private readonly static string DescAppendDefaultValue = "";

    private string descAppend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DescAppend {
      get { return descAppend_ ?? DescAppendDefaultValue; }
      set {
        descAppend_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descAppend" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescAppend {
      get { return descAppend_ != null; }
    }
    /// <summary>Clears the value of the "descAppend" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescAppend() {
      descAppend_ = null;
    }

    /// <summary>Field number for the "nextOptionDate" field.</summary>
    public const int NextOptionDateFieldNumber = 54;
    private readonly static string NextOptionDateDefaultValue = "";

    private string nextOptionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NextOptionDate {
      get { return nextOptionDate_ ?? NextOptionDateDefaultValue; }
      set {
        nextOptionDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "nextOptionDate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNextOptionDate {
      get { return nextOptionDate_ != null; }
    }
    /// <summary>Clears the value of the "nextOptionDate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNextOptionDate() {
      nextOptionDate_ = null;
    }

    /// <summary>Field number for the "nextOptionType" field.</summary>
    public const int NextOptionTypeFieldNumber = 55;
    private readonly static string NextOptionTypeDefaultValue = "";

    private string nextOptionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NextOptionType {
      get { return nextOptionType_ ?? NextOptionTypeDefaultValue; }
      set {
        nextOptionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "nextOptionType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNextOptionType {
      get { return nextOptionType_ != null; }
    }
    /// <summary>Clears the value of the "nextOptionType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNextOptionType() {
      nextOptionType_ = null;
    }

    /// <summary>Field number for the "nextOptionPartial" field.</summary>
    public const int NextOptionPartialFieldNumber = 56;
    private readonly static bool NextOptionPartialDefaultValue = false;

    private bool nextOptionPartial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NextOptionPartial {
      get { if ((_hasBits0 & 2048) != 0) { return nextOptionPartial_; } else { return NextOptionPartialDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        nextOptionPartial_ = value;
      }
    }
    /// <summary>Gets whether the "nextOptionPartial" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNextOptionPartial {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "nextOptionPartial" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNextOptionPartial() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "bondNotes" field.</summary>
    public const int BondNotesFieldNumber = 57;
    private readonly static string BondNotesDefaultValue = "";

    private string bondNotes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BondNotes {
      get { return bondNotes_ ?? BondNotesDefaultValue; }
      set {
        bondNotes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "bondNotes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBondNotes {
      get { return bondNotes_ != null; }
    }
    /// <summary>Clears the value of the "bondNotes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBondNotes() {
      bondNotes_ = null;
    }

    /// <summary>Field number for the "ineligibilityReasonList" field.</summary>
    public const int IneligibilityReasonListFieldNumber = 58;
    private static readonly pb::FieldCodec<global::IBApi.protobuf.IneligibilityReason> _repeated_ineligibilityReasonList_codec
        = pb::FieldCodec.ForMessage(466, global::IBApi.protobuf.IneligibilityReason.Parser);
    private readonly pbc::RepeatedField<global::IBApi.protobuf.IneligibilityReason> ineligibilityReasonList_ = new pbc::RepeatedField<global::IBApi.protobuf.IneligibilityReason>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::IBApi.protobuf.IneligibilityReason> IneligibilityReasonList {
      get { return ineligibilityReasonList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ContractDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ContractDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarketName != other.MarketName) return false;
      if (MinTick != other.MinTick) return false;
      if (OrderTypes != other.OrderTypes) return false;
      if (ValidExchanges != other.ValidExchanges) return false;
      if (PriceMagnifier != other.PriceMagnifier) return false;
      if (UnderConId != other.UnderConId) return false;
      if (LongName != other.LongName) return false;
      if (ContractMonth != other.ContractMonth) return false;
      if (Industry != other.Industry) return false;
      if (Category != other.Category) return false;
      if (Subcategory != other.Subcategory) return false;
      if (TimeZoneId != other.TimeZoneId) return false;
      if (TradingHours != other.TradingHours) return false;
      if (LiquidHours != other.LiquidHours) return false;
      if (EvRule != other.EvRule) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EvMultiplier, other.EvMultiplier)) return false;
      if (!SecIdList.Equals(other.SecIdList)) return false;
      if (AggGroup != other.AggGroup) return false;
      if (UnderSymbol != other.UnderSymbol) return false;
      if (UnderSecType != other.UnderSecType) return false;
      if (MarketRuleIds != other.MarketRuleIds) return false;
      if (RealExpirationDate != other.RealExpirationDate) return false;
      if (StockType != other.StockType) return false;
      if (MinSize != other.MinSize) return false;
      if (SizeIncrement != other.SizeIncrement) return false;
      if (SuggestedSizeIncrement != other.SuggestedSizeIncrement) return false;
      if (FundName != other.FundName) return false;
      if (FundFamily != other.FundFamily) return false;
      if (FundType != other.FundType) return false;
      if (FundFrontLoad != other.FundFrontLoad) return false;
      if (FundBackLoad != other.FundBackLoad) return false;
      if (FundBackLoadTimeInterval != other.FundBackLoadTimeInterval) return false;
      if (FundManagementFee != other.FundManagementFee) return false;
      if (FundClosed != other.FundClosed) return false;
      if (FundClosedForNewInvestors != other.FundClosedForNewInvestors) return false;
      if (FundClosedForNewMoney != other.FundClosedForNewMoney) return false;
      if (FundNotifyAmount != other.FundNotifyAmount) return false;
      if (FundMinimumInitialPurchase != other.FundMinimumInitialPurchase) return false;
      if (FundMinimumSubsequentPurchase != other.FundMinimumSubsequentPurchase) return false;
      if (FundBlueSkyStates != other.FundBlueSkyStates) return false;
      if (FundBlueSkyTerritories != other.FundBlueSkyTerritories) return false;
      if (FundDistributionPolicyIndicator != other.FundDistributionPolicyIndicator) return false;
      if (FundAssetType != other.FundAssetType) return false;
      if (Cusip != other.Cusip) return false;
      if (IssueDate != other.IssueDate) return false;
      if (Ratings != other.Ratings) return false;
      if (BondType != other.BondType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Coupon, other.Coupon)) return false;
      if (CouponType != other.CouponType) return false;
      if (Convertible != other.Convertible) return false;
      if (Callable != other.Callable) return false;
      if (Puttable != other.Puttable) return false;
      if (DescAppend != other.DescAppend) return false;
      if (NextOptionDate != other.NextOptionDate) return false;
      if (NextOptionType != other.NextOptionType) return false;
      if (NextOptionPartial != other.NextOptionPartial) return false;
      if (BondNotes != other.BondNotes) return false;
      if(!ineligibilityReasonList_.Equals(other.ineligibilityReasonList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMarketName) hash ^= MarketName.GetHashCode();
      if (HasMinTick) hash ^= MinTick.GetHashCode();
      if (HasOrderTypes) hash ^= OrderTypes.GetHashCode();
      if (HasValidExchanges) hash ^= ValidExchanges.GetHashCode();
      if (HasPriceMagnifier) hash ^= PriceMagnifier.GetHashCode();
      if (HasUnderConId) hash ^= UnderConId.GetHashCode();
      if (HasLongName) hash ^= LongName.GetHashCode();
      if (HasContractMonth) hash ^= ContractMonth.GetHashCode();
      if (HasIndustry) hash ^= Industry.GetHashCode();
      if (HasCategory) hash ^= Category.GetHashCode();
      if (HasSubcategory) hash ^= Subcategory.GetHashCode();
      if (HasTimeZoneId) hash ^= TimeZoneId.GetHashCode();
      if (HasTradingHours) hash ^= TradingHours.GetHashCode();
      if (HasLiquidHours) hash ^= LiquidHours.GetHashCode();
      if (HasEvRule) hash ^= EvRule.GetHashCode();
      if (HasEvMultiplier) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EvMultiplier);
      hash ^= SecIdList.GetHashCode();
      if (HasAggGroup) hash ^= AggGroup.GetHashCode();
      if (HasUnderSymbol) hash ^= UnderSymbol.GetHashCode();
      if (HasUnderSecType) hash ^= UnderSecType.GetHashCode();
      if (HasMarketRuleIds) hash ^= MarketRuleIds.GetHashCode();
      if (HasRealExpirationDate) hash ^= RealExpirationDate.GetHashCode();
      if (HasStockType) hash ^= StockType.GetHashCode();
      if (HasMinSize) hash ^= MinSize.GetHashCode();
      if (HasSizeIncrement) hash ^= SizeIncrement.GetHashCode();
      if (HasSuggestedSizeIncrement) hash ^= SuggestedSizeIncrement.GetHashCode();
      if (HasFundName) hash ^= FundName.GetHashCode();
      if (HasFundFamily) hash ^= FundFamily.GetHashCode();
      if (HasFundType) hash ^= FundType.GetHashCode();
      if (HasFundFrontLoad) hash ^= FundFrontLoad.GetHashCode();
      if (HasFundBackLoad) hash ^= FundBackLoad.GetHashCode();
      if (HasFundBackLoadTimeInterval) hash ^= FundBackLoadTimeInterval.GetHashCode();
      if (HasFundManagementFee) hash ^= FundManagementFee.GetHashCode();
      if (HasFundClosed) hash ^= FundClosed.GetHashCode();
      if (HasFundClosedForNewInvestors) hash ^= FundClosedForNewInvestors.GetHashCode();
      if (HasFundClosedForNewMoney) hash ^= FundClosedForNewMoney.GetHashCode();
      if (HasFundNotifyAmount) hash ^= FundNotifyAmount.GetHashCode();
      if (HasFundMinimumInitialPurchase) hash ^= FundMinimumInitialPurchase.GetHashCode();
      if (HasFundMinimumSubsequentPurchase) hash ^= FundMinimumSubsequentPurchase.GetHashCode();
      if (HasFundBlueSkyStates) hash ^= FundBlueSkyStates.GetHashCode();
      if (HasFundBlueSkyTerritories) hash ^= FundBlueSkyTerritories.GetHashCode();
      if (HasFundDistributionPolicyIndicator) hash ^= FundDistributionPolicyIndicator.GetHashCode();
      if (HasFundAssetType) hash ^= FundAssetType.GetHashCode();
      if (HasCusip) hash ^= Cusip.GetHashCode();
      if (HasIssueDate) hash ^= IssueDate.GetHashCode();
      if (HasRatings) hash ^= Ratings.GetHashCode();
      if (HasBondType) hash ^= BondType.GetHashCode();
      if (HasCoupon) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Coupon);
      if (HasCouponType) hash ^= CouponType.GetHashCode();
      if (HasConvertible) hash ^= Convertible.GetHashCode();
      if (HasCallable) hash ^= Callable.GetHashCode();
      if (HasPuttable) hash ^= Puttable.GetHashCode();
      if (HasDescAppend) hash ^= DescAppend.GetHashCode();
      if (HasNextOptionDate) hash ^= NextOptionDate.GetHashCode();
      if (HasNextOptionType) hash ^= NextOptionType.GetHashCode();
      if (HasNextOptionPartial) hash ^= NextOptionPartial.GetHashCode();
      if (HasBondNotes) hash ^= BondNotes.GetHashCode();
      hash ^= ineligibilityReasonList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMarketName) {
        output.WriteRawTag(10);
        output.WriteString(MarketName);
      }
      if (HasMinTick) {
        output.WriteRawTag(18);
        output.WriteString(MinTick);
      }
      if (HasOrderTypes) {
        output.WriteRawTag(26);
        output.WriteString(OrderTypes);
      }
      if (HasValidExchanges) {
        output.WriteRawTag(34);
        output.WriteString(ValidExchanges);
      }
      if (HasPriceMagnifier) {
        output.WriteRawTag(40);
        output.WriteInt32(PriceMagnifier);
      }
      if (HasUnderConId) {
        output.WriteRawTag(48);
        output.WriteInt32(UnderConId);
      }
      if (HasLongName) {
        output.WriteRawTag(58);
        output.WriteString(LongName);
      }
      if (HasContractMonth) {
        output.WriteRawTag(66);
        output.WriteString(ContractMonth);
      }
      if (HasIndustry) {
        output.WriteRawTag(74);
        output.WriteString(Industry);
      }
      if (HasCategory) {
        output.WriteRawTag(82);
        output.WriteString(Category);
      }
      if (HasSubcategory) {
        output.WriteRawTag(90);
        output.WriteString(Subcategory);
      }
      if (HasTimeZoneId) {
        output.WriteRawTag(98);
        output.WriteString(TimeZoneId);
      }
      if (HasTradingHours) {
        output.WriteRawTag(106);
        output.WriteString(TradingHours);
      }
      if (HasLiquidHours) {
        output.WriteRawTag(114);
        output.WriteString(LiquidHours);
      }
      if (HasEvRule) {
        output.WriteRawTag(122);
        output.WriteString(EvRule);
      }
      if (HasEvMultiplier) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(EvMultiplier);
      }
      secIdList_.WriteTo(output, _map_secIdList_codec);
      if (HasAggGroup) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(AggGroup);
      }
      if (HasUnderSymbol) {
        output.WriteRawTag(154, 1);
        output.WriteString(UnderSymbol);
      }
      if (HasUnderSecType) {
        output.WriteRawTag(162, 1);
        output.WriteString(UnderSecType);
      }
      if (HasMarketRuleIds) {
        output.WriteRawTag(170, 1);
        output.WriteString(MarketRuleIds);
      }
      if (HasRealExpirationDate) {
        output.WriteRawTag(178, 1);
        output.WriteString(RealExpirationDate);
      }
      if (HasStockType) {
        output.WriteRawTag(186, 1);
        output.WriteString(StockType);
      }
      if (HasMinSize) {
        output.WriteRawTag(194, 1);
        output.WriteString(MinSize);
      }
      if (HasSizeIncrement) {
        output.WriteRawTag(202, 1);
        output.WriteString(SizeIncrement);
      }
      if (HasSuggestedSizeIncrement) {
        output.WriteRawTag(210, 1);
        output.WriteString(SuggestedSizeIncrement);
      }
      if (HasFundName) {
        output.WriteRawTag(218, 1);
        output.WriteString(FundName);
      }
      if (HasFundFamily) {
        output.WriteRawTag(226, 1);
        output.WriteString(FundFamily);
      }
      if (HasFundType) {
        output.WriteRawTag(234, 1);
        output.WriteString(FundType);
      }
      if (HasFundFrontLoad) {
        output.WriteRawTag(242, 1);
        output.WriteString(FundFrontLoad);
      }
      if (HasFundBackLoad) {
        output.WriteRawTag(250, 1);
        output.WriteString(FundBackLoad);
      }
      if (HasFundBackLoadTimeInterval) {
        output.WriteRawTag(130, 2);
        output.WriteString(FundBackLoadTimeInterval);
      }
      if (HasFundManagementFee) {
        output.WriteRawTag(138, 2);
        output.WriteString(FundManagementFee);
      }
      if (HasFundClosed) {
        output.WriteRawTag(144, 2);
        output.WriteBool(FundClosed);
      }
      if (HasFundClosedForNewInvestors) {
        output.WriteRawTag(152, 2);
        output.WriteBool(FundClosedForNewInvestors);
      }
      if (HasFundClosedForNewMoney) {
        output.WriteRawTag(160, 2);
        output.WriteBool(FundClosedForNewMoney);
      }
      if (HasFundNotifyAmount) {
        output.WriteRawTag(170, 2);
        output.WriteString(FundNotifyAmount);
      }
      if (HasFundMinimumInitialPurchase) {
        output.WriteRawTag(178, 2);
        output.WriteString(FundMinimumInitialPurchase);
      }
      if (HasFundMinimumSubsequentPurchase) {
        output.WriteRawTag(186, 2);
        output.WriteString(FundMinimumSubsequentPurchase);
      }
      if (HasFundBlueSkyStates) {
        output.WriteRawTag(194, 2);
        output.WriteString(FundBlueSkyStates);
      }
      if (HasFundBlueSkyTerritories) {
        output.WriteRawTag(202, 2);
        output.WriteString(FundBlueSkyTerritories);
      }
      if (HasFundDistributionPolicyIndicator) {
        output.WriteRawTag(210, 2);
        output.WriteString(FundDistributionPolicyIndicator);
      }
      if (HasFundAssetType) {
        output.WriteRawTag(218, 2);
        output.WriteString(FundAssetType);
      }
      if (HasCusip) {
        output.WriteRawTag(226, 2);
        output.WriteString(Cusip);
      }
      if (HasIssueDate) {
        output.WriteRawTag(234, 2);
        output.WriteString(IssueDate);
      }
      if (HasRatings) {
        output.WriteRawTag(242, 2);
        output.WriteString(Ratings);
      }
      if (HasBondType) {
        output.WriteRawTag(250, 2);
        output.WriteString(BondType);
      }
      if (HasCoupon) {
        output.WriteRawTag(129, 3);
        output.WriteDouble(Coupon);
      }
      if (HasCouponType) {
        output.WriteRawTag(138, 3);
        output.WriteString(CouponType);
      }
      if (HasConvertible) {
        output.WriteRawTag(144, 3);
        output.WriteBool(Convertible);
      }
      if (HasCallable) {
        output.WriteRawTag(152, 3);
        output.WriteBool(Callable);
      }
      if (HasPuttable) {
        output.WriteRawTag(160, 3);
        output.WriteBool(Puttable);
      }
      if (HasDescAppend) {
        output.WriteRawTag(170, 3);
        output.WriteString(DescAppend);
      }
      if (HasNextOptionDate) {
        output.WriteRawTag(178, 3);
        output.WriteString(NextOptionDate);
      }
      if (HasNextOptionType) {
        output.WriteRawTag(186, 3);
        output.WriteString(NextOptionType);
      }
      if (HasNextOptionPartial) {
        output.WriteRawTag(192, 3);
        output.WriteBool(NextOptionPartial);
      }
      if (HasBondNotes) {
        output.WriteRawTag(202, 3);
        output.WriteString(BondNotes);
      }
      ineligibilityReasonList_.WriteTo(output, _repeated_ineligibilityReasonList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMarketName) {
        output.WriteRawTag(10);
        output.WriteString(MarketName);
      }
      if (HasMinTick) {
        output.WriteRawTag(18);
        output.WriteString(MinTick);
      }
      if (HasOrderTypes) {
        output.WriteRawTag(26);
        output.WriteString(OrderTypes);
      }
      if (HasValidExchanges) {
        output.WriteRawTag(34);
        output.WriteString(ValidExchanges);
      }
      if (HasPriceMagnifier) {
        output.WriteRawTag(40);
        output.WriteInt32(PriceMagnifier);
      }
      if (HasUnderConId) {
        output.WriteRawTag(48);
        output.WriteInt32(UnderConId);
      }
      if (HasLongName) {
        output.WriteRawTag(58);
        output.WriteString(LongName);
      }
      if (HasContractMonth) {
        output.WriteRawTag(66);
        output.WriteString(ContractMonth);
      }
      if (HasIndustry) {
        output.WriteRawTag(74);
        output.WriteString(Industry);
      }
      if (HasCategory) {
        output.WriteRawTag(82);
        output.WriteString(Category);
      }
      if (HasSubcategory) {
        output.WriteRawTag(90);
        output.WriteString(Subcategory);
      }
      if (HasTimeZoneId) {
        output.WriteRawTag(98);
        output.WriteString(TimeZoneId);
      }
      if (HasTradingHours) {
        output.WriteRawTag(106);
        output.WriteString(TradingHours);
      }
      if (HasLiquidHours) {
        output.WriteRawTag(114);
        output.WriteString(LiquidHours);
      }
      if (HasEvRule) {
        output.WriteRawTag(122);
        output.WriteString(EvRule);
      }
      if (HasEvMultiplier) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(EvMultiplier);
      }
      secIdList_.WriteTo(ref output, _map_secIdList_codec);
      if (HasAggGroup) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(AggGroup);
      }
      if (HasUnderSymbol) {
        output.WriteRawTag(154, 1);
        output.WriteString(UnderSymbol);
      }
      if (HasUnderSecType) {
        output.WriteRawTag(162, 1);
        output.WriteString(UnderSecType);
      }
      if (HasMarketRuleIds) {
        output.WriteRawTag(170, 1);
        output.WriteString(MarketRuleIds);
      }
      if (HasRealExpirationDate) {
        output.WriteRawTag(178, 1);
        output.WriteString(RealExpirationDate);
      }
      if (HasStockType) {
        output.WriteRawTag(186, 1);
        output.WriteString(StockType);
      }
      if (HasMinSize) {
        output.WriteRawTag(194, 1);
        output.WriteString(MinSize);
      }
      if (HasSizeIncrement) {
        output.WriteRawTag(202, 1);
        output.WriteString(SizeIncrement);
      }
      if (HasSuggestedSizeIncrement) {
        output.WriteRawTag(210, 1);
        output.WriteString(SuggestedSizeIncrement);
      }
      if (HasFundName) {
        output.WriteRawTag(218, 1);
        output.WriteString(FundName);
      }
      if (HasFundFamily) {
        output.WriteRawTag(226, 1);
        output.WriteString(FundFamily);
      }
      if (HasFundType) {
        output.WriteRawTag(234, 1);
        output.WriteString(FundType);
      }
      if (HasFundFrontLoad) {
        output.WriteRawTag(242, 1);
        output.WriteString(FundFrontLoad);
      }
      if (HasFundBackLoad) {
        output.WriteRawTag(250, 1);
        output.WriteString(FundBackLoad);
      }
      if (HasFundBackLoadTimeInterval) {
        output.WriteRawTag(130, 2);
        output.WriteString(FundBackLoadTimeInterval);
      }
      if (HasFundManagementFee) {
        output.WriteRawTag(138, 2);
        output.WriteString(FundManagementFee);
      }
      if (HasFundClosed) {
        output.WriteRawTag(144, 2);
        output.WriteBool(FundClosed);
      }
      if (HasFundClosedForNewInvestors) {
        output.WriteRawTag(152, 2);
        output.WriteBool(FundClosedForNewInvestors);
      }
      if (HasFundClosedForNewMoney) {
        output.WriteRawTag(160, 2);
        output.WriteBool(FundClosedForNewMoney);
      }
      if (HasFundNotifyAmount) {
        output.WriteRawTag(170, 2);
        output.WriteString(FundNotifyAmount);
      }
      if (HasFundMinimumInitialPurchase) {
        output.WriteRawTag(178, 2);
        output.WriteString(FundMinimumInitialPurchase);
      }
      if (HasFundMinimumSubsequentPurchase) {
        output.WriteRawTag(186, 2);
        output.WriteString(FundMinimumSubsequentPurchase);
      }
      if (HasFundBlueSkyStates) {
        output.WriteRawTag(194, 2);
        output.WriteString(FundBlueSkyStates);
      }
      if (HasFundBlueSkyTerritories) {
        output.WriteRawTag(202, 2);
        output.WriteString(FundBlueSkyTerritories);
      }
      if (HasFundDistributionPolicyIndicator) {
        output.WriteRawTag(210, 2);
        output.WriteString(FundDistributionPolicyIndicator);
      }
      if (HasFundAssetType) {
        output.WriteRawTag(218, 2);
        output.WriteString(FundAssetType);
      }
      if (HasCusip) {
        output.WriteRawTag(226, 2);
        output.WriteString(Cusip);
      }
      if (HasIssueDate) {
        output.WriteRawTag(234, 2);
        output.WriteString(IssueDate);
      }
      if (HasRatings) {
        output.WriteRawTag(242, 2);
        output.WriteString(Ratings);
      }
      if (HasBondType) {
        output.WriteRawTag(250, 2);
        output.WriteString(BondType);
      }
      if (HasCoupon) {
        output.WriteRawTag(129, 3);
        output.WriteDouble(Coupon);
      }
      if (HasCouponType) {
        output.WriteRawTag(138, 3);
        output.WriteString(CouponType);
      }
      if (HasConvertible) {
        output.WriteRawTag(144, 3);
        output.WriteBool(Convertible);
      }
      if (HasCallable) {
        output.WriteRawTag(152, 3);
        output.WriteBool(Callable);
      }
      if (HasPuttable) {
        output.WriteRawTag(160, 3);
        output.WriteBool(Puttable);
      }
      if (HasDescAppend) {
        output.WriteRawTag(170, 3);
        output.WriteString(DescAppend);
      }
      if (HasNextOptionDate) {
        output.WriteRawTag(178, 3);
        output.WriteString(NextOptionDate);
      }
      if (HasNextOptionType) {
        output.WriteRawTag(186, 3);
        output.WriteString(NextOptionType);
      }
      if (HasNextOptionPartial) {
        output.WriteRawTag(192, 3);
        output.WriteBool(NextOptionPartial);
      }
      if (HasBondNotes) {
        output.WriteRawTag(202, 3);
        output.WriteString(BondNotes);
      }
      ineligibilityReasonList_.WriteTo(ref output, _repeated_ineligibilityReasonList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMarketName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MarketName);
      }
      if (HasMinTick) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MinTick);
      }
      if (HasOrderTypes) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderTypes);
      }
      if (HasValidExchanges) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValidExchanges);
      }
      if (HasPriceMagnifier) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PriceMagnifier);
      }
      if (HasUnderConId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnderConId);
      }
      if (HasLongName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LongName);
      }
      if (HasContractMonth) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContractMonth);
      }
      if (HasIndustry) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Industry);
      }
      if (HasCategory) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Category);
      }
      if (HasSubcategory) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subcategory);
      }
      if (HasTimeZoneId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeZoneId);
      }
      if (HasTradingHours) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradingHours);
      }
      if (HasLiquidHours) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LiquidHours);
      }
      if (HasEvRule) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EvRule);
      }
      if (HasEvMultiplier) {
        size += 2 + 8;
      }
      size += secIdList_.CalculateSize(_map_secIdList_codec);
      if (HasAggGroup) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AggGroup);
      }
      if (HasUnderSymbol) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UnderSymbol);
      }
      if (HasUnderSecType) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UnderSecType);
      }
      if (HasMarketRuleIds) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MarketRuleIds);
      }
      if (HasRealExpirationDate) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RealExpirationDate);
      }
      if (HasStockType) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StockType);
      }
      if (HasMinSize) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MinSize);
      }
      if (HasSizeIncrement) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SizeIncrement);
      }
      if (HasSuggestedSizeIncrement) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SuggestedSizeIncrement);
      }
      if (HasFundName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FundName);
      }
      if (HasFundFamily) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FundFamily);
      }
      if (HasFundType) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FundType);
      }
      if (HasFundFrontLoad) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FundFrontLoad);
      }
      if (HasFundBackLoad) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FundBackLoad);
      }
      if (HasFundBackLoadTimeInterval) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FundBackLoadTimeInterval);
      }
      if (HasFundManagementFee) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FundManagementFee);
      }
      if (HasFundClosed) {
        size += 2 + 1;
      }
      if (HasFundClosedForNewInvestors) {
        size += 2 + 1;
      }
      if (HasFundClosedForNewMoney) {
        size += 2 + 1;
      }
      if (HasFundNotifyAmount) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FundNotifyAmount);
      }
      if (HasFundMinimumInitialPurchase) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FundMinimumInitialPurchase);
      }
      if (HasFundMinimumSubsequentPurchase) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FundMinimumSubsequentPurchase);
      }
      if (HasFundBlueSkyStates) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FundBlueSkyStates);
      }
      if (HasFundBlueSkyTerritories) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FundBlueSkyTerritories);
      }
      if (HasFundDistributionPolicyIndicator) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FundDistributionPolicyIndicator);
      }
      if (HasFundAssetType) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FundAssetType);
      }
      if (HasCusip) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Cusip);
      }
      if (HasIssueDate) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IssueDate);
      }
      if (HasRatings) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ratings);
      }
      if (HasBondType) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BondType);
      }
      if (HasCoupon) {
        size += 2 + 8;
      }
      if (HasCouponType) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CouponType);
      }
      if (HasConvertible) {
        size += 2 + 1;
      }
      if (HasCallable) {
        size += 2 + 1;
      }
      if (HasPuttable) {
        size += 2 + 1;
      }
      if (HasDescAppend) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DescAppend);
      }
      if (HasNextOptionDate) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NextOptionDate);
      }
      if (HasNextOptionType) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NextOptionType);
      }
      if (HasNextOptionPartial) {
        size += 2 + 1;
      }
      if (HasBondNotes) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BondNotes);
      }
      size += ineligibilityReasonList_.CalculateSize(_repeated_ineligibilityReasonList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ContractDetails other) {
      if (other == null) {
        return;
      }
      if (other.HasMarketName) {
        MarketName = other.MarketName;
      }
      if (other.HasMinTick) {
        MinTick = other.MinTick;
      }
      if (other.HasOrderTypes) {
        OrderTypes = other.OrderTypes;
      }
      if (other.HasValidExchanges) {
        ValidExchanges = other.ValidExchanges;
      }
      if (other.HasPriceMagnifier) {
        PriceMagnifier = other.PriceMagnifier;
      }
      if (other.HasUnderConId) {
        UnderConId = other.UnderConId;
      }
      if (other.HasLongName) {
        LongName = other.LongName;
      }
      if (other.HasContractMonth) {
        ContractMonth = other.ContractMonth;
      }
      if (other.HasIndustry) {
        Industry = other.Industry;
      }
      if (other.HasCategory) {
        Category = other.Category;
      }
      if (other.HasSubcategory) {
        Subcategory = other.Subcategory;
      }
      if (other.HasTimeZoneId) {
        TimeZoneId = other.TimeZoneId;
      }
      if (other.HasTradingHours) {
        TradingHours = other.TradingHours;
      }
      if (other.HasLiquidHours) {
        LiquidHours = other.LiquidHours;
      }
      if (other.HasEvRule) {
        EvRule = other.EvRule;
      }
      if (other.HasEvMultiplier) {
        EvMultiplier = other.EvMultiplier;
      }
      secIdList_.MergeFrom(other.secIdList_);
      if (other.HasAggGroup) {
        AggGroup = other.AggGroup;
      }
      if (other.HasUnderSymbol) {
        UnderSymbol = other.UnderSymbol;
      }
      if (other.HasUnderSecType) {
        UnderSecType = other.UnderSecType;
      }
      if (other.HasMarketRuleIds) {
        MarketRuleIds = other.MarketRuleIds;
      }
      if (other.HasRealExpirationDate) {
        RealExpirationDate = other.RealExpirationDate;
      }
      if (other.HasStockType) {
        StockType = other.StockType;
      }
      if (other.HasMinSize) {
        MinSize = other.MinSize;
      }
      if (other.HasSizeIncrement) {
        SizeIncrement = other.SizeIncrement;
      }
      if (other.HasSuggestedSizeIncrement) {
        SuggestedSizeIncrement = other.SuggestedSizeIncrement;
      }
      if (other.HasFundName) {
        FundName = other.FundName;
      }
      if (other.HasFundFamily) {
        FundFamily = other.FundFamily;
      }
      if (other.HasFundType) {
        FundType = other.FundType;
      }
      if (other.HasFundFrontLoad) {
        FundFrontLoad = other.FundFrontLoad;
      }
      if (other.HasFundBackLoad) {
        FundBackLoad = other.FundBackLoad;
      }
      if (other.HasFundBackLoadTimeInterval) {
        FundBackLoadTimeInterval = other.FundBackLoadTimeInterval;
      }
      if (other.HasFundManagementFee) {
        FundManagementFee = other.FundManagementFee;
      }
      if (other.HasFundClosed) {
        FundClosed = other.FundClosed;
      }
      if (other.HasFundClosedForNewInvestors) {
        FundClosedForNewInvestors = other.FundClosedForNewInvestors;
      }
      if (other.HasFundClosedForNewMoney) {
        FundClosedForNewMoney = other.FundClosedForNewMoney;
      }
      if (other.HasFundNotifyAmount) {
        FundNotifyAmount = other.FundNotifyAmount;
      }
      if (other.HasFundMinimumInitialPurchase) {
        FundMinimumInitialPurchase = other.FundMinimumInitialPurchase;
      }
      if (other.HasFundMinimumSubsequentPurchase) {
        FundMinimumSubsequentPurchase = other.FundMinimumSubsequentPurchase;
      }
      if (other.HasFundBlueSkyStates) {
        FundBlueSkyStates = other.FundBlueSkyStates;
      }
      if (other.HasFundBlueSkyTerritories) {
        FundBlueSkyTerritories = other.FundBlueSkyTerritories;
      }
      if (other.HasFundDistributionPolicyIndicator) {
        FundDistributionPolicyIndicator = other.FundDistributionPolicyIndicator;
      }
      if (other.HasFundAssetType) {
        FundAssetType = other.FundAssetType;
      }
      if (other.HasCusip) {
        Cusip = other.Cusip;
      }
      if (other.HasIssueDate) {
        IssueDate = other.IssueDate;
      }
      if (other.HasRatings) {
        Ratings = other.Ratings;
      }
      if (other.HasBondType) {
        BondType = other.BondType;
      }
      if (other.HasCoupon) {
        Coupon = other.Coupon;
      }
      if (other.HasCouponType) {
        CouponType = other.CouponType;
      }
      if (other.HasConvertible) {
        Convertible = other.Convertible;
      }
      if (other.HasCallable) {
        Callable = other.Callable;
      }
      if (other.HasPuttable) {
        Puttable = other.Puttable;
      }
      if (other.HasDescAppend) {
        DescAppend = other.DescAppend;
      }
      if (other.HasNextOptionDate) {
        NextOptionDate = other.NextOptionDate;
      }
      if (other.HasNextOptionType) {
        NextOptionType = other.NextOptionType;
      }
      if (other.HasNextOptionPartial) {
        NextOptionPartial = other.NextOptionPartial;
      }
      if (other.HasBondNotes) {
        BondNotes = other.BondNotes;
      }
      ineligibilityReasonList_.Add(other.ineligibilityReasonList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MarketName = input.ReadString();
            break;
          }
          case 18: {
            MinTick = input.ReadString();
            break;
          }
          case 26: {
            OrderTypes = input.ReadString();
            break;
          }
          case 34: {
            ValidExchanges = input.ReadString();
            break;
          }
          case 40: {
            PriceMagnifier = input.ReadInt32();
            break;
          }
          case 48: {
            UnderConId = input.ReadInt32();
            break;
          }
          case 58: {
            LongName = input.ReadString();
            break;
          }
          case 66: {
            ContractMonth = input.ReadString();
            break;
          }
          case 74: {
            Industry = input.ReadString();
            break;
          }
          case 82: {
            Category = input.ReadString();
            break;
          }
          case 90: {
            Subcategory = input.ReadString();
            break;
          }
          case 98: {
            TimeZoneId = input.ReadString();
            break;
          }
          case 106: {
            TradingHours = input.ReadString();
            break;
          }
          case 114: {
            LiquidHours = input.ReadString();
            break;
          }
          case 122: {
            EvRule = input.ReadString();
            break;
          }
          case 129: {
            EvMultiplier = input.ReadDouble();
            break;
          }
          case 138: {
            secIdList_.AddEntriesFrom(input, _map_secIdList_codec);
            break;
          }
          case 144: {
            AggGroup = input.ReadInt32();
            break;
          }
          case 154: {
            UnderSymbol = input.ReadString();
            break;
          }
          case 162: {
            UnderSecType = input.ReadString();
            break;
          }
          case 170: {
            MarketRuleIds = input.ReadString();
            break;
          }
          case 178: {
            RealExpirationDate = input.ReadString();
            break;
          }
          case 186: {
            StockType = input.ReadString();
            break;
          }
          case 194: {
            MinSize = input.ReadString();
            break;
          }
          case 202: {
            SizeIncrement = input.ReadString();
            break;
          }
          case 210: {
            SuggestedSizeIncrement = input.ReadString();
            break;
          }
          case 218: {
            FundName = input.ReadString();
            break;
          }
          case 226: {
            FundFamily = input.ReadString();
            break;
          }
          case 234: {
            FundType = input.ReadString();
            break;
          }
          case 242: {
            FundFrontLoad = input.ReadString();
            break;
          }
          case 250: {
            FundBackLoad = input.ReadString();
            break;
          }
          case 258: {
            FundBackLoadTimeInterval = input.ReadString();
            break;
          }
          case 266: {
            FundManagementFee = input.ReadString();
            break;
          }
          case 272: {
            FundClosed = input.ReadBool();
            break;
          }
          case 280: {
            FundClosedForNewInvestors = input.ReadBool();
            break;
          }
          case 288: {
            FundClosedForNewMoney = input.ReadBool();
            break;
          }
          case 298: {
            FundNotifyAmount = input.ReadString();
            break;
          }
          case 306: {
            FundMinimumInitialPurchase = input.ReadString();
            break;
          }
          case 314: {
            FundMinimumSubsequentPurchase = input.ReadString();
            break;
          }
          case 322: {
            FundBlueSkyStates = input.ReadString();
            break;
          }
          case 330: {
            FundBlueSkyTerritories = input.ReadString();
            break;
          }
          case 338: {
            FundDistributionPolicyIndicator = input.ReadString();
            break;
          }
          case 346: {
            FundAssetType = input.ReadString();
            break;
          }
          case 354: {
            Cusip = input.ReadString();
            break;
          }
          case 362: {
            IssueDate = input.ReadString();
            break;
          }
          case 370: {
            Ratings = input.ReadString();
            break;
          }
          case 378: {
            BondType = input.ReadString();
            break;
          }
          case 385: {
            Coupon = input.ReadDouble();
            break;
          }
          case 394: {
            CouponType = input.ReadString();
            break;
          }
          case 400: {
            Convertible = input.ReadBool();
            break;
          }
          case 408: {
            Callable = input.ReadBool();
            break;
          }
          case 416: {
            Puttable = input.ReadBool();
            break;
          }
          case 426: {
            DescAppend = input.ReadString();
            break;
          }
          case 434: {
            NextOptionDate = input.ReadString();
            break;
          }
          case 442: {
            NextOptionType = input.ReadString();
            break;
          }
          case 448: {
            NextOptionPartial = input.ReadBool();
            break;
          }
          case 458: {
            BondNotes = input.ReadString();
            break;
          }
          case 466: {
            ineligibilityReasonList_.AddEntriesFrom(input, _repeated_ineligibilityReasonList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MarketName = input.ReadString();
            break;
          }
          case 18: {
            MinTick = input.ReadString();
            break;
          }
          case 26: {
            OrderTypes = input.ReadString();
            break;
          }
          case 34: {
            ValidExchanges = input.ReadString();
            break;
          }
          case 40: {
            PriceMagnifier = input.ReadInt32();
            break;
          }
          case 48: {
            UnderConId = input.ReadInt32();
            break;
          }
          case 58: {
            LongName = input.ReadString();
            break;
          }
          case 66: {
            ContractMonth = input.ReadString();
            break;
          }
          case 74: {
            Industry = input.ReadString();
            break;
          }
          case 82: {
            Category = input.ReadString();
            break;
          }
          case 90: {
            Subcategory = input.ReadString();
            break;
          }
          case 98: {
            TimeZoneId = input.ReadString();
            break;
          }
          case 106: {
            TradingHours = input.ReadString();
            break;
          }
          case 114: {
            LiquidHours = input.ReadString();
            break;
          }
          case 122: {
            EvRule = input.ReadString();
            break;
          }
          case 129: {
            EvMultiplier = input.ReadDouble();
            break;
          }
          case 138: {
            secIdList_.AddEntriesFrom(ref input, _map_secIdList_codec);
            break;
          }
          case 144: {
            AggGroup = input.ReadInt32();
            break;
          }
          case 154: {
            UnderSymbol = input.ReadString();
            break;
          }
          case 162: {
            UnderSecType = input.ReadString();
            break;
          }
          case 170: {
            MarketRuleIds = input.ReadString();
            break;
          }
          case 178: {
            RealExpirationDate = input.ReadString();
            break;
          }
          case 186: {
            StockType = input.ReadString();
            break;
          }
          case 194: {
            MinSize = input.ReadString();
            break;
          }
          case 202: {
            SizeIncrement = input.ReadString();
            break;
          }
          case 210: {
            SuggestedSizeIncrement = input.ReadString();
            break;
          }
          case 218: {
            FundName = input.ReadString();
            break;
          }
          case 226: {
            FundFamily = input.ReadString();
            break;
          }
          case 234: {
            FundType = input.ReadString();
            break;
          }
          case 242: {
            FundFrontLoad = input.ReadString();
            break;
          }
          case 250: {
            FundBackLoad = input.ReadString();
            break;
          }
          case 258: {
            FundBackLoadTimeInterval = input.ReadString();
            break;
          }
          case 266: {
            FundManagementFee = input.ReadString();
            break;
          }
          case 272: {
            FundClosed = input.ReadBool();
            break;
          }
          case 280: {
            FundClosedForNewInvestors = input.ReadBool();
            break;
          }
          case 288: {
            FundClosedForNewMoney = input.ReadBool();
            break;
          }
          case 298: {
            FundNotifyAmount = input.ReadString();
            break;
          }
          case 306: {
            FundMinimumInitialPurchase = input.ReadString();
            break;
          }
          case 314: {
            FundMinimumSubsequentPurchase = input.ReadString();
            break;
          }
          case 322: {
            FundBlueSkyStates = input.ReadString();
            break;
          }
          case 330: {
            FundBlueSkyTerritories = input.ReadString();
            break;
          }
          case 338: {
            FundDistributionPolicyIndicator = input.ReadString();
            break;
          }
          case 346: {
            FundAssetType = input.ReadString();
            break;
          }
          case 354: {
            Cusip = input.ReadString();
            break;
          }
          case 362: {
            IssueDate = input.ReadString();
            break;
          }
          case 370: {
            Ratings = input.ReadString();
            break;
          }
          case 378: {
            BondType = input.ReadString();
            break;
          }
          case 385: {
            Coupon = input.ReadDouble();
            break;
          }
          case 394: {
            CouponType = input.ReadString();
            break;
          }
          case 400: {
            Convertible = input.ReadBool();
            break;
          }
          case 408: {
            Callable = input.ReadBool();
            break;
          }
          case 416: {
            Puttable = input.ReadBool();
            break;
          }
          case 426: {
            DescAppend = input.ReadString();
            break;
          }
          case 434: {
            NextOptionDate = input.ReadString();
            break;
          }
          case 442: {
            NextOptionType = input.ReadString();
            break;
          }
          case 448: {
            NextOptionPartial = input.ReadBool();
            break;
          }
          case 458: {
            BondNotes = input.ReadString();
            break;
          }
          case 466: {
            ineligibilityReasonList_.AddEntriesFrom(ref input, _repeated_ineligibilityReasonList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
