// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IBApi.protobuf {

  /// <summary>Holder for reflection information generated from Contract.proto</summary>
  public static partial class ContractReflection {

    #region Descriptor
    /// <summary>File descriptor for Contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5Db250cmFjdC5wcm90bxIIcHJvdG9idWYaDkNvbWJvTGVnLnByb3RvGhpE",
            "ZWx0YU5ldXRyYWxDb250cmFjdC5wcm90byKLBwoIQ29udHJhY3QSEgoFY29u",
            "SWQYASABKAVIAIgBARITCgZzeW1ib2wYAiABKAlIAYgBARIUCgdzZWNUeXBl",
            "GAMgASgJSAKIAQESKQocbGFzdFRyYWRlRGF0ZU9yQ29udHJhY3RNb250aBgE",
            "IAEoCUgDiAEBEhMKBnN0cmlrZRgFIAEoAUgEiAEBEhIKBXJpZ2h0GAYgASgJ",
            "SAWIAQESFwoKbXVsdGlwbGllchgHIAEoAUgGiAEBEhUKCGV4Y2hhbmdlGAgg",
            "ASgJSAeIAQESGAoLcHJpbWFyeUV4Y2gYCSABKAlICIgBARIVCghjdXJyZW5j",
            "eRgKIAEoCUgJiAEBEhgKC2xvY2FsU3ltYm9sGAsgASgJSAqIAQESGQoMdHJh",
            "ZGluZ0NsYXNzGAwgASgJSAuIAQESFgoJc2VjSWRUeXBlGA0gASgJSAyIAQES",
            "EgoFc2VjSWQYDiABKAlIDYgBARIYCgtkZXNjcmlwdGlvbhgPIAEoCUgOiAEB",
            "EhUKCGlzc3VlcklkGBAgASgJSA+IAQESQQoUZGVsdGFOZXV0cmFsQ29udHJh",
            "Y3QYESABKAsyHi5wcm90b2J1Zi5EZWx0YU5ldXRyYWxDb250cmFjdEgQiAEB",
            "EhsKDmluY2x1ZGVFeHBpcmVkGBIgASgISBGIAQESHQoQY29tYm9MZWdzRGVz",
            "Y3JpcBgTIAEoCUgSiAEBEiUKCWNvbWJvTGVncxgUIAMoCzISLnByb3RvYnVm",
            "LkNvbWJvTGVnEhoKDWxhc3RUcmFkZURhdGUYFSABKAlIE4gBAUIICgZfY29u",
            "SWRCCQoHX3N5bWJvbEIKCghfc2VjVHlwZUIfCh1fbGFzdFRyYWRlRGF0ZU9y",
            "Q29udHJhY3RNb250aEIJCgdfc3RyaWtlQggKBl9yaWdodEINCgtfbXVsdGlw",
            "bGllckILCglfZXhjaGFuZ2VCDgoMX3ByaW1hcnlFeGNoQgsKCV9jdXJyZW5j",
            "eUIOCgxfbG9jYWxTeW1ib2xCDwoNX3RyYWRpbmdDbGFzc0IMCgpfc2VjSWRU",
            "eXBlQggKBl9zZWNJZEIOCgxfZGVzY3JpcHRpb25CCwoJX2lzc3VlcklkQhcK",
            "FV9kZWx0YU5ldXRyYWxDb250cmFjdEIRCg9faW5jbHVkZUV4cGlyZWRCEwoR",
            "X2NvbWJvTGVnc0Rlc2NyaXBCEAoOX2xhc3RUcmFkZURhdGVCOAoWY29tLmli",
            "LmNsaWVudC5wcm90b2J1ZkINQ29udHJhY3RQcm90b6oCDklCQXBpLnByb3Rv",
            "YnVmYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::IBApi.protobuf.ComboLegReflection.Descriptor, global::IBApi.protobuf.DeltaNeutralContractReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IBApi.protobuf.Contract), global::IBApi.protobuf.Contract.Parser, new[]{ "ConId", "Symbol", "SecType", "LastTradeDateOrContractMonth", "Strike", "Right", "Multiplier", "Exchange", "PrimaryExch", "Currency", "LocalSymbol", "TradingClass", "SecIdType", "SecId", "Description", "IssuerId", "DeltaNeutralContract", "IncludeExpired", "ComboLegsDescrip", "ComboLegs", "LastTradeDate" }, new[]{ "ConId", "Symbol", "SecType", "LastTradeDateOrContractMonth", "Strike", "Right", "Multiplier", "Exchange", "PrimaryExch", "Currency", "LocalSymbol", "TradingClass", "SecIdType", "SecId", "Description", "IssuerId", "DeltaNeutralContract", "IncludeExpired", "ComboLegsDescrip", "LastTradeDate" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Contract : pb::IMessage<Contract>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Contract> _parser = new pb::MessageParser<Contract>(() => new Contract());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Contract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IBApi.protobuf.ContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Contract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Contract(Contract other) : this() {
      _hasBits0 = other._hasBits0;
      conId_ = other.conId_;
      symbol_ = other.symbol_;
      secType_ = other.secType_;
      lastTradeDateOrContractMonth_ = other.lastTradeDateOrContractMonth_;
      strike_ = other.strike_;
      right_ = other.right_;
      multiplier_ = other.multiplier_;
      exchange_ = other.exchange_;
      primaryExch_ = other.primaryExch_;
      currency_ = other.currency_;
      localSymbol_ = other.localSymbol_;
      tradingClass_ = other.tradingClass_;
      secIdType_ = other.secIdType_;
      secId_ = other.secId_;
      description_ = other.description_;
      issuerId_ = other.issuerId_;
      deltaNeutralContract_ = other.deltaNeutralContract_ != null ? other.deltaNeutralContract_.Clone() : null;
      includeExpired_ = other.includeExpired_;
      comboLegsDescrip_ = other.comboLegsDescrip_;
      comboLegs_ = other.comboLegs_.Clone();
      lastTradeDate_ = other.lastTradeDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Contract Clone() {
      return new Contract(this);
    }

    /// <summary>Field number for the "conId" field.</summary>
    public const int ConIdFieldNumber = 1;
    private readonly static int ConIdDefaultValue = 0;

    private int conId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ConId {
      get { if ((_hasBits0 & 1) != 0) { return conId_; } else { return ConIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        conId_ = value;
      }
    }
    /// <summary>Gets whether the "conId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "conId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private readonly static string SymbolDefaultValue = "";

    private string symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Symbol {
      get { return symbol_ ?? SymbolDefaultValue; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "symbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSymbol {
      get { return symbol_ != null; }
    }
    /// <summary>Clears the value of the "symbol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSymbol() {
      symbol_ = null;
    }

    /// <summary>Field number for the "secType" field.</summary>
    public const int SecTypeFieldNumber = 3;
    private readonly static string SecTypeDefaultValue = "";

    private string secType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecType {
      get { return secType_ ?? SecTypeDefaultValue; }
      set {
        secType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "secType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSecType {
      get { return secType_ != null; }
    }
    /// <summary>Clears the value of the "secType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSecType() {
      secType_ = null;
    }

    /// <summary>Field number for the "lastTradeDateOrContractMonth" field.</summary>
    public const int LastTradeDateOrContractMonthFieldNumber = 4;
    private readonly static string LastTradeDateOrContractMonthDefaultValue = "";

    private string lastTradeDateOrContractMonth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LastTradeDateOrContractMonth {
      get { return lastTradeDateOrContractMonth_ ?? LastTradeDateOrContractMonthDefaultValue; }
      set {
        lastTradeDateOrContractMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "lastTradeDateOrContractMonth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastTradeDateOrContractMonth {
      get { return lastTradeDateOrContractMonth_ != null; }
    }
    /// <summary>Clears the value of the "lastTradeDateOrContractMonth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastTradeDateOrContractMonth() {
      lastTradeDateOrContractMonth_ = null;
    }

    /// <summary>Field number for the "strike" field.</summary>
    public const int StrikeFieldNumber = 5;
    private readonly static double StrikeDefaultValue = 0D;

    private double strike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Strike {
      get { if ((_hasBits0 & 2) != 0) { return strike_; } else { return StrikeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        strike_ = value;
      }
    }
    /// <summary>Gets whether the "strike" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStrike {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "strike" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStrike() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 6;
    private readonly static string RightDefaultValue = "";

    private string right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Right {
      get { return right_ ?? RightDefaultValue; }
      set {
        right_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "right" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRight {
      get { return right_ != null; }
    }
    /// <summary>Clears the value of the "right" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRight() {
      right_ = null;
    }

    /// <summary>Field number for the "multiplier" field.</summary>
    public const int MultiplierFieldNumber = 7;
    private readonly static double MultiplierDefaultValue = 0D;

    private double multiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Multiplier {
      get { if ((_hasBits0 & 4) != 0) { return multiplier_; } else { return MultiplierDefaultValue; } }
      set {
        _hasBits0 |= 4;
        multiplier_ = value;
      }
    }
    /// <summary>Gets whether the "multiplier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMultiplier {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "multiplier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMultiplier() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 8;
    private readonly static string ExchangeDefaultValue = "";

    private string exchange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_ ?? ExchangeDefaultValue; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "exchange" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExchange {
      get { return exchange_ != null; }
    }
    /// <summary>Clears the value of the "exchange" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExchange() {
      exchange_ = null;
    }

    /// <summary>Field number for the "primaryExch" field.</summary>
    public const int PrimaryExchFieldNumber = 9;
    private readonly static string PrimaryExchDefaultValue = "";

    private string primaryExch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PrimaryExch {
      get { return primaryExch_ ?? PrimaryExchDefaultValue; }
      set {
        primaryExch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "primaryExch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPrimaryExch {
      get { return primaryExch_ != null; }
    }
    /// <summary>Clears the value of the "primaryExch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPrimaryExch() {
      primaryExch_ = null;
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 10;
    private readonly static string CurrencyDefaultValue = "";

    private string currency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_ ?? CurrencyDefaultValue; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "currency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrency {
      get { return currency_ != null; }
    }
    /// <summary>Clears the value of the "currency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrency() {
      currency_ = null;
    }

    /// <summary>Field number for the "localSymbol" field.</summary>
    public const int LocalSymbolFieldNumber = 11;
    private readonly static string LocalSymbolDefaultValue = "";

    private string localSymbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LocalSymbol {
      get { return localSymbol_ ?? LocalSymbolDefaultValue; }
      set {
        localSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "localSymbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLocalSymbol {
      get { return localSymbol_ != null; }
    }
    /// <summary>Clears the value of the "localSymbol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLocalSymbol() {
      localSymbol_ = null;
    }

    /// <summary>Field number for the "tradingClass" field.</summary>
    public const int TradingClassFieldNumber = 12;
    private readonly static string TradingClassDefaultValue = "";

    private string tradingClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TradingClass {
      get { return tradingClass_ ?? TradingClassDefaultValue; }
      set {
        tradingClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tradingClass" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTradingClass {
      get { return tradingClass_ != null; }
    }
    /// <summary>Clears the value of the "tradingClass" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTradingClass() {
      tradingClass_ = null;
    }

    /// <summary>Field number for the "secIdType" field.</summary>
    public const int SecIdTypeFieldNumber = 13;
    private readonly static string SecIdTypeDefaultValue = "";

    private string secIdType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecIdType {
      get { return secIdType_ ?? SecIdTypeDefaultValue; }
      set {
        secIdType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "secIdType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSecIdType {
      get { return secIdType_ != null; }
    }
    /// <summary>Clears the value of the "secIdType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSecIdType() {
      secIdType_ = null;
    }

    /// <summary>Field number for the "secId" field.</summary>
    public const int SecIdFieldNumber = 14;
    private readonly static string SecIdDefaultValue = "";

    private string secId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecId {
      get { return secId_ ?? SecIdDefaultValue; }
      set {
        secId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "secId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSecId {
      get { return secId_ != null; }
    }
    /// <summary>Clears the value of the "secId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSecId() {
      secId_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 15;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "issuerId" field.</summary>
    public const int IssuerIdFieldNumber = 16;
    private readonly static string IssuerIdDefaultValue = "";

    private string issuerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IssuerId {
      get { return issuerId_ ?? IssuerIdDefaultValue; }
      set {
        issuerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "issuerId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIssuerId {
      get { return issuerId_ != null; }
    }
    /// <summary>Clears the value of the "issuerId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIssuerId() {
      issuerId_ = null;
    }

    /// <summary>Field number for the "deltaNeutralContract" field.</summary>
    public const int DeltaNeutralContractFieldNumber = 17;
    private global::IBApi.protobuf.DeltaNeutralContract deltaNeutralContract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::IBApi.protobuf.DeltaNeutralContract DeltaNeutralContract {
      get { return deltaNeutralContract_; }
      set {
        deltaNeutralContract_ = value;
      }
    }

    /// <summary>Field number for the "includeExpired" field.</summary>
    public const int IncludeExpiredFieldNumber = 18;
    private readonly static bool IncludeExpiredDefaultValue = false;

    private bool includeExpired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IncludeExpired {
      get { if ((_hasBits0 & 8) != 0) { return includeExpired_; } else { return IncludeExpiredDefaultValue; } }
      set {
        _hasBits0 |= 8;
        includeExpired_ = value;
      }
    }
    /// <summary>Gets whether the "includeExpired" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIncludeExpired {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "includeExpired" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIncludeExpired() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "comboLegsDescrip" field.</summary>
    public const int ComboLegsDescripFieldNumber = 19;
    private readonly static string ComboLegsDescripDefaultValue = "";

    private string comboLegsDescrip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ComboLegsDescrip {
      get { return comboLegsDescrip_ ?? ComboLegsDescripDefaultValue; }
      set {
        comboLegsDescrip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "comboLegsDescrip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasComboLegsDescrip {
      get { return comboLegsDescrip_ != null; }
    }
    /// <summary>Clears the value of the "comboLegsDescrip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearComboLegsDescrip() {
      comboLegsDescrip_ = null;
    }

    /// <summary>Field number for the "comboLegs" field.</summary>
    public const int ComboLegsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::IBApi.protobuf.ComboLeg> _repeated_comboLegs_codec
        = pb::FieldCodec.ForMessage(162, global::IBApi.protobuf.ComboLeg.Parser);
    private readonly pbc::RepeatedField<global::IBApi.protobuf.ComboLeg> comboLegs_ = new pbc::RepeatedField<global::IBApi.protobuf.ComboLeg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::IBApi.protobuf.ComboLeg> ComboLegs {
      get { return comboLegs_; }
    }

    /// <summary>Field number for the "lastTradeDate" field.</summary>
    public const int LastTradeDateFieldNumber = 21;
    private readonly static string LastTradeDateDefaultValue = "";

    private string lastTradeDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LastTradeDate {
      get { return lastTradeDate_ ?? LastTradeDateDefaultValue; }
      set {
        lastTradeDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "lastTradeDate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastTradeDate {
      get { return lastTradeDate_ != null; }
    }
    /// <summary>Clears the value of the "lastTradeDate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastTradeDate() {
      lastTradeDate_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Contract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Contract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConId != other.ConId) return false;
      if (Symbol != other.Symbol) return false;
      if (SecType != other.SecType) return false;
      if (LastTradeDateOrContractMonth != other.LastTradeDateOrContractMonth) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Strike, other.Strike)) return false;
      if (Right != other.Right) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Multiplier, other.Multiplier)) return false;
      if (Exchange != other.Exchange) return false;
      if (PrimaryExch != other.PrimaryExch) return false;
      if (Currency != other.Currency) return false;
      if (LocalSymbol != other.LocalSymbol) return false;
      if (TradingClass != other.TradingClass) return false;
      if (SecIdType != other.SecIdType) return false;
      if (SecId != other.SecId) return false;
      if (Description != other.Description) return false;
      if (IssuerId != other.IssuerId) return false;
      if (!object.Equals(DeltaNeutralContract, other.DeltaNeutralContract)) return false;
      if (IncludeExpired != other.IncludeExpired) return false;
      if (ComboLegsDescrip != other.ComboLegsDescrip) return false;
      if(!comboLegs_.Equals(other.comboLegs_)) return false;
      if (LastTradeDate != other.LastTradeDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConId) hash ^= ConId.GetHashCode();
      if (HasSymbol) hash ^= Symbol.GetHashCode();
      if (HasSecType) hash ^= SecType.GetHashCode();
      if (HasLastTradeDateOrContractMonth) hash ^= LastTradeDateOrContractMonth.GetHashCode();
      if (HasStrike) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Strike);
      if (HasRight) hash ^= Right.GetHashCode();
      if (HasMultiplier) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Multiplier);
      if (HasExchange) hash ^= Exchange.GetHashCode();
      if (HasPrimaryExch) hash ^= PrimaryExch.GetHashCode();
      if (HasCurrency) hash ^= Currency.GetHashCode();
      if (HasLocalSymbol) hash ^= LocalSymbol.GetHashCode();
      if (HasTradingClass) hash ^= TradingClass.GetHashCode();
      if (HasSecIdType) hash ^= SecIdType.GetHashCode();
      if (HasSecId) hash ^= SecId.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasIssuerId) hash ^= IssuerId.GetHashCode();
      if (deltaNeutralContract_ != null) hash ^= DeltaNeutralContract.GetHashCode();
      if (HasIncludeExpired) hash ^= IncludeExpired.GetHashCode();
      if (HasComboLegsDescrip) hash ^= ComboLegsDescrip.GetHashCode();
      hash ^= comboLegs_.GetHashCode();
      if (HasLastTradeDate) hash ^= LastTradeDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConId) {
        output.WriteRawTag(8);
        output.WriteInt32(ConId);
      }
      if (HasSymbol) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (HasSecType) {
        output.WriteRawTag(26);
        output.WriteString(SecType);
      }
      if (HasLastTradeDateOrContractMonth) {
        output.WriteRawTag(34);
        output.WriteString(LastTradeDateOrContractMonth);
      }
      if (HasStrike) {
        output.WriteRawTag(41);
        output.WriteDouble(Strike);
      }
      if (HasRight) {
        output.WriteRawTag(50);
        output.WriteString(Right);
      }
      if (HasMultiplier) {
        output.WriteRawTag(57);
        output.WriteDouble(Multiplier);
      }
      if (HasExchange) {
        output.WriteRawTag(66);
        output.WriteString(Exchange);
      }
      if (HasPrimaryExch) {
        output.WriteRawTag(74);
        output.WriteString(PrimaryExch);
      }
      if (HasCurrency) {
        output.WriteRawTag(82);
        output.WriteString(Currency);
      }
      if (HasLocalSymbol) {
        output.WriteRawTag(90);
        output.WriteString(LocalSymbol);
      }
      if (HasTradingClass) {
        output.WriteRawTag(98);
        output.WriteString(TradingClass);
      }
      if (HasSecIdType) {
        output.WriteRawTag(106);
        output.WriteString(SecIdType);
      }
      if (HasSecId) {
        output.WriteRawTag(114);
        output.WriteString(SecId);
      }
      if (HasDescription) {
        output.WriteRawTag(122);
        output.WriteString(Description);
      }
      if (HasIssuerId) {
        output.WriteRawTag(130, 1);
        output.WriteString(IssuerId);
      }
      if (deltaNeutralContract_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(DeltaNeutralContract);
      }
      if (HasIncludeExpired) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IncludeExpired);
      }
      if (HasComboLegsDescrip) {
        output.WriteRawTag(154, 1);
        output.WriteString(ComboLegsDescrip);
      }
      comboLegs_.WriteTo(output, _repeated_comboLegs_codec);
      if (HasLastTradeDate) {
        output.WriteRawTag(170, 1);
        output.WriteString(LastTradeDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConId) {
        output.WriteRawTag(8);
        output.WriteInt32(ConId);
      }
      if (HasSymbol) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (HasSecType) {
        output.WriteRawTag(26);
        output.WriteString(SecType);
      }
      if (HasLastTradeDateOrContractMonth) {
        output.WriteRawTag(34);
        output.WriteString(LastTradeDateOrContractMonth);
      }
      if (HasStrike) {
        output.WriteRawTag(41);
        output.WriteDouble(Strike);
      }
      if (HasRight) {
        output.WriteRawTag(50);
        output.WriteString(Right);
      }
      if (HasMultiplier) {
        output.WriteRawTag(57);
        output.WriteDouble(Multiplier);
      }
      if (HasExchange) {
        output.WriteRawTag(66);
        output.WriteString(Exchange);
      }
      if (HasPrimaryExch) {
        output.WriteRawTag(74);
        output.WriteString(PrimaryExch);
      }
      if (HasCurrency) {
        output.WriteRawTag(82);
        output.WriteString(Currency);
      }
      if (HasLocalSymbol) {
        output.WriteRawTag(90);
        output.WriteString(LocalSymbol);
      }
      if (HasTradingClass) {
        output.WriteRawTag(98);
        output.WriteString(TradingClass);
      }
      if (HasSecIdType) {
        output.WriteRawTag(106);
        output.WriteString(SecIdType);
      }
      if (HasSecId) {
        output.WriteRawTag(114);
        output.WriteString(SecId);
      }
      if (HasDescription) {
        output.WriteRawTag(122);
        output.WriteString(Description);
      }
      if (HasIssuerId) {
        output.WriteRawTag(130, 1);
        output.WriteString(IssuerId);
      }
      if (deltaNeutralContract_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(DeltaNeutralContract);
      }
      if (HasIncludeExpired) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IncludeExpired);
      }
      if (HasComboLegsDescrip) {
        output.WriteRawTag(154, 1);
        output.WriteString(ComboLegsDescrip);
      }
      comboLegs_.WriteTo(ref output, _repeated_comboLegs_codec);
      if (HasLastTradeDate) {
        output.WriteRawTag(170, 1);
        output.WriteString(LastTradeDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConId);
      }
      if (HasSymbol) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (HasSecType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecType);
      }
      if (HasLastTradeDateOrContractMonth) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastTradeDateOrContractMonth);
      }
      if (HasStrike) {
        size += 1 + 8;
      }
      if (HasRight) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Right);
      }
      if (HasMultiplier) {
        size += 1 + 8;
      }
      if (HasExchange) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (HasPrimaryExch) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrimaryExch);
      }
      if (HasCurrency) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (HasLocalSymbol) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalSymbol);
      }
      if (HasTradingClass) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradingClass);
      }
      if (HasSecIdType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecIdType);
      }
      if (HasSecId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecId);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasIssuerId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IssuerId);
      }
      if (deltaNeutralContract_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeltaNeutralContract);
      }
      if (HasIncludeExpired) {
        size += 2 + 1;
      }
      if (HasComboLegsDescrip) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ComboLegsDescrip);
      }
      size += comboLegs_.CalculateSize(_repeated_comboLegs_codec);
      if (HasLastTradeDate) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastTradeDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Contract other) {
      if (other == null) {
        return;
      }
      if (other.HasConId) {
        ConId = other.ConId;
      }
      if (other.HasSymbol) {
        Symbol = other.Symbol;
      }
      if (other.HasSecType) {
        SecType = other.SecType;
      }
      if (other.HasLastTradeDateOrContractMonth) {
        LastTradeDateOrContractMonth = other.LastTradeDateOrContractMonth;
      }
      if (other.HasStrike) {
        Strike = other.Strike;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasMultiplier) {
        Multiplier = other.Multiplier;
      }
      if (other.HasExchange) {
        Exchange = other.Exchange;
      }
      if (other.HasPrimaryExch) {
        PrimaryExch = other.PrimaryExch;
      }
      if (other.HasCurrency) {
        Currency = other.Currency;
      }
      if (other.HasLocalSymbol) {
        LocalSymbol = other.LocalSymbol;
      }
      if (other.HasTradingClass) {
        TradingClass = other.TradingClass;
      }
      if (other.HasSecIdType) {
        SecIdType = other.SecIdType;
      }
      if (other.HasSecId) {
        SecId = other.SecId;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasIssuerId) {
        IssuerId = other.IssuerId;
      }
      if (other.deltaNeutralContract_ != null) {
        if (deltaNeutralContract_ == null) {
          DeltaNeutralContract = new global::IBApi.protobuf.DeltaNeutralContract();
        }
        DeltaNeutralContract.MergeFrom(other.DeltaNeutralContract);
      }
      if (other.HasIncludeExpired) {
        IncludeExpired = other.IncludeExpired;
      }
      if (other.HasComboLegsDescrip) {
        ComboLegsDescrip = other.ComboLegsDescrip;
      }
      comboLegs_.Add(other.comboLegs_);
      if (other.HasLastTradeDate) {
        LastTradeDate = other.LastTradeDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConId = input.ReadInt32();
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 26: {
            SecType = input.ReadString();
            break;
          }
          case 34: {
            LastTradeDateOrContractMonth = input.ReadString();
            break;
          }
          case 41: {
            Strike = input.ReadDouble();
            break;
          }
          case 50: {
            Right = input.ReadString();
            break;
          }
          case 57: {
            Multiplier = input.ReadDouble();
            break;
          }
          case 66: {
            Exchange = input.ReadString();
            break;
          }
          case 74: {
            PrimaryExch = input.ReadString();
            break;
          }
          case 82: {
            Currency = input.ReadString();
            break;
          }
          case 90: {
            LocalSymbol = input.ReadString();
            break;
          }
          case 98: {
            TradingClass = input.ReadString();
            break;
          }
          case 106: {
            SecIdType = input.ReadString();
            break;
          }
          case 114: {
            SecId = input.ReadString();
            break;
          }
          case 122: {
            Description = input.ReadString();
            break;
          }
          case 130: {
            IssuerId = input.ReadString();
            break;
          }
          case 138: {
            if (deltaNeutralContract_ == null) {
              DeltaNeutralContract = new global::IBApi.protobuf.DeltaNeutralContract();
            }
            input.ReadMessage(DeltaNeutralContract);
            break;
          }
          case 144: {
            IncludeExpired = input.ReadBool();
            break;
          }
          case 154: {
            ComboLegsDescrip = input.ReadString();
            break;
          }
          case 162: {
            comboLegs_.AddEntriesFrom(input, _repeated_comboLegs_codec);
            break;
          }
          case 170: {
            LastTradeDate = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ConId = input.ReadInt32();
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 26: {
            SecType = input.ReadString();
            break;
          }
          case 34: {
            LastTradeDateOrContractMonth = input.ReadString();
            break;
          }
          case 41: {
            Strike = input.ReadDouble();
            break;
          }
          case 50: {
            Right = input.ReadString();
            break;
          }
          case 57: {
            Multiplier = input.ReadDouble();
            break;
          }
          case 66: {
            Exchange = input.ReadString();
            break;
          }
          case 74: {
            PrimaryExch = input.ReadString();
            break;
          }
          case 82: {
            Currency = input.ReadString();
            break;
          }
          case 90: {
            LocalSymbol = input.ReadString();
            break;
          }
          case 98: {
            TradingClass = input.ReadString();
            break;
          }
          case 106: {
            SecIdType = input.ReadString();
            break;
          }
          case 114: {
            SecId = input.ReadString();
            break;
          }
          case 122: {
            Description = input.ReadString();
            break;
          }
          case 130: {
            IssuerId = input.ReadString();
            break;
          }
          case 138: {
            if (deltaNeutralContract_ == null) {
              DeltaNeutralContract = new global::IBApi.protobuf.DeltaNeutralContract();
            }
            input.ReadMessage(DeltaNeutralContract);
            break;
          }
          case 144: {
            IncludeExpired = input.ReadBool();
            break;
          }
          case 154: {
            ComboLegsDescrip = input.ReadString();
            break;
          }
          case 162: {
            comboLegs_.AddEntriesFrom(ref input, _repeated_comboLegs_codec);
            break;
          }
          case 170: {
            LastTradeDate = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
