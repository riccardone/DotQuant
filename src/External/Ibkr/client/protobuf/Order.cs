// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Order.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IBApi.protobuf {

  /// <summary>Holder for reflection information generated from Order.proto</summary>
  public static partial class OrderReflection {

    #region Descriptor
    /// <summary>File descriptor for Order.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OrderReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtPcmRlci5wcm90bxIIcHJvdG9idWYaFE9yZGVyQ29uZGl0aW9uLnByb3Rv",
            "GhRTb2Z0RG9sbGFyVGllci5wcm90byK/NgoFT3JkZXISFQoIY2xpZW50SWQY",
            "ASABKAVIAIgBARIUCgdvcmRlcklkGAIgASgFSAGIAQESEwoGcGVybUlkGAMg",
            "ASgDSAKIAQESFQoIcGFyZW50SWQYBCABKAVIA4gBARITCgZhY3Rpb24YBSAB",
            "KAlIBIgBARIaCg10b3RhbFF1YW50aXR5GAYgASgJSAWIAQESGAoLZGlzcGxh",
            "eVNpemUYByABKAVIBogBARIWCglvcmRlclR5cGUYCCABKAlIB4gBARIVCghs",
            "bXRQcmljZRgJIAEoAUgIiAEBEhUKCGF1eFByaWNlGAogASgBSAmIAQESEAoD",
            "dGlmGAsgASgJSAqIAQESFAoHYWNjb3VudBgMIAEoCUgLiAEBEhkKDHNldHRs",
            "aW5nRmlybRgNIAEoCUgMiAEBEhwKD2NsZWFyaW5nQWNjb3VudBgOIAEoCUgN",
            "iAEBEhsKDmNsZWFyaW5nSW50ZW50GA8gASgJSA6IAQESFgoJYWxsT3JOb25l",
            "GBAgASgISA+IAQESFwoKYmxvY2tPcmRlchgRIAEoCEgQiAEBEhMKBmhpZGRl",
            "bhgSIAEoCEgRiAEBEhcKCm91dHNpZGVSdGgYEyABKAhIEogBARIYCgtzd2Vl",
            "cFRvRmlsbBgUIAEoCEgTiAEBEhoKDXBlcmNlbnRPZmZzZXQYFSABKAFIFIgB",
            "ARIcCg90cmFpbGluZ1BlcmNlbnQYFiABKAFIFYgBARIbCg50cmFpbFN0b3BQ",
            "cmljZRgXIAEoAUgWiAEBEhMKBm1pblF0eRgYIAEoBUgXiAEBEhoKDWdvb2RB",
            "ZnRlclRpbWUYGSABKAlIGIgBARIZCgxnb29kVGlsbERhdGUYGiABKAlIGYgB",
            "ARIVCghvY2FHcm91cBgbIAEoCUgaiAEBEhUKCG9yZGVyUmVmGBwgASgJSBuI",
            "AQESFAoHcnVsZTgwQRgdIAEoCUgciAEBEhQKB29jYVR5cGUYHiABKAVIHYgB",
            "ARIaCg10cmlnZ2VyTWV0aG9kGB8gASgFSB6IAQESHAoPYWN0aXZlU3RhcnRU",
            "aW1lGCAgASgJSB+IAQESGwoOYWN0aXZlU3RvcFRpbWUYISABKAlIIIgBARIU",
            "CgdmYUdyb3VwGCIgASgJSCGIAQESFQoIZmFNZXRob2QYIyABKAlIIogBARIZ",
            "CgxmYVBlcmNlbnRhZ2UYJCABKAlII4gBARIXCgp2b2xhdGlsaXR5GCUgASgB",
            "SCSIAQESGwoOdm9sYXRpbGl0eVR5cGUYJiABKAVIJYgBARIdChBjb250aW51",
            "b3VzVXBkYXRlGCcgASgISCaIAQESHwoScmVmZXJlbmNlUHJpY2VUeXBlGCgg",
            "ASgFSCeIAQESIgoVZGVsdGFOZXV0cmFsT3JkZXJUeXBlGCkgASgJSCiIAQES",
            "IQoUZGVsdGFOZXV0cmFsQXV4UHJpY2UYKiABKAFIKYgBARIeChFkZWx0YU5l",
            "dXRyYWxDb25JZBgrIAEoBUgqiAEBEiIKFWRlbHRhTmV1dHJhbE9wZW5DbG9z",
            "ZRgsIAEoCUgriAEBEiIKFWRlbHRhTmV1dHJhbFNob3J0U2FsZRgtIAEoCEgs",
            "iAEBEiYKGWRlbHRhTmV1dHJhbFNob3J0U2FsZVNsb3QYLiABKAVILYgBARIr",
            "Ch5kZWx0YU5ldXRyYWxEZXNpZ25hdGVkTG9jYXRpb24YLyABKAlILogBARIf",
            "ChJzY2FsZUluaXRMZXZlbFNpemUYMCABKAVIL4gBARIfChJzY2FsZVN1YnNM",
            "ZXZlbFNpemUYMSABKAVIMIgBARIgChNzY2FsZVByaWNlSW5jcmVtZW50GDIg",
            "ASgBSDGIAQESIgoVc2NhbGVQcmljZUFkanVzdFZhbHVlGDMgASgBSDKIAQES",
            "JQoYc2NhbGVQcmljZUFkanVzdEludGVydmFsGDQgASgFSDOIAQESHgoRc2Nh",
            "bGVQcm9maXRPZmZzZXQYNSABKAFINIgBARIbCg5zY2FsZUF1dG9SZXNldBg2",
            "IAEoCEg1iAEBEh4KEXNjYWxlSW5pdFBvc2l0aW9uGDcgASgFSDaIAQESHQoQ",
            "c2NhbGVJbml0RmlsbFF0eRg4IAEoBUg3iAEBEh8KEnNjYWxlUmFuZG9tUGVy",
            "Y2VudBg5IAEoCEg4iAEBEhcKCnNjYWxlVGFibGUYOiABKAlIOYgBARIWCglo",
            "ZWRnZVR5cGUYOyABKAlIOogBARIXCgpoZWRnZVBhcmFtGDwgASgJSDuIAQES",
            "GQoMYWxnb1N0cmF0ZWd5GD0gASgJSDyIAQESMwoKYWxnb1BhcmFtcxg+IAMo",
            "CzIfLnByb3RvYnVmLk9yZGVyLkFsZ29QYXJhbXNFbnRyeRITCgZhbGdvSWQY",
            "PyABKAlIPYgBARJNChdzbWFydENvbWJvUm91dGluZ1BhcmFtcxhAIAMoCzIs",
            "LnByb3RvYnVmLk9yZGVyLlNtYXJ0Q29tYm9Sb3V0aW5nUGFyYW1zRW50cnkS",
            "EwoGd2hhdElmGEEgASgISD6IAQESFQoIdHJhbnNtaXQYQiABKAhIP4gBARIq",
            "Ch1vdmVycmlkZVBlcmNlbnRhZ2VDb25zdHJhaW50cxhDIAEoCEhAiAEBEhYK",
            "CW9wZW5DbG9zZRhEIAEoCUhBiAEBEhMKBm9yaWdpbhhFIAEoBUhCiAEBEhoK",
            "DXNob3J0U2FsZVNsb3QYRiABKAVIQ4gBARIfChJkZXNpZ25hdGVkTG9jYXRp",
            "b24YRyABKAlIRIgBARIXCgpleGVtcHRDb2RlGEggASgFSEWIAQESJQoYZGVs",
            "dGFOZXV0cmFsU2V0dGxpbmdGaXJtGEkgASgJSEaIAQESKAobZGVsdGFOZXV0",
            "cmFsQ2xlYXJpbmdBY2NvdW50GEogASgJSEeIAQESJwoaZGVsdGFOZXV0cmFs",
            "Q2xlYXJpbmdJbnRlbnQYSyABKAlISIgBARIdChBkaXNjcmV0aW9uYXJ5QW10",
            "GEwgASgBSEmIAQESHwoSb3B0T3V0U21hcnRSb3V0aW5nGE0gASgISEqIAQES",
            "GgoNc3RhcnRpbmdQcmljZRhOIAEoAUhLiAEBEhoKDXN0b2NrUmVmUHJpY2UY",
            "TyABKAFITIgBARISCgVkZWx0YRhQIAEoAUhNiAEBEhwKD3N0b2NrUmFuZ2VM",
            "b3dlchhRIAEoAUhOiAEBEhwKD3N0b2NrUmFuZ2VVcHBlchhSIAEoAUhPiAEB",
            "EhQKB25vdEhlbGQYUyABKAhIUIgBARI/ChBvcmRlck1pc2NPcHRpb25zGFQg",
            "AygLMiUucHJvdG9idWYuT3JkZXIuT3JkZXJNaXNjT3B0aW9uc0VudHJ5EhYK",
            "CXNvbGljaXRlZBhVIAEoCEhRiAEBEhoKDXJhbmRvbWl6ZVNpemUYViABKAhI",
            "UogBARIbCg5yYW5kb21pemVQcmljZRhXIAEoCEhTiAEBEiAKE3JlZmVyZW5j",
            "ZUNvbnRyYWN0SWQYWCABKAVIVIgBARIfChJwZWdnZWRDaGFuZ2VBbW91bnQY",
            "WSABKAFIVYgBARIpChxpc1BlZ2dlZENoYW5nZUFtb3VudERlY3JlYXNlGFog",
            "ASgISFaIAQESIgoVcmVmZXJlbmNlQ2hhbmdlQW1vdW50GFsgASgBSFeIAQES",
            "IAoTcmVmZXJlbmNlRXhjaGFuZ2VJZBhcIAEoCUhYiAEBEh4KEWFkanVzdGVk",
            "T3JkZXJUeXBlGF0gASgJSFmIAQESGQoMdHJpZ2dlclByaWNlGF4gASgBSFqI",
            "AQESHgoRYWRqdXN0ZWRTdG9wUHJpY2UYXyABKAFIW4gBARIjChZhZGp1c3Rl",
            "ZFN0b3BMaW1pdFByaWNlGGAgASgBSFyIAQESIwoWYWRqdXN0ZWRUcmFpbGlu",
            "Z0Ftb3VudBhhIAEoAUhdiAEBEiMKFmFkanVzdGFibGVUcmFpbGluZ1VuaXQY",
            "YiABKAVIXogBARIbCg5sbXRQcmljZU9mZnNldBhjIAEoAUhfiAEBEiwKCmNv",
            "bmRpdGlvbnMYZCADKAsyGC5wcm90b2J1Zi5PcmRlckNvbmRpdGlvbhIiChVj",
            "b25kaXRpb25zQ2FuY2VsT3JkZXIYZSABKAhIYIgBARIgChNjb25kaXRpb25z",
            "SWdub3JlUnRoGGYgASgISGGIAQESFgoJbW9kZWxDb2RlGGcgASgJSGKIAQES",
            "GAoLZXh0T3BlcmF0b3IYaCABKAlIY4gBARI1Cg5zb2Z0RG9sbGFyVGllchhp",
            "IAEoCzIYLnByb3RvYnVmLlNvZnREb2xsYXJUaWVySGSIAQESFAoHY2FzaFF0",
            "eRhqIAEoAUhliAEBEiAKE21pZmlkMkRlY2lzaW9uTWFrZXIYayABKAlIZogB",
            "ARIfChJtaWZpZDJEZWNpc2lvbkFsZ28YbCABKAlIZ4gBARIiChVtaWZpZDJF",
            "eGVjdXRpb25UcmFkZXIYbSABKAlIaIgBARIgChNtaWZpZDJFeGVjdXRpb25B",
            "bGdvGG4gASgJSGmIAQESJQoYZG9udFVzZUF1dG9QcmljZUZvckhlZGdlGG8g",
            "ASgISGqIAQESGwoOaXNPbXNDb250YWluZXIYcCABKAhIa4gBARIoChtkaXNj",
            "cmV0aW9uYXJ5VXBUb0xpbWl0UHJpY2UYcSABKAhIbIgBARIbCg5hdXRvQ2Fu",
            "Y2VsRGF0ZRhyIAEoCUhtiAEBEhsKDmZpbGxlZFF1YW50aXR5GHMgASgJSG6I",
            "AQESHAoPcmVmRnV0dXJlc0NvbklkGHQgASgFSG+IAQESHQoQYXV0b0NhbmNl",
            "bFBhcmVudBh1IAEoCEhwiAEBEhgKC3NoYXJlaG9sZGVyGHYgASgJSHGIAQES",
            "GgoNaW1iYWxhbmNlT25seRh3IAEoCEhyiAEBEiEKFHJvdXRlTWFya2V0YWJs",
            "ZVRvQmJvGHggASgISHOIAQESGQoMcGFyZW50UGVybUlkGHkgASgDSHSIAQES",
            "HQoQdXNlUHJpY2VNZ210QWxnbxh6IAEoBUh1iAEBEhUKCGR1cmF0aW9uGHsg",
            "ASgFSHaIAQESFgoJcG9zdFRvQXRzGHwgASgFSHeIAQESIgoVYWR2YW5jZWRF",
            "cnJvck92ZXJyaWRlGH0gASgJSHiIAQESHAoPbWFudWFsT3JkZXJUaW1lGH4g",
            "ASgJSHmIAQESGAoLbWluVHJhZGVRdHkYfyABKAVIeogBARIcCg5taW5Db21w",
            "ZXRlU2l6ZRiAASABKAVIe4gBARImChhjb21wZXRlQWdhaW5zdEJlc3RPZmZz",
            "ZXQYgQEgASgBSHyIAQESHgoQbWlkT2Zmc2V0QXRXaG9sZRiCASABKAFIfYgB",
            "ARIdCg9taWRPZmZzZXRBdEhhbGYYgwEgASgBSH6IAQESHQoPY3VzdG9tZXJB",
            "Y2NvdW50GIQBIAEoCUh/iAEBEiMKFHByb2Zlc3Npb25hbEN1c3RvbWVyGIUB",
            "IAEoCEiAAYgBARIiChNib25kQWNjcnVlZEludGVyZXN0GIYBIAEoCUiBAYgB",
            "ARIfChBpbmNsdWRlT3Zlcm5pZ2h0GIcBIAEoCEiCAYgBARIjChRtYW51YWxP",
            "cmRlckluZGljYXRvchiIASABKAVIgwGIAQESGAoJc3VibWl0dGVyGIkBIAEo",
            "CUiEAYgBARoxCg9BbGdvUGFyYW1zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZh",
            "bHVlGAIgASgJOgI4ARo+ChxTbWFydENvbWJvUm91dGluZ1BhcmFtc0VudHJ5",
            "EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaNwoVT3JkZXJNaXNj",
            "T3B0aW9uc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAFC",
            "CwoJX2NsaWVudElkQgoKCF9vcmRlcklkQgkKB19wZXJtSWRCCwoJX3BhcmVu",
            "dElkQgkKB19hY3Rpb25CEAoOX3RvdGFsUXVhbnRpdHlCDgoMX2Rpc3BsYXlT",
            "aXplQgwKCl9vcmRlclR5cGVCCwoJX2xtdFByaWNlQgsKCV9hdXhQcmljZUIG",
            "CgRfdGlmQgoKCF9hY2NvdW50Qg8KDV9zZXR0bGluZ0Zpcm1CEgoQX2NsZWFy",
            "aW5nQWNjb3VudEIRCg9fY2xlYXJpbmdJbnRlbnRCDAoKX2FsbE9yTm9uZUIN",
            "CgtfYmxvY2tPcmRlckIJCgdfaGlkZGVuQg0KC19vdXRzaWRlUnRoQg4KDF9z",
            "d2VlcFRvRmlsbEIQCg5fcGVyY2VudE9mZnNldEISChBfdHJhaWxpbmdQZXJj",
            "ZW50QhEKD190cmFpbFN0b3BQcmljZUIJCgdfbWluUXR5QhAKDl9nb29kQWZ0",
            "ZXJUaW1lQg8KDV9nb29kVGlsbERhdGVCCwoJX29jYUdyb3VwQgsKCV9vcmRl",
            "clJlZkIKCghfcnVsZTgwQUIKCghfb2NhVHlwZUIQCg5fdHJpZ2dlck1ldGhv",
            "ZEISChBfYWN0aXZlU3RhcnRUaW1lQhEKD19hY3RpdmVTdG9wVGltZUIKCghf",
            "ZmFHcm91cEILCglfZmFNZXRob2RCDwoNX2ZhUGVyY2VudGFnZUINCgtfdm9s",
            "YXRpbGl0eUIRCg9fdm9sYXRpbGl0eVR5cGVCEwoRX2NvbnRpbnVvdXNVcGRh",
            "dGVCFQoTX3JlZmVyZW5jZVByaWNlVHlwZUIYChZfZGVsdGFOZXV0cmFsT3Jk",
            "ZXJUeXBlQhcKFV9kZWx0YU5ldXRyYWxBdXhQcmljZUIUChJfZGVsdGFOZXV0",
            "cmFsQ29uSWRCGAoWX2RlbHRhTmV1dHJhbE9wZW5DbG9zZUIYChZfZGVsdGFO",
            "ZXV0cmFsU2hvcnRTYWxlQhwKGl9kZWx0YU5ldXRyYWxTaG9ydFNhbGVTbG90",
            "QiEKH19kZWx0YU5ldXRyYWxEZXNpZ25hdGVkTG9jYXRpb25CFQoTX3NjYWxl",
            "SW5pdExldmVsU2l6ZUIVChNfc2NhbGVTdWJzTGV2ZWxTaXplQhYKFF9zY2Fs",
            "ZVByaWNlSW5jcmVtZW50QhgKFl9zY2FsZVByaWNlQWRqdXN0VmFsdWVCGwoZ",
            "X3NjYWxlUHJpY2VBZGp1c3RJbnRlcnZhbEIUChJfc2NhbGVQcm9maXRPZmZz",
            "ZXRCEQoPX3NjYWxlQXV0b1Jlc2V0QhQKEl9zY2FsZUluaXRQb3NpdGlvbkIT",
            "ChFfc2NhbGVJbml0RmlsbFF0eUIVChNfc2NhbGVSYW5kb21QZXJjZW50Qg0K",
            "C19zY2FsZVRhYmxlQgwKCl9oZWRnZVR5cGVCDQoLX2hlZGdlUGFyYW1CDwoN",
            "X2FsZ29TdHJhdGVneUIJCgdfYWxnb0lkQgkKB193aGF0SWZCCwoJX3RyYW5z",
            "bWl0QiAKHl9vdmVycmlkZVBlcmNlbnRhZ2VDb25zdHJhaW50c0IMCgpfb3Bl",
            "bkNsb3NlQgkKB19vcmlnaW5CEAoOX3Nob3J0U2FsZVNsb3RCFQoTX2Rlc2ln",
            "bmF0ZWRMb2NhdGlvbkINCgtfZXhlbXB0Q29kZUIbChlfZGVsdGFOZXV0cmFs",
            "U2V0dGxpbmdGaXJtQh4KHF9kZWx0YU5ldXRyYWxDbGVhcmluZ0FjY291bnRC",
            "HQobX2RlbHRhTmV1dHJhbENsZWFyaW5nSW50ZW50QhMKEV9kaXNjcmV0aW9u",
            "YXJ5QW10QhUKE19vcHRPdXRTbWFydFJvdXRpbmdCEAoOX3N0YXJ0aW5nUHJp",
            "Y2VCEAoOX3N0b2NrUmVmUHJpY2VCCAoGX2RlbHRhQhIKEF9zdG9ja1Jhbmdl",
            "TG93ZXJCEgoQX3N0b2NrUmFuZ2VVcHBlckIKCghfbm90SGVsZEIMCgpfc29s",
            "aWNpdGVkQhAKDl9yYW5kb21pemVTaXplQhEKD19yYW5kb21pemVQcmljZUIW",
            "ChRfcmVmZXJlbmNlQ29udHJhY3RJZEIVChNfcGVnZ2VkQ2hhbmdlQW1vdW50",
            "Qh8KHV9pc1BlZ2dlZENoYW5nZUFtb3VudERlY3JlYXNlQhgKFl9yZWZlcmVu",
            "Y2VDaGFuZ2VBbW91bnRCFgoUX3JlZmVyZW5jZUV4Y2hhbmdlSWRCFAoSX2Fk",
            "anVzdGVkT3JkZXJUeXBlQg8KDV90cmlnZ2VyUHJpY2VCFAoSX2FkanVzdGVk",
            "U3RvcFByaWNlQhkKF19hZGp1c3RlZFN0b3BMaW1pdFByaWNlQhkKF19hZGp1",
            "c3RlZFRyYWlsaW5nQW1vdW50QhkKF19hZGp1c3RhYmxlVHJhaWxpbmdVbml0",
            "QhEKD19sbXRQcmljZU9mZnNldEIYChZfY29uZGl0aW9uc0NhbmNlbE9yZGVy",
            "QhYKFF9jb25kaXRpb25zSWdub3JlUnRoQgwKCl9tb2RlbENvZGVCDgoMX2V4",
            "dE9wZXJhdG9yQhEKD19zb2Z0RG9sbGFyVGllckIKCghfY2FzaFF0eUIWChRf",
            "bWlmaWQyRGVjaXNpb25NYWtlckIVChNfbWlmaWQyRGVjaXNpb25BbGdvQhgK",
            "Fl9taWZpZDJFeGVjdXRpb25UcmFkZXJCFgoUX21pZmlkMkV4ZWN1dGlvbkFs",
            "Z29CGwoZX2RvbnRVc2VBdXRvUHJpY2VGb3JIZWRnZUIRCg9faXNPbXNDb250",
            "YWluZXJCHgocX2Rpc2NyZXRpb25hcnlVcFRvTGltaXRQcmljZUIRCg9fYXV0",
            "b0NhbmNlbERhdGVCEQoPX2ZpbGxlZFF1YW50aXR5QhIKEF9yZWZGdXR1cmVz",
            "Q29uSWRCEwoRX2F1dG9DYW5jZWxQYXJlbnRCDgoMX3NoYXJlaG9sZGVyQhAK",
            "Dl9pbWJhbGFuY2VPbmx5QhcKFV9yb3V0ZU1hcmtldGFibGVUb0Jib0IPCg1f",
            "cGFyZW50UGVybUlkQhMKEV91c2VQcmljZU1nbXRBbGdvQgsKCV9kdXJhdGlv",
            "bkIMCgpfcG9zdFRvQXRzQhgKFl9hZHZhbmNlZEVycm9yT3ZlcnJpZGVCEgoQ",
            "X21hbnVhbE9yZGVyVGltZUIOCgxfbWluVHJhZGVRdHlCEQoPX21pbkNvbXBl",
            "dGVTaXplQhsKGV9jb21wZXRlQWdhaW5zdEJlc3RPZmZzZXRCEwoRX21pZE9m",
            "ZnNldEF0V2hvbGVCEgoQX21pZE9mZnNldEF0SGFsZkISChBfY3VzdG9tZXJB",
            "Y2NvdW50QhcKFV9wcm9mZXNzaW9uYWxDdXN0b21lckIWChRfYm9uZEFjY3J1",
            "ZWRJbnRlcmVzdEITChFfaW5jbHVkZU92ZXJuaWdodEIXChVfbWFudWFsT3Jk",
            "ZXJJbmRpY2F0b3JCDAoKX3N1Ym1pdHRlckI1ChZjb20uaWIuY2xpZW50LnBy",
            "b3RvYnVmQgpPcmRlclByb3RvqgIOSUJBcGkucHJvdG9idWZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::IBApi.protobuf.OrderConditionReflection.Descriptor, global::IBApi.protobuf.SoftDollarTierReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IBApi.protobuf.Order), global::IBApi.protobuf.Order.Parser, new[]{ "ClientId", "OrderId", "PermId", "ParentId", "Action", "TotalQuantity", "DisplaySize", "OrderType", "LmtPrice", "AuxPrice", "Tif", "Account", "SettlingFirm", "ClearingAccount", "ClearingIntent", "AllOrNone", "BlockOrder", "Hidden", "OutsideRth", "SweepToFill", "PercentOffset", "TrailingPercent", "TrailStopPrice", "MinQty", "GoodAfterTime", "GoodTillDate", "OcaGroup", "OrderRef", "Rule80A", "OcaType", "TriggerMethod", "ActiveStartTime", "ActiveStopTime", "FaGroup", "FaMethod", "FaPercentage", "Volatility", "VolatilityType", "ContinuousUpdate", "ReferencePriceType", "DeltaNeutralOrderType", "DeltaNeutralAuxPrice", "DeltaNeutralConId", "DeltaNeutralOpenClose", "DeltaNeutralShortSale", "DeltaNeutralShortSaleSlot", "DeltaNeutralDesignatedLocation", "ScaleInitLevelSize", "ScaleSubsLevelSize", "ScalePriceIncrement", "ScalePriceAdjustValue", "ScalePriceAdjustInterval", "ScaleProfitOffset", "ScaleAutoReset", "ScaleInitPosition", "ScaleInitFillQty", "ScaleRandomPercent", "ScaleTable", "HedgeType", "HedgeParam", "AlgoStrategy", "AlgoParams", "AlgoId", "SmartComboRoutingParams", "WhatIf", "Transmit", "OverridePercentageConstraints", "OpenClose", "Origin", "ShortSaleSlot", "DesignatedLocation", "ExemptCode", "DeltaNeutralSettlingFirm", "DeltaNeutralClearingAccount", "DeltaNeutralClearingIntent", "DiscretionaryAmt", "OptOutSmartRouting", "StartingPrice", "StockRefPrice", "Delta", "StockRangeLower", "StockRangeUpper", "NotHeld", "OrderMiscOptions", "Solicited", "RandomizeSize", "RandomizePrice", "ReferenceContractId", "PeggedChangeAmount", "IsPeggedChangeAmountDecrease", "ReferenceChangeAmount", "ReferenceExchangeId", "AdjustedOrderType", "TriggerPrice", "AdjustedStopPrice", "AdjustedStopLimitPrice", "AdjustedTrailingAmount", "AdjustableTrailingUnit", "LmtPriceOffset", "Conditions", "ConditionsCancelOrder", "ConditionsIgnoreRth", "ModelCode", "ExtOperator", "SoftDollarTier", "CashQty", "Mifid2DecisionMaker", "Mifid2DecisionAlgo", "Mifid2ExecutionTrader", "Mifid2ExecutionAlgo", "DontUseAutoPriceForHedge", "IsOmsContainer", "DiscretionaryUpToLimitPrice", "AutoCancelDate", "FilledQuantity", "RefFuturesConId", "AutoCancelParent", "Shareholder", "ImbalanceOnly", "RouteMarketableToBbo", "ParentPermId", "UsePriceMgmtAlgo", "Duration", "PostToAts", "AdvancedErrorOverride", "ManualOrderTime", "MinTradeQty", "MinCompeteSize", "CompeteAgainstBestOffset", "MidOffsetAtWhole", "MidOffsetAtHalf", "CustomerAccount", "ProfessionalCustomer", "BondAccruedInterest", "IncludeOvernight", "ManualOrderIndicator", "Submitter" }, new[]{ "ClientId", "OrderId", "PermId", "ParentId", "Action", "TotalQuantity", "DisplaySize", "OrderType", "LmtPrice", "AuxPrice", "Tif", "Account", "SettlingFirm", "ClearingAccount", "ClearingIntent", "AllOrNone", "BlockOrder", "Hidden", "OutsideRth", "SweepToFill", "PercentOffset", "TrailingPercent", "TrailStopPrice", "MinQty", "GoodAfterTime", "GoodTillDate", "OcaGroup", "OrderRef", "Rule80A", "OcaType", "TriggerMethod", "ActiveStartTime", "ActiveStopTime", "FaGroup", "FaMethod", "FaPercentage", "Volatility", "VolatilityType", "ContinuousUpdate", "ReferencePriceType", "DeltaNeutralOrderType", "DeltaNeutralAuxPrice", "DeltaNeutralConId", "DeltaNeutralOpenClose", "DeltaNeutralShortSale", "DeltaNeutralShortSaleSlot", "DeltaNeutralDesignatedLocation", "ScaleInitLevelSize", "ScaleSubsLevelSize", "ScalePriceIncrement", "ScalePriceAdjustValue", "ScalePriceAdjustInterval", "ScaleProfitOffset", "ScaleAutoReset", "ScaleInitPosition", "ScaleInitFillQty", "ScaleRandomPercent", "ScaleTable", "HedgeType", "HedgeParam", "AlgoStrategy", "AlgoId", "WhatIf", "Transmit", "OverridePercentageConstraints", "OpenClose", "Origin", "ShortSaleSlot", "DesignatedLocation", "ExemptCode", "DeltaNeutralSettlingFirm", "DeltaNeutralClearingAccount", "DeltaNeutralClearingIntent", "DiscretionaryAmt", "OptOutSmartRouting", "StartingPrice", "StockRefPrice", "Delta", "StockRangeLower", "StockRangeUpper", "NotHeld", "Solicited", "RandomizeSize", "RandomizePrice", "ReferenceContractId", "PeggedChangeAmount", "IsPeggedChangeAmountDecrease", "ReferenceChangeAmount", "ReferenceExchangeId", "AdjustedOrderType", "TriggerPrice", "AdjustedStopPrice", "AdjustedStopLimitPrice", "AdjustedTrailingAmount", "AdjustableTrailingUnit", "LmtPriceOffset", "ConditionsCancelOrder", "ConditionsIgnoreRth", "ModelCode", "ExtOperator", "SoftDollarTier", "CashQty", "Mifid2DecisionMaker", "Mifid2DecisionAlgo", "Mifid2ExecutionTrader", "Mifid2ExecutionAlgo", "DontUseAutoPriceForHedge", "IsOmsContainer", "DiscretionaryUpToLimitPrice", "AutoCancelDate", "FilledQuantity", "RefFuturesConId", "AutoCancelParent", "Shareholder", "ImbalanceOnly", "RouteMarketableToBbo", "ParentPermId", "UsePriceMgmtAlgo", "Duration", "PostToAts", "AdvancedErrorOverride", "ManualOrderTime", "MinTradeQty", "MinCompeteSize", "CompeteAgainstBestOffset", "MidOffsetAtWhole", "MidOffsetAtHalf", "CustomerAccount", "ProfessionalCustomer", "BondAccruedInterest", "IncludeOvernight", "ManualOrderIndicator", "Submitter" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Order : pb::IMessage<Order>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Order> _parser = new pb::MessageParser<Order>(() => new Order());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    private int _hasBits2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Order> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IBApi.protobuf.OrderReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Order() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Order(Order other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      _hasBits2 = other._hasBits2;
      clientId_ = other.clientId_;
      orderId_ = other.orderId_;
      permId_ = other.permId_;
      parentId_ = other.parentId_;
      action_ = other.action_;
      totalQuantity_ = other.totalQuantity_;
      displaySize_ = other.displaySize_;
      orderType_ = other.orderType_;
      lmtPrice_ = other.lmtPrice_;
      auxPrice_ = other.auxPrice_;
      tif_ = other.tif_;
      account_ = other.account_;
      settlingFirm_ = other.settlingFirm_;
      clearingAccount_ = other.clearingAccount_;
      clearingIntent_ = other.clearingIntent_;
      allOrNone_ = other.allOrNone_;
      blockOrder_ = other.blockOrder_;
      hidden_ = other.hidden_;
      outsideRth_ = other.outsideRth_;
      sweepToFill_ = other.sweepToFill_;
      percentOffset_ = other.percentOffset_;
      trailingPercent_ = other.trailingPercent_;
      trailStopPrice_ = other.trailStopPrice_;
      minQty_ = other.minQty_;
      goodAfterTime_ = other.goodAfterTime_;
      goodTillDate_ = other.goodTillDate_;
      ocaGroup_ = other.ocaGroup_;
      orderRef_ = other.orderRef_;
      rule80A_ = other.rule80A_;
      ocaType_ = other.ocaType_;
      triggerMethod_ = other.triggerMethod_;
      activeStartTime_ = other.activeStartTime_;
      activeStopTime_ = other.activeStopTime_;
      faGroup_ = other.faGroup_;
      faMethod_ = other.faMethod_;
      faPercentage_ = other.faPercentage_;
      volatility_ = other.volatility_;
      volatilityType_ = other.volatilityType_;
      continuousUpdate_ = other.continuousUpdate_;
      referencePriceType_ = other.referencePriceType_;
      deltaNeutralOrderType_ = other.deltaNeutralOrderType_;
      deltaNeutralAuxPrice_ = other.deltaNeutralAuxPrice_;
      deltaNeutralConId_ = other.deltaNeutralConId_;
      deltaNeutralOpenClose_ = other.deltaNeutralOpenClose_;
      deltaNeutralShortSale_ = other.deltaNeutralShortSale_;
      deltaNeutralShortSaleSlot_ = other.deltaNeutralShortSaleSlot_;
      deltaNeutralDesignatedLocation_ = other.deltaNeutralDesignatedLocation_;
      scaleInitLevelSize_ = other.scaleInitLevelSize_;
      scaleSubsLevelSize_ = other.scaleSubsLevelSize_;
      scalePriceIncrement_ = other.scalePriceIncrement_;
      scalePriceAdjustValue_ = other.scalePriceAdjustValue_;
      scalePriceAdjustInterval_ = other.scalePriceAdjustInterval_;
      scaleProfitOffset_ = other.scaleProfitOffset_;
      scaleAutoReset_ = other.scaleAutoReset_;
      scaleInitPosition_ = other.scaleInitPosition_;
      scaleInitFillQty_ = other.scaleInitFillQty_;
      scaleRandomPercent_ = other.scaleRandomPercent_;
      scaleTable_ = other.scaleTable_;
      hedgeType_ = other.hedgeType_;
      hedgeParam_ = other.hedgeParam_;
      algoStrategy_ = other.algoStrategy_;
      algoParams_ = other.algoParams_.Clone();
      algoId_ = other.algoId_;
      smartComboRoutingParams_ = other.smartComboRoutingParams_.Clone();
      whatIf_ = other.whatIf_;
      transmit_ = other.transmit_;
      overridePercentageConstraints_ = other.overridePercentageConstraints_;
      openClose_ = other.openClose_;
      origin_ = other.origin_;
      shortSaleSlot_ = other.shortSaleSlot_;
      designatedLocation_ = other.designatedLocation_;
      exemptCode_ = other.exemptCode_;
      deltaNeutralSettlingFirm_ = other.deltaNeutralSettlingFirm_;
      deltaNeutralClearingAccount_ = other.deltaNeutralClearingAccount_;
      deltaNeutralClearingIntent_ = other.deltaNeutralClearingIntent_;
      discretionaryAmt_ = other.discretionaryAmt_;
      optOutSmartRouting_ = other.optOutSmartRouting_;
      startingPrice_ = other.startingPrice_;
      stockRefPrice_ = other.stockRefPrice_;
      delta_ = other.delta_;
      stockRangeLower_ = other.stockRangeLower_;
      stockRangeUpper_ = other.stockRangeUpper_;
      notHeld_ = other.notHeld_;
      orderMiscOptions_ = other.orderMiscOptions_.Clone();
      solicited_ = other.solicited_;
      randomizeSize_ = other.randomizeSize_;
      randomizePrice_ = other.randomizePrice_;
      referenceContractId_ = other.referenceContractId_;
      peggedChangeAmount_ = other.peggedChangeAmount_;
      isPeggedChangeAmountDecrease_ = other.isPeggedChangeAmountDecrease_;
      referenceChangeAmount_ = other.referenceChangeAmount_;
      referenceExchangeId_ = other.referenceExchangeId_;
      adjustedOrderType_ = other.adjustedOrderType_;
      triggerPrice_ = other.triggerPrice_;
      adjustedStopPrice_ = other.adjustedStopPrice_;
      adjustedStopLimitPrice_ = other.adjustedStopLimitPrice_;
      adjustedTrailingAmount_ = other.adjustedTrailingAmount_;
      adjustableTrailingUnit_ = other.adjustableTrailingUnit_;
      lmtPriceOffset_ = other.lmtPriceOffset_;
      conditions_ = other.conditions_.Clone();
      conditionsCancelOrder_ = other.conditionsCancelOrder_;
      conditionsIgnoreRth_ = other.conditionsIgnoreRth_;
      modelCode_ = other.modelCode_;
      extOperator_ = other.extOperator_;
      softDollarTier_ = other.softDollarTier_ != null ? other.softDollarTier_.Clone() : null;
      cashQty_ = other.cashQty_;
      mifid2DecisionMaker_ = other.mifid2DecisionMaker_;
      mifid2DecisionAlgo_ = other.mifid2DecisionAlgo_;
      mifid2ExecutionTrader_ = other.mifid2ExecutionTrader_;
      mifid2ExecutionAlgo_ = other.mifid2ExecutionAlgo_;
      dontUseAutoPriceForHedge_ = other.dontUseAutoPriceForHedge_;
      isOmsContainer_ = other.isOmsContainer_;
      discretionaryUpToLimitPrice_ = other.discretionaryUpToLimitPrice_;
      autoCancelDate_ = other.autoCancelDate_;
      filledQuantity_ = other.filledQuantity_;
      refFuturesConId_ = other.refFuturesConId_;
      autoCancelParent_ = other.autoCancelParent_;
      shareholder_ = other.shareholder_;
      imbalanceOnly_ = other.imbalanceOnly_;
      routeMarketableToBbo_ = other.routeMarketableToBbo_;
      parentPermId_ = other.parentPermId_;
      usePriceMgmtAlgo_ = other.usePriceMgmtAlgo_;
      duration_ = other.duration_;
      postToAts_ = other.postToAts_;
      advancedErrorOverride_ = other.advancedErrorOverride_;
      manualOrderTime_ = other.manualOrderTime_;
      minTradeQty_ = other.minTradeQty_;
      minCompeteSize_ = other.minCompeteSize_;
      competeAgainstBestOffset_ = other.competeAgainstBestOffset_;
      midOffsetAtWhole_ = other.midOffsetAtWhole_;
      midOffsetAtHalf_ = other.midOffsetAtHalf_;
      customerAccount_ = other.customerAccount_;
      professionalCustomer_ = other.professionalCustomer_;
      bondAccruedInterest_ = other.bondAccruedInterest_;
      includeOvernight_ = other.includeOvernight_;
      manualOrderIndicator_ = other.manualOrderIndicator_;
      submitter_ = other.submitter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Order Clone() {
      return new Order(this);
    }

    /// <summary>Field number for the "clientId" field.</summary>
    public const int ClientIdFieldNumber = 1;
    private readonly static int ClientIdDefaultValue = 0;

    private int clientId_;
    /// <summary>
    /// order ids
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ClientId {
      get { if ((_hasBits0 & 1) != 0) { return clientId_; } else { return ClientIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clientId_ = value;
      }
    }
    /// <summary>Gets whether the "clientId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClientId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "clientId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClientId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 2;
    private readonly static int OrderIdDefaultValue = 0;

    private int orderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrderId {
      get { if ((_hasBits0 & 2) != 0) { return orderId_; } else { return OrderIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        orderId_ = value;
      }
    }
    /// <summary>Gets whether the "orderId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrderId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "orderId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrderId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "permId" field.</summary>
    public const int PermIdFieldNumber = 3;
    private readonly static long PermIdDefaultValue = 0L;

    private long permId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PermId {
      get { if ((_hasBits0 & 4) != 0) { return permId_; } else { return PermIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        permId_ = value;
      }
    }
    /// <summary>Gets whether the "permId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPermId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "permId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPermId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "parentId" field.</summary>
    public const int ParentIdFieldNumber = 4;
    private readonly static int ParentIdDefaultValue = 0;

    private int parentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ParentId {
      get { if ((_hasBits0 & 8) != 0) { return parentId_; } else { return ParentIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        parentId_ = value;
      }
    }
    /// <summary>Gets whether the "parentId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasParentId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "parentId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearParentId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 5;
    private readonly static string ActionDefaultValue = "";

    private string action_;
    /// <summary>
    /// primary attributes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Action {
      get { return action_ ?? ActionDefaultValue; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAction {
      get { return action_ != null; }
    }
    /// <summary>Clears the value of the "action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAction() {
      action_ = null;
    }

    /// <summary>Field number for the "totalQuantity" field.</summary>
    public const int TotalQuantityFieldNumber = 6;
    private readonly static string TotalQuantityDefaultValue = "";

    private string totalQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TotalQuantity {
      get { return totalQuantity_ ?? TotalQuantityDefaultValue; }
      set {
        totalQuantity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "totalQuantity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalQuantity {
      get { return totalQuantity_ != null; }
    }
    /// <summary>Clears the value of the "totalQuantity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalQuantity() {
      totalQuantity_ = null;
    }

    /// <summary>Field number for the "displaySize" field.</summary>
    public const int DisplaySizeFieldNumber = 7;
    private readonly static int DisplaySizeDefaultValue = 0;

    private int displaySize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DisplaySize {
      get { if ((_hasBits0 & 16) != 0) { return displaySize_; } else { return DisplaySizeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        displaySize_ = value;
      }
    }
    /// <summary>Gets whether the "displaySize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDisplaySize {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "displaySize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDisplaySize() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "orderType" field.</summary>
    public const int OrderTypeFieldNumber = 8;
    private readonly static string OrderTypeDefaultValue = "";

    private string orderType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderType {
      get { return orderType_ ?? OrderTypeDefaultValue; }
      set {
        orderType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "orderType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrderType {
      get { return orderType_ != null; }
    }
    /// <summary>Clears the value of the "orderType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrderType() {
      orderType_ = null;
    }

    /// <summary>Field number for the "lmtPrice" field.</summary>
    public const int LmtPriceFieldNumber = 9;
    private readonly static double LmtPriceDefaultValue = 0D;

    private double lmtPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LmtPrice {
      get { if ((_hasBits0 & 32) != 0) { return lmtPrice_; } else { return LmtPriceDefaultValue; } }
      set {
        _hasBits0 |= 32;
        lmtPrice_ = value;
      }
    }
    /// <summary>Gets whether the "lmtPrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLmtPrice {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "lmtPrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLmtPrice() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "auxPrice" field.</summary>
    public const int AuxPriceFieldNumber = 10;
    private readonly static double AuxPriceDefaultValue = 0D;

    private double auxPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AuxPrice {
      get { if ((_hasBits0 & 64) != 0) { return auxPrice_; } else { return AuxPriceDefaultValue; } }
      set {
        _hasBits0 |= 64;
        auxPrice_ = value;
      }
    }
    /// <summary>Gets whether the "auxPrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAuxPrice {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "auxPrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAuxPrice() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "tif" field.</summary>
    public const int TifFieldNumber = 11;
    private readonly static string TifDefaultValue = "";

    private string tif_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tif {
      get { return tif_ ?? TifDefaultValue; }
      set {
        tif_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tif" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTif {
      get { return tif_ != null; }
    }
    /// <summary>Clears the value of the "tif" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTif() {
      tif_ = null;
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 12;
    private readonly static string AccountDefaultValue = "";

    private string account_;
    /// <summary>
    /// clearing info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Account {
      get { return account_ ?? AccountDefaultValue; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "account" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccount {
      get { return account_ != null; }
    }
    /// <summary>Clears the value of the "account" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccount() {
      account_ = null;
    }

    /// <summary>Field number for the "settlingFirm" field.</summary>
    public const int SettlingFirmFieldNumber = 13;
    private readonly static string SettlingFirmDefaultValue = "";

    private string settlingFirm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SettlingFirm {
      get { return settlingFirm_ ?? SettlingFirmDefaultValue; }
      set {
        settlingFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "settlingFirm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSettlingFirm {
      get { return settlingFirm_ != null; }
    }
    /// <summary>Clears the value of the "settlingFirm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSettlingFirm() {
      settlingFirm_ = null;
    }

    /// <summary>Field number for the "clearingAccount" field.</summary>
    public const int ClearingAccountFieldNumber = 14;
    private readonly static string ClearingAccountDefaultValue = "";

    private string clearingAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingAccount {
      get { return clearingAccount_ ?? ClearingAccountDefaultValue; }
      set {
        clearingAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clearingAccount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClearingAccount {
      get { return clearingAccount_ != null; }
    }
    /// <summary>Clears the value of the "clearingAccount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClearingAccount() {
      clearingAccount_ = null;
    }

    /// <summary>Field number for the "clearingIntent" field.</summary>
    public const int ClearingIntentFieldNumber = 15;
    private readonly static string ClearingIntentDefaultValue = "";

    private string clearingIntent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingIntent {
      get { return clearingIntent_ ?? ClearingIntentDefaultValue; }
      set {
        clearingIntent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clearingIntent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClearingIntent {
      get { return clearingIntent_ != null; }
    }
    /// <summary>Clears the value of the "clearingIntent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClearingIntent() {
      clearingIntent_ = null;
    }

    /// <summary>Field number for the "allOrNone" field.</summary>
    public const int AllOrNoneFieldNumber = 16;
    private readonly static bool AllOrNoneDefaultValue = false;

    private bool allOrNone_;
    /// <summary>
    /// secondary attributes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllOrNone {
      get { if ((_hasBits0 & 128) != 0) { return allOrNone_; } else { return AllOrNoneDefaultValue; } }
      set {
        _hasBits0 |= 128;
        allOrNone_ = value;
      }
    }
    /// <summary>Gets whether the "allOrNone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllOrNone {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "allOrNone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllOrNone() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "blockOrder" field.</summary>
    public const int BlockOrderFieldNumber = 17;
    private readonly static bool BlockOrderDefaultValue = false;

    private bool blockOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockOrder {
      get { if ((_hasBits0 & 256) != 0) { return blockOrder_; } else { return BlockOrderDefaultValue; } }
      set {
        _hasBits0 |= 256;
        blockOrder_ = value;
      }
    }
    /// <summary>Gets whether the "blockOrder" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBlockOrder {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "blockOrder" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBlockOrder() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "hidden" field.</summary>
    public const int HiddenFieldNumber = 18;
    private readonly static bool HiddenDefaultValue = false;

    private bool hidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Hidden {
      get { if ((_hasBits0 & 512) != 0) { return hidden_; } else { return HiddenDefaultValue; } }
      set {
        _hasBits0 |= 512;
        hidden_ = value;
      }
    }
    /// <summary>Gets whether the "hidden" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHidden {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "hidden" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHidden() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "outsideRth" field.</summary>
    public const int OutsideRthFieldNumber = 19;
    private readonly static bool OutsideRthDefaultValue = false;

    private bool outsideRth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OutsideRth {
      get { if ((_hasBits0 & 1024) != 0) { return outsideRth_; } else { return OutsideRthDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        outsideRth_ = value;
      }
    }
    /// <summary>Gets whether the "outsideRth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOutsideRth {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "outsideRth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOutsideRth() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "sweepToFill" field.</summary>
    public const int SweepToFillFieldNumber = 20;
    private readonly static bool SweepToFillDefaultValue = false;

    private bool sweepToFill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SweepToFill {
      get { if ((_hasBits0 & 2048) != 0) { return sweepToFill_; } else { return SweepToFillDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        sweepToFill_ = value;
      }
    }
    /// <summary>Gets whether the "sweepToFill" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSweepToFill {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "sweepToFill" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSweepToFill() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "percentOffset" field.</summary>
    public const int PercentOffsetFieldNumber = 21;
    private readonly static double PercentOffsetDefaultValue = 0D;

    private double percentOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PercentOffset {
      get { if ((_hasBits0 & 4096) != 0) { return percentOffset_; } else { return PercentOffsetDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        percentOffset_ = value;
      }
    }
    /// <summary>Gets whether the "percentOffset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPercentOffset {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "percentOffset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPercentOffset() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "trailingPercent" field.</summary>
    public const int TrailingPercentFieldNumber = 22;
    private readonly static double TrailingPercentDefaultValue = 0D;

    private double trailingPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TrailingPercent {
      get { if ((_hasBits0 & 8192) != 0) { return trailingPercent_; } else { return TrailingPercentDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        trailingPercent_ = value;
      }
    }
    /// <summary>Gets whether the "trailingPercent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTrailingPercent {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "trailingPercent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTrailingPercent() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "trailStopPrice" field.</summary>
    public const int TrailStopPriceFieldNumber = 23;
    private readonly static double TrailStopPriceDefaultValue = 0D;

    private double trailStopPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TrailStopPrice {
      get { if ((_hasBits0 & 16384) != 0) { return trailStopPrice_; } else { return TrailStopPriceDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        trailStopPrice_ = value;
      }
    }
    /// <summary>Gets whether the "trailStopPrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTrailStopPrice {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "trailStopPrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTrailStopPrice() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "minQty" field.</summary>
    public const int MinQtyFieldNumber = 24;
    private readonly static int MinQtyDefaultValue = 0;

    private int minQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinQty {
      get { if ((_hasBits0 & 32768) != 0) { return minQty_; } else { return MinQtyDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        minQty_ = value;
      }
    }
    /// <summary>Gets whether the "minQty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinQty {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "minQty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinQty() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "goodAfterTime" field.</summary>
    public const int GoodAfterTimeFieldNumber = 25;
    private readonly static string GoodAfterTimeDefaultValue = "";

    private string goodAfterTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GoodAfterTime {
      get { return goodAfterTime_ ?? GoodAfterTimeDefaultValue; }
      set {
        goodAfterTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "goodAfterTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGoodAfterTime {
      get { return goodAfterTime_ != null; }
    }
    /// <summary>Clears the value of the "goodAfterTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGoodAfterTime() {
      goodAfterTime_ = null;
    }

    /// <summary>Field number for the "goodTillDate" field.</summary>
    public const int GoodTillDateFieldNumber = 26;
    private readonly static string GoodTillDateDefaultValue = "";

    private string goodTillDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GoodTillDate {
      get { return goodTillDate_ ?? GoodTillDateDefaultValue; }
      set {
        goodTillDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "goodTillDate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGoodTillDate {
      get { return goodTillDate_ != null; }
    }
    /// <summary>Clears the value of the "goodTillDate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGoodTillDate() {
      goodTillDate_ = null;
    }

    /// <summary>Field number for the "ocaGroup" field.</summary>
    public const int OcaGroupFieldNumber = 27;
    private readonly static string OcaGroupDefaultValue = "";

    private string ocaGroup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OcaGroup {
      get { return ocaGroup_ ?? OcaGroupDefaultValue; }
      set {
        ocaGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ocaGroup" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOcaGroup {
      get { return ocaGroup_ != null; }
    }
    /// <summary>Clears the value of the "ocaGroup" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOcaGroup() {
      ocaGroup_ = null;
    }

    /// <summary>Field number for the "orderRef" field.</summary>
    public const int OrderRefFieldNumber = 28;
    private readonly static string OrderRefDefaultValue = "";

    private string orderRef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderRef {
      get { return orderRef_ ?? OrderRefDefaultValue; }
      set {
        orderRef_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "orderRef" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrderRef {
      get { return orderRef_ != null; }
    }
    /// <summary>Clears the value of the "orderRef" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrderRef() {
      orderRef_ = null;
    }

    /// <summary>Field number for the "rule80A" field.</summary>
    public const int Rule80AFieldNumber = 29;
    private readonly static string Rule80ADefaultValue = "";

    private string rule80A_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Rule80A {
      get { return rule80A_ ?? Rule80ADefaultValue; }
      set {
        rule80A_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "rule80A" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRule80A {
      get { return rule80A_ != null; }
    }
    /// <summary>Clears the value of the "rule80A" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRule80A() {
      rule80A_ = null;
    }

    /// <summary>Field number for the "ocaType" field.</summary>
    public const int OcaTypeFieldNumber = 30;
    private readonly static int OcaTypeDefaultValue = 0;

    private int ocaType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OcaType {
      get { if ((_hasBits0 & 65536) != 0) { return ocaType_; } else { return OcaTypeDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        ocaType_ = value;
      }
    }
    /// <summary>Gets whether the "ocaType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOcaType {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "ocaType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOcaType() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "triggerMethod" field.</summary>
    public const int TriggerMethodFieldNumber = 31;
    private readonly static int TriggerMethodDefaultValue = 0;

    private int triggerMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TriggerMethod {
      get { if ((_hasBits0 & 131072) != 0) { return triggerMethod_; } else { return TriggerMethodDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        triggerMethod_ = value;
      }
    }
    /// <summary>Gets whether the "triggerMethod" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTriggerMethod {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "triggerMethod" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTriggerMethod() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "activeStartTime" field.</summary>
    public const int ActiveStartTimeFieldNumber = 32;
    private readonly static string ActiveStartTimeDefaultValue = "";

    private string activeStartTime_;
    /// <summary>
    /// extended order fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ActiveStartTime {
      get { return activeStartTime_ ?? ActiveStartTimeDefaultValue; }
      set {
        activeStartTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "activeStartTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActiveStartTime {
      get { return activeStartTime_ != null; }
    }
    /// <summary>Clears the value of the "activeStartTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActiveStartTime() {
      activeStartTime_ = null;
    }

    /// <summary>Field number for the "activeStopTime" field.</summary>
    public const int ActiveStopTimeFieldNumber = 33;
    private readonly static string ActiveStopTimeDefaultValue = "";

    private string activeStopTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ActiveStopTime {
      get { return activeStopTime_ ?? ActiveStopTimeDefaultValue; }
      set {
        activeStopTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "activeStopTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActiveStopTime {
      get { return activeStopTime_ != null; }
    }
    /// <summary>Clears the value of the "activeStopTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActiveStopTime() {
      activeStopTime_ = null;
    }

    /// <summary>Field number for the "faGroup" field.</summary>
    public const int FaGroupFieldNumber = 34;
    private readonly static string FaGroupDefaultValue = "";

    private string faGroup_;
    /// <summary>
    /// advisor allocation orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FaGroup {
      get { return faGroup_ ?? FaGroupDefaultValue; }
      set {
        faGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "faGroup" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFaGroup {
      get { return faGroup_ != null; }
    }
    /// <summary>Clears the value of the "faGroup" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFaGroup() {
      faGroup_ = null;
    }

    /// <summary>Field number for the "faMethod" field.</summary>
    public const int FaMethodFieldNumber = 35;
    private readonly static string FaMethodDefaultValue = "";

    private string faMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FaMethod {
      get { return faMethod_ ?? FaMethodDefaultValue; }
      set {
        faMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "faMethod" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFaMethod {
      get { return faMethod_ != null; }
    }
    /// <summary>Clears the value of the "faMethod" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFaMethod() {
      faMethod_ = null;
    }

    /// <summary>Field number for the "faPercentage" field.</summary>
    public const int FaPercentageFieldNumber = 36;
    private readonly static string FaPercentageDefaultValue = "";

    private string faPercentage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FaPercentage {
      get { return faPercentage_ ?? FaPercentageDefaultValue; }
      set {
        faPercentage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "faPercentage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFaPercentage {
      get { return faPercentage_ != null; }
    }
    /// <summary>Clears the value of the "faPercentage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFaPercentage() {
      faPercentage_ = null;
    }

    /// <summary>Field number for the "volatility" field.</summary>
    public const int VolatilityFieldNumber = 37;
    private readonly static double VolatilityDefaultValue = 0D;

    private double volatility_;
    /// <summary>
    /// volatility orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Volatility {
      get { if ((_hasBits0 & 262144) != 0) { return volatility_; } else { return VolatilityDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        volatility_ = value;
      }
    }
    /// <summary>Gets whether the "volatility" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVolatility {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "volatility" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVolatility() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "volatilityType" field.</summary>
    public const int VolatilityTypeFieldNumber = 38;
    private readonly static int VolatilityTypeDefaultValue = 0;

    private int volatilityType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VolatilityType {
      get { if ((_hasBits0 & 524288) != 0) { return volatilityType_; } else { return VolatilityTypeDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        volatilityType_ = value;
      }
    }
    /// <summary>Gets whether the "volatilityType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVolatilityType {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "volatilityType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVolatilityType() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "continuousUpdate" field.</summary>
    public const int ContinuousUpdateFieldNumber = 39;
    private readonly static bool ContinuousUpdateDefaultValue = false;

    private bool continuousUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ContinuousUpdate {
      get { if ((_hasBits0 & 1048576) != 0) { return continuousUpdate_; } else { return ContinuousUpdateDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        continuousUpdate_ = value;
      }
    }
    /// <summary>Gets whether the "continuousUpdate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContinuousUpdate {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "continuousUpdate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContinuousUpdate() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "referencePriceType" field.</summary>
    public const int ReferencePriceTypeFieldNumber = 40;
    private readonly static int ReferencePriceTypeDefaultValue = 0;

    private int referencePriceType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReferencePriceType {
      get { if ((_hasBits0 & 2097152) != 0) { return referencePriceType_; } else { return ReferencePriceTypeDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        referencePriceType_ = value;
      }
    }
    /// <summary>Gets whether the "referencePriceType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReferencePriceType {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "referencePriceType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReferencePriceType() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "deltaNeutralOrderType" field.</summary>
    public const int DeltaNeutralOrderTypeFieldNumber = 41;
    private readonly static string DeltaNeutralOrderTypeDefaultValue = "";

    private string deltaNeutralOrderType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DeltaNeutralOrderType {
      get { return deltaNeutralOrderType_ ?? DeltaNeutralOrderTypeDefaultValue; }
      set {
        deltaNeutralOrderType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "deltaNeutralOrderType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeltaNeutralOrderType {
      get { return deltaNeutralOrderType_ != null; }
    }
    /// <summary>Clears the value of the "deltaNeutralOrderType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeltaNeutralOrderType() {
      deltaNeutralOrderType_ = null;
    }

    /// <summary>Field number for the "deltaNeutralAuxPrice" field.</summary>
    public const int DeltaNeutralAuxPriceFieldNumber = 42;
    private readonly static double DeltaNeutralAuxPriceDefaultValue = 0D;

    private double deltaNeutralAuxPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double DeltaNeutralAuxPrice {
      get { if ((_hasBits0 & 4194304) != 0) { return deltaNeutralAuxPrice_; } else { return DeltaNeutralAuxPriceDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        deltaNeutralAuxPrice_ = value;
      }
    }
    /// <summary>Gets whether the "deltaNeutralAuxPrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeltaNeutralAuxPrice {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "deltaNeutralAuxPrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeltaNeutralAuxPrice() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "deltaNeutralConId" field.</summary>
    public const int DeltaNeutralConIdFieldNumber = 43;
    private readonly static int DeltaNeutralConIdDefaultValue = 0;

    private int deltaNeutralConId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DeltaNeutralConId {
      get { if ((_hasBits0 & 8388608) != 0) { return deltaNeutralConId_; } else { return DeltaNeutralConIdDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        deltaNeutralConId_ = value;
      }
    }
    /// <summary>Gets whether the "deltaNeutralConId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeltaNeutralConId {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "deltaNeutralConId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeltaNeutralConId() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "deltaNeutralOpenClose" field.</summary>
    public const int DeltaNeutralOpenCloseFieldNumber = 44;
    private readonly static string DeltaNeutralOpenCloseDefaultValue = "";

    private string deltaNeutralOpenClose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DeltaNeutralOpenClose {
      get { return deltaNeutralOpenClose_ ?? DeltaNeutralOpenCloseDefaultValue; }
      set {
        deltaNeutralOpenClose_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "deltaNeutralOpenClose" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeltaNeutralOpenClose {
      get { return deltaNeutralOpenClose_ != null; }
    }
    /// <summary>Clears the value of the "deltaNeutralOpenClose" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeltaNeutralOpenClose() {
      deltaNeutralOpenClose_ = null;
    }

    /// <summary>Field number for the "deltaNeutralShortSale" field.</summary>
    public const int DeltaNeutralShortSaleFieldNumber = 45;
    private readonly static bool DeltaNeutralShortSaleDefaultValue = false;

    private bool deltaNeutralShortSale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DeltaNeutralShortSale {
      get { if ((_hasBits0 & 16777216) != 0) { return deltaNeutralShortSale_; } else { return DeltaNeutralShortSaleDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        deltaNeutralShortSale_ = value;
      }
    }
    /// <summary>Gets whether the "deltaNeutralShortSale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeltaNeutralShortSale {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "deltaNeutralShortSale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeltaNeutralShortSale() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "deltaNeutralShortSaleSlot" field.</summary>
    public const int DeltaNeutralShortSaleSlotFieldNumber = 46;
    private readonly static int DeltaNeutralShortSaleSlotDefaultValue = 0;

    private int deltaNeutralShortSaleSlot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DeltaNeutralShortSaleSlot {
      get { if ((_hasBits0 & 33554432) != 0) { return deltaNeutralShortSaleSlot_; } else { return DeltaNeutralShortSaleSlotDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        deltaNeutralShortSaleSlot_ = value;
      }
    }
    /// <summary>Gets whether the "deltaNeutralShortSaleSlot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeltaNeutralShortSaleSlot {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "deltaNeutralShortSaleSlot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeltaNeutralShortSaleSlot() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "deltaNeutralDesignatedLocation" field.</summary>
    public const int DeltaNeutralDesignatedLocationFieldNumber = 47;
    private readonly static string DeltaNeutralDesignatedLocationDefaultValue = "";

    private string deltaNeutralDesignatedLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DeltaNeutralDesignatedLocation {
      get { return deltaNeutralDesignatedLocation_ ?? DeltaNeutralDesignatedLocationDefaultValue; }
      set {
        deltaNeutralDesignatedLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "deltaNeutralDesignatedLocation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeltaNeutralDesignatedLocation {
      get { return deltaNeutralDesignatedLocation_ != null; }
    }
    /// <summary>Clears the value of the "deltaNeutralDesignatedLocation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeltaNeutralDesignatedLocation() {
      deltaNeutralDesignatedLocation_ = null;
    }

    /// <summary>Field number for the "scaleInitLevelSize" field.</summary>
    public const int ScaleInitLevelSizeFieldNumber = 48;
    private readonly static int ScaleInitLevelSizeDefaultValue = 0;

    private int scaleInitLevelSize_;
    /// <summary>
    /// scale orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ScaleInitLevelSize {
      get { if ((_hasBits0 & 67108864) != 0) { return scaleInitLevelSize_; } else { return ScaleInitLevelSizeDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        scaleInitLevelSize_ = value;
      }
    }
    /// <summary>Gets whether the "scaleInitLevelSize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaleInitLevelSize {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "scaleInitLevelSize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaleInitLevelSize() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "scaleSubsLevelSize" field.</summary>
    public const int ScaleSubsLevelSizeFieldNumber = 49;
    private readonly static int ScaleSubsLevelSizeDefaultValue = 0;

    private int scaleSubsLevelSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ScaleSubsLevelSize {
      get { if ((_hasBits0 & 134217728) != 0) { return scaleSubsLevelSize_; } else { return ScaleSubsLevelSizeDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        scaleSubsLevelSize_ = value;
      }
    }
    /// <summary>Gets whether the "scaleSubsLevelSize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaleSubsLevelSize {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "scaleSubsLevelSize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaleSubsLevelSize() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "scalePriceIncrement" field.</summary>
    public const int ScalePriceIncrementFieldNumber = 50;
    private readonly static double ScalePriceIncrementDefaultValue = 0D;

    private double scalePriceIncrement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ScalePriceIncrement {
      get { if ((_hasBits0 & 268435456) != 0) { return scalePriceIncrement_; } else { return ScalePriceIncrementDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        scalePriceIncrement_ = value;
      }
    }
    /// <summary>Gets whether the "scalePriceIncrement" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScalePriceIncrement {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "scalePriceIncrement" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScalePriceIncrement() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "scalePriceAdjustValue" field.</summary>
    public const int ScalePriceAdjustValueFieldNumber = 51;
    private readonly static double ScalePriceAdjustValueDefaultValue = 0D;

    private double scalePriceAdjustValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ScalePriceAdjustValue {
      get { if ((_hasBits0 & 536870912) != 0) { return scalePriceAdjustValue_; } else { return ScalePriceAdjustValueDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        scalePriceAdjustValue_ = value;
      }
    }
    /// <summary>Gets whether the "scalePriceAdjustValue" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScalePriceAdjustValue {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "scalePriceAdjustValue" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScalePriceAdjustValue() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "scalePriceAdjustInterval" field.</summary>
    public const int ScalePriceAdjustIntervalFieldNumber = 52;
    private readonly static int ScalePriceAdjustIntervalDefaultValue = 0;

    private int scalePriceAdjustInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ScalePriceAdjustInterval {
      get { if ((_hasBits0 & 1073741824) != 0) { return scalePriceAdjustInterval_; } else { return ScalePriceAdjustIntervalDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        scalePriceAdjustInterval_ = value;
      }
    }
    /// <summary>Gets whether the "scalePriceAdjustInterval" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScalePriceAdjustInterval {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "scalePriceAdjustInterval" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScalePriceAdjustInterval() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "scaleProfitOffset" field.</summary>
    public const int ScaleProfitOffsetFieldNumber = 53;
    private readonly static double ScaleProfitOffsetDefaultValue = 0D;

    private double scaleProfitOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ScaleProfitOffset {
      get { if ((_hasBits0 & -2147483648) != 0) { return scaleProfitOffset_; } else { return ScaleProfitOffsetDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        scaleProfitOffset_ = value;
      }
    }
    /// <summary>Gets whether the "scaleProfitOffset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaleProfitOffset {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "scaleProfitOffset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaleProfitOffset() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "scaleAutoReset" field.</summary>
    public const int ScaleAutoResetFieldNumber = 54;
    private readonly static bool ScaleAutoResetDefaultValue = false;

    private bool scaleAutoReset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ScaleAutoReset {
      get { if ((_hasBits1 & 1) != 0) { return scaleAutoReset_; } else { return ScaleAutoResetDefaultValue; } }
      set {
        _hasBits1 |= 1;
        scaleAutoReset_ = value;
      }
    }
    /// <summary>Gets whether the "scaleAutoReset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaleAutoReset {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "scaleAutoReset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaleAutoReset() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "scaleInitPosition" field.</summary>
    public const int ScaleInitPositionFieldNumber = 55;
    private readonly static int ScaleInitPositionDefaultValue = 0;

    private int scaleInitPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ScaleInitPosition {
      get { if ((_hasBits1 & 2) != 0) { return scaleInitPosition_; } else { return ScaleInitPositionDefaultValue; } }
      set {
        _hasBits1 |= 2;
        scaleInitPosition_ = value;
      }
    }
    /// <summary>Gets whether the "scaleInitPosition" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaleInitPosition {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "scaleInitPosition" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaleInitPosition() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "scaleInitFillQty" field.</summary>
    public const int ScaleInitFillQtyFieldNumber = 56;
    private readonly static int ScaleInitFillQtyDefaultValue = 0;

    private int scaleInitFillQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ScaleInitFillQty {
      get { if ((_hasBits1 & 4) != 0) { return scaleInitFillQty_; } else { return ScaleInitFillQtyDefaultValue; } }
      set {
        _hasBits1 |= 4;
        scaleInitFillQty_ = value;
      }
    }
    /// <summary>Gets whether the "scaleInitFillQty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaleInitFillQty {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "scaleInitFillQty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaleInitFillQty() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "scaleRandomPercent" field.</summary>
    public const int ScaleRandomPercentFieldNumber = 57;
    private readonly static bool ScaleRandomPercentDefaultValue = false;

    private bool scaleRandomPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ScaleRandomPercent {
      get { if ((_hasBits1 & 8) != 0) { return scaleRandomPercent_; } else { return ScaleRandomPercentDefaultValue; } }
      set {
        _hasBits1 |= 8;
        scaleRandomPercent_ = value;
      }
    }
    /// <summary>Gets whether the "scaleRandomPercent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaleRandomPercent {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "scaleRandomPercent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaleRandomPercent() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "scaleTable" field.</summary>
    public const int ScaleTableFieldNumber = 58;
    private readonly static string ScaleTableDefaultValue = "";

    private string scaleTable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ScaleTable {
      get { return scaleTable_ ?? ScaleTableDefaultValue; }
      set {
        scaleTable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "scaleTable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaleTable {
      get { return scaleTable_ != null; }
    }
    /// <summary>Clears the value of the "scaleTable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaleTable() {
      scaleTable_ = null;
    }

    /// <summary>Field number for the "hedgeType" field.</summary>
    public const int HedgeTypeFieldNumber = 59;
    private readonly static string HedgeTypeDefaultValue = "";

    private string hedgeType_;
    /// <summary>
    /// hedge orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HedgeType {
      get { return hedgeType_ ?? HedgeTypeDefaultValue; }
      set {
        hedgeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "hedgeType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHedgeType {
      get { return hedgeType_ != null; }
    }
    /// <summary>Clears the value of the "hedgeType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHedgeType() {
      hedgeType_ = null;
    }

    /// <summary>Field number for the "hedgeParam" field.</summary>
    public const int HedgeParamFieldNumber = 60;
    private readonly static string HedgeParamDefaultValue = "";

    private string hedgeParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HedgeParam {
      get { return hedgeParam_ ?? HedgeParamDefaultValue; }
      set {
        hedgeParam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "hedgeParam" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHedgeParam {
      get { return hedgeParam_ != null; }
    }
    /// <summary>Clears the value of the "hedgeParam" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHedgeParam() {
      hedgeParam_ = null;
    }

    /// <summary>Field number for the "algoStrategy" field.</summary>
    public const int AlgoStrategyFieldNumber = 61;
    private readonly static string AlgoStrategyDefaultValue = "";

    private string algoStrategy_;
    /// <summary>
    /// algo orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AlgoStrategy {
      get { return algoStrategy_ ?? AlgoStrategyDefaultValue; }
      set {
        algoStrategy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "algoStrategy" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAlgoStrategy {
      get { return algoStrategy_ != null; }
    }
    /// <summary>Clears the value of the "algoStrategy" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAlgoStrategy() {
      algoStrategy_ = null;
    }

    /// <summary>Field number for the "algoParams" field.</summary>
    public const int AlgoParamsFieldNumber = 62;
    private static readonly pbc::MapField<string, string>.Codec _map_algoParams_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 498);
    private readonly pbc::MapField<string, string> algoParams_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> AlgoParams {
      get { return algoParams_; }
    }

    /// <summary>Field number for the "algoId" field.</summary>
    public const int AlgoIdFieldNumber = 63;
    private readonly static string AlgoIdDefaultValue = "";

    private string algoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AlgoId {
      get { return algoId_ ?? AlgoIdDefaultValue; }
      set {
        algoId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "algoId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAlgoId {
      get { return algoId_ != null; }
    }
    /// <summary>Clears the value of the "algoId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAlgoId() {
      algoId_ = null;
    }

    /// <summary>Field number for the "smartComboRoutingParams" field.</summary>
    public const int SmartComboRoutingParamsFieldNumber = 64;
    private static readonly pbc::MapField<string, string>.Codec _map_smartComboRoutingParams_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 514);
    private readonly pbc::MapField<string, string> smartComboRoutingParams_ = new pbc::MapField<string, string>();
    /// <summary>
    /// combo orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> SmartComboRoutingParams {
      get { return smartComboRoutingParams_; }
    }

    /// <summary>Field number for the "whatIf" field.</summary>
    public const int WhatIfFieldNumber = 65;
    private readonly static bool WhatIfDefaultValue = false;

    private bool whatIf_;
    /// <summary>
    /// processing control
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WhatIf {
      get { if ((_hasBits1 & 16) != 0) { return whatIf_; } else { return WhatIfDefaultValue; } }
      set {
        _hasBits1 |= 16;
        whatIf_ = value;
      }
    }
    /// <summary>Gets whether the "whatIf" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWhatIf {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "whatIf" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWhatIf() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "transmit" field.</summary>
    public const int TransmitFieldNumber = 66;
    private readonly static bool TransmitDefaultValue = false;

    private bool transmit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Transmit {
      get { if ((_hasBits1 & 32) != 0) { return transmit_; } else { return TransmitDefaultValue; } }
      set {
        _hasBits1 |= 32;
        transmit_ = value;
      }
    }
    /// <summary>Gets whether the "transmit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTransmit {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "transmit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTransmit() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "overridePercentageConstraints" field.</summary>
    public const int OverridePercentageConstraintsFieldNumber = 67;
    private readonly static bool OverridePercentageConstraintsDefaultValue = false;

    private bool overridePercentageConstraints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OverridePercentageConstraints {
      get { if ((_hasBits1 & 64) != 0) { return overridePercentageConstraints_; } else { return OverridePercentageConstraintsDefaultValue; } }
      set {
        _hasBits1 |= 64;
        overridePercentageConstraints_ = value;
      }
    }
    /// <summary>Gets whether the "overridePercentageConstraints" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOverridePercentageConstraints {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "overridePercentageConstraints" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOverridePercentageConstraints() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "openClose" field.</summary>
    public const int OpenCloseFieldNumber = 68;
    private readonly static string OpenCloseDefaultValue = "";

    private string openClose_;
    /// <summary>
    /// Institutional orders only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OpenClose {
      get { return openClose_ ?? OpenCloseDefaultValue; }
      set {
        openClose_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "openClose" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOpenClose {
      get { return openClose_ != null; }
    }
    /// <summary>Clears the value of the "openClose" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOpenClose() {
      openClose_ = null;
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 69;
    private readonly static int OriginDefaultValue = 0;

    private int origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Origin {
      get { if ((_hasBits1 & 128) != 0) { return origin_; } else { return OriginDefaultValue; } }
      set {
        _hasBits1 |= 128;
        origin_ = value;
      }
    }
    /// <summary>Gets whether the "origin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrigin {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "origin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrigin() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "shortSaleSlot" field.</summary>
    public const int ShortSaleSlotFieldNumber = 70;
    private readonly static int ShortSaleSlotDefaultValue = 0;

    private int shortSaleSlot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShortSaleSlot {
      get { if ((_hasBits1 & 256) != 0) { return shortSaleSlot_; } else { return ShortSaleSlotDefaultValue; } }
      set {
        _hasBits1 |= 256;
        shortSaleSlot_ = value;
      }
    }
    /// <summary>Gets whether the "shortSaleSlot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShortSaleSlot {
      get { return (_hasBits1 & 256) != 0; }
    }
    /// <summary>Clears the value of the "shortSaleSlot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShortSaleSlot() {
      _hasBits1 &= ~256;
    }

    /// <summary>Field number for the "designatedLocation" field.</summary>
    public const int DesignatedLocationFieldNumber = 71;
    private readonly static string DesignatedLocationDefaultValue = "";

    private string designatedLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DesignatedLocation {
      get { return designatedLocation_ ?? DesignatedLocationDefaultValue; }
      set {
        designatedLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "designatedLocation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDesignatedLocation {
      get { return designatedLocation_ != null; }
    }
    /// <summary>Clears the value of the "designatedLocation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDesignatedLocation() {
      designatedLocation_ = null;
    }

    /// <summary>Field number for the "exemptCode" field.</summary>
    public const int ExemptCodeFieldNumber = 72;
    private readonly static int ExemptCodeDefaultValue = 0;

    private int exemptCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExemptCode {
      get { if ((_hasBits1 & 512) != 0) { return exemptCode_; } else { return ExemptCodeDefaultValue; } }
      set {
        _hasBits1 |= 512;
        exemptCode_ = value;
      }
    }
    /// <summary>Gets whether the "exemptCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExemptCode {
      get { return (_hasBits1 & 512) != 0; }
    }
    /// <summary>Clears the value of the "exemptCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExemptCode() {
      _hasBits1 &= ~512;
    }

    /// <summary>Field number for the "deltaNeutralSettlingFirm" field.</summary>
    public const int DeltaNeutralSettlingFirmFieldNumber = 73;
    private readonly static string DeltaNeutralSettlingFirmDefaultValue = "";

    private string deltaNeutralSettlingFirm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DeltaNeutralSettlingFirm {
      get { return deltaNeutralSettlingFirm_ ?? DeltaNeutralSettlingFirmDefaultValue; }
      set {
        deltaNeutralSettlingFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "deltaNeutralSettlingFirm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeltaNeutralSettlingFirm {
      get { return deltaNeutralSettlingFirm_ != null; }
    }
    /// <summary>Clears the value of the "deltaNeutralSettlingFirm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeltaNeutralSettlingFirm() {
      deltaNeutralSettlingFirm_ = null;
    }

    /// <summary>Field number for the "deltaNeutralClearingAccount" field.</summary>
    public const int DeltaNeutralClearingAccountFieldNumber = 74;
    private readonly static string DeltaNeutralClearingAccountDefaultValue = "";

    private string deltaNeutralClearingAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DeltaNeutralClearingAccount {
      get { return deltaNeutralClearingAccount_ ?? DeltaNeutralClearingAccountDefaultValue; }
      set {
        deltaNeutralClearingAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "deltaNeutralClearingAccount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeltaNeutralClearingAccount {
      get { return deltaNeutralClearingAccount_ != null; }
    }
    /// <summary>Clears the value of the "deltaNeutralClearingAccount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeltaNeutralClearingAccount() {
      deltaNeutralClearingAccount_ = null;
    }

    /// <summary>Field number for the "deltaNeutralClearingIntent" field.</summary>
    public const int DeltaNeutralClearingIntentFieldNumber = 75;
    private readonly static string DeltaNeutralClearingIntentDefaultValue = "";

    private string deltaNeutralClearingIntent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DeltaNeutralClearingIntent {
      get { return deltaNeutralClearingIntent_ ?? DeltaNeutralClearingIntentDefaultValue; }
      set {
        deltaNeutralClearingIntent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "deltaNeutralClearingIntent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeltaNeutralClearingIntent {
      get { return deltaNeutralClearingIntent_ != null; }
    }
    /// <summary>Clears the value of the "deltaNeutralClearingIntent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeltaNeutralClearingIntent() {
      deltaNeutralClearingIntent_ = null;
    }

    /// <summary>Field number for the "discretionaryAmt" field.</summary>
    public const int DiscretionaryAmtFieldNumber = 76;
    private readonly static double DiscretionaryAmtDefaultValue = 0D;

    private double discretionaryAmt_;
    /// <summary>
    /// SMART routing only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double DiscretionaryAmt {
      get { if ((_hasBits1 & 1024) != 0) { return discretionaryAmt_; } else { return DiscretionaryAmtDefaultValue; } }
      set {
        _hasBits1 |= 1024;
        discretionaryAmt_ = value;
      }
    }
    /// <summary>Gets whether the "discretionaryAmt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDiscretionaryAmt {
      get { return (_hasBits1 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "discretionaryAmt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDiscretionaryAmt() {
      _hasBits1 &= ~1024;
    }

    /// <summary>Field number for the "optOutSmartRouting" field.</summary>
    public const int OptOutSmartRoutingFieldNumber = 77;
    private readonly static bool OptOutSmartRoutingDefaultValue = false;

    private bool optOutSmartRouting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OptOutSmartRouting {
      get { if ((_hasBits1 & 2048) != 0) { return optOutSmartRouting_; } else { return OptOutSmartRoutingDefaultValue; } }
      set {
        _hasBits1 |= 2048;
        optOutSmartRouting_ = value;
      }
    }
    /// <summary>Gets whether the "optOutSmartRouting" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOptOutSmartRouting {
      get { return (_hasBits1 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "optOutSmartRouting" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOptOutSmartRouting() {
      _hasBits1 &= ~2048;
    }

    /// <summary>Field number for the "startingPrice" field.</summary>
    public const int StartingPriceFieldNumber = 78;
    private readonly static double StartingPriceDefaultValue = 0D;

    private double startingPrice_;
    /// <summary>
    /// BOX ORDERS ONLY
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StartingPrice {
      get { if ((_hasBits1 & 4096) != 0) { return startingPrice_; } else { return StartingPriceDefaultValue; } }
      set {
        _hasBits1 |= 4096;
        startingPrice_ = value;
      }
    }
    /// <summary>Gets whether the "startingPrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartingPrice {
      get { return (_hasBits1 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "startingPrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartingPrice() {
      _hasBits1 &= ~4096;
    }

    /// <summary>Field number for the "stockRefPrice" field.</summary>
    public const int StockRefPriceFieldNumber = 79;
    private readonly static double StockRefPriceDefaultValue = 0D;

    private double stockRefPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StockRefPrice {
      get { if ((_hasBits1 & 8192) != 0) { return stockRefPrice_; } else { return StockRefPriceDefaultValue; } }
      set {
        _hasBits1 |= 8192;
        stockRefPrice_ = value;
      }
    }
    /// <summary>Gets whether the "stockRefPrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStockRefPrice {
      get { return (_hasBits1 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "stockRefPrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStockRefPrice() {
      _hasBits1 &= ~8192;
    }

    /// <summary>Field number for the "delta" field.</summary>
    public const int DeltaFieldNumber = 80;
    private readonly static double DeltaDefaultValue = 0D;

    private double delta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Delta {
      get { if ((_hasBits1 & 16384) != 0) { return delta_; } else { return DeltaDefaultValue; } }
      set {
        _hasBits1 |= 16384;
        delta_ = value;
      }
    }
    /// <summary>Gets whether the "delta" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDelta {
      get { return (_hasBits1 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "delta" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDelta() {
      _hasBits1 &= ~16384;
    }

    /// <summary>Field number for the "stockRangeLower" field.</summary>
    public const int StockRangeLowerFieldNumber = 81;
    private readonly static double StockRangeLowerDefaultValue = 0D;

    private double stockRangeLower_;
    /// <summary>
    /// pegged to stock or VOL orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StockRangeLower {
      get { if ((_hasBits1 & 32768) != 0) { return stockRangeLower_; } else { return StockRangeLowerDefaultValue; } }
      set {
        _hasBits1 |= 32768;
        stockRangeLower_ = value;
      }
    }
    /// <summary>Gets whether the "stockRangeLower" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStockRangeLower {
      get { return (_hasBits1 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "stockRangeLower" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStockRangeLower() {
      _hasBits1 &= ~32768;
    }

    /// <summary>Field number for the "stockRangeUpper" field.</summary>
    public const int StockRangeUpperFieldNumber = 82;
    private readonly static double StockRangeUpperDefaultValue = 0D;

    private double stockRangeUpper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StockRangeUpper {
      get { if ((_hasBits1 & 65536) != 0) { return stockRangeUpper_; } else { return StockRangeUpperDefaultValue; } }
      set {
        _hasBits1 |= 65536;
        stockRangeUpper_ = value;
      }
    }
    /// <summary>Gets whether the "stockRangeUpper" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStockRangeUpper {
      get { return (_hasBits1 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "stockRangeUpper" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStockRangeUpper() {
      _hasBits1 &= ~65536;
    }

    /// <summary>Field number for the "notHeld" field.</summary>
    public const int NotHeldFieldNumber = 83;
    private readonly static bool NotHeldDefaultValue = false;

    private bool notHeld_;
    /// <summary>
    /// Not Held
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NotHeld {
      get { if ((_hasBits1 & 131072) != 0) { return notHeld_; } else { return NotHeldDefaultValue; } }
      set {
        _hasBits1 |= 131072;
        notHeld_ = value;
      }
    }
    /// <summary>Gets whether the "notHeld" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNotHeld {
      get { return (_hasBits1 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "notHeld" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNotHeld() {
      _hasBits1 &= ~131072;
    }

    /// <summary>Field number for the "orderMiscOptions" field.</summary>
    public const int OrderMiscOptionsFieldNumber = 84;
    private static readonly pbc::MapField<string, string>.Codec _map_orderMiscOptions_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 674);
    private readonly pbc::MapField<string, string> orderMiscOptions_ = new pbc::MapField<string, string>();
    /// <summary>
    /// order misc options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> OrderMiscOptions {
      get { return orderMiscOptions_; }
    }

    /// <summary>Field number for the "solicited" field.</summary>
    public const int SolicitedFieldNumber = 85;
    private readonly static bool SolicitedDefaultValue = false;

    private bool solicited_;
    /// <summary>
    ///order algo id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Solicited {
      get { if ((_hasBits1 & 262144) != 0) { return solicited_; } else { return SolicitedDefaultValue; } }
      set {
        _hasBits1 |= 262144;
        solicited_ = value;
      }
    }
    /// <summary>Gets whether the "solicited" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSolicited {
      get { return (_hasBits1 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "solicited" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSolicited() {
      _hasBits1 &= ~262144;
    }

    /// <summary>Field number for the "randomizeSize" field.</summary>
    public const int RandomizeSizeFieldNumber = 86;
    private readonly static bool RandomizeSizeDefaultValue = false;

    private bool randomizeSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RandomizeSize {
      get { if ((_hasBits1 & 524288) != 0) { return randomizeSize_; } else { return RandomizeSizeDefaultValue; } }
      set {
        _hasBits1 |= 524288;
        randomizeSize_ = value;
      }
    }
    /// <summary>Gets whether the "randomizeSize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRandomizeSize {
      get { return (_hasBits1 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "randomizeSize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRandomizeSize() {
      _hasBits1 &= ~524288;
    }

    /// <summary>Field number for the "randomizePrice" field.</summary>
    public const int RandomizePriceFieldNumber = 87;
    private readonly static bool RandomizePriceDefaultValue = false;

    private bool randomizePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RandomizePrice {
      get { if ((_hasBits1 & 1048576) != 0) { return randomizePrice_; } else { return RandomizePriceDefaultValue; } }
      set {
        _hasBits1 |= 1048576;
        randomizePrice_ = value;
      }
    }
    /// <summary>Gets whether the "randomizePrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRandomizePrice {
      get { return (_hasBits1 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "randomizePrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRandomizePrice() {
      _hasBits1 &= ~1048576;
    }

    /// <summary>Field number for the "referenceContractId" field.</summary>
    public const int ReferenceContractIdFieldNumber = 88;
    private readonly static int ReferenceContractIdDefaultValue = 0;

    private int referenceContractId_;
    /// <summary>
    /// PEG2BENCH fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReferenceContractId {
      get { if ((_hasBits1 & 2097152) != 0) { return referenceContractId_; } else { return ReferenceContractIdDefaultValue; } }
      set {
        _hasBits1 |= 2097152;
        referenceContractId_ = value;
      }
    }
    /// <summary>Gets whether the "referenceContractId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReferenceContractId {
      get { return (_hasBits1 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "referenceContractId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReferenceContractId() {
      _hasBits1 &= ~2097152;
    }

    /// <summary>Field number for the "peggedChangeAmount" field.</summary>
    public const int PeggedChangeAmountFieldNumber = 89;
    private readonly static double PeggedChangeAmountDefaultValue = 0D;

    private double peggedChangeAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PeggedChangeAmount {
      get { if ((_hasBits1 & 4194304) != 0) { return peggedChangeAmount_; } else { return PeggedChangeAmountDefaultValue; } }
      set {
        _hasBits1 |= 4194304;
        peggedChangeAmount_ = value;
      }
    }
    /// <summary>Gets whether the "peggedChangeAmount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPeggedChangeAmount {
      get { return (_hasBits1 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "peggedChangeAmount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPeggedChangeAmount() {
      _hasBits1 &= ~4194304;
    }

    /// <summary>Field number for the "isPeggedChangeAmountDecrease" field.</summary>
    public const int IsPeggedChangeAmountDecreaseFieldNumber = 90;
    private readonly static bool IsPeggedChangeAmountDecreaseDefaultValue = false;

    private bool isPeggedChangeAmountDecrease_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPeggedChangeAmountDecrease {
      get { if ((_hasBits1 & 8388608) != 0) { return isPeggedChangeAmountDecrease_; } else { return IsPeggedChangeAmountDecreaseDefaultValue; } }
      set {
        _hasBits1 |= 8388608;
        isPeggedChangeAmountDecrease_ = value;
      }
    }
    /// <summary>Gets whether the "isPeggedChangeAmountDecrease" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPeggedChangeAmountDecrease {
      get { return (_hasBits1 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "isPeggedChangeAmountDecrease" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPeggedChangeAmountDecrease() {
      _hasBits1 &= ~8388608;
    }

    /// <summary>Field number for the "referenceChangeAmount" field.</summary>
    public const int ReferenceChangeAmountFieldNumber = 91;
    private readonly static double ReferenceChangeAmountDefaultValue = 0D;

    private double referenceChangeAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ReferenceChangeAmount {
      get { if ((_hasBits1 & 16777216) != 0) { return referenceChangeAmount_; } else { return ReferenceChangeAmountDefaultValue; } }
      set {
        _hasBits1 |= 16777216;
        referenceChangeAmount_ = value;
      }
    }
    /// <summary>Gets whether the "referenceChangeAmount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReferenceChangeAmount {
      get { return (_hasBits1 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "referenceChangeAmount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReferenceChangeAmount() {
      _hasBits1 &= ~16777216;
    }

    /// <summary>Field number for the "referenceExchangeId" field.</summary>
    public const int ReferenceExchangeIdFieldNumber = 92;
    private readonly static string ReferenceExchangeIdDefaultValue = "";

    private string referenceExchangeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ReferenceExchangeId {
      get { return referenceExchangeId_ ?? ReferenceExchangeIdDefaultValue; }
      set {
        referenceExchangeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "referenceExchangeId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReferenceExchangeId {
      get { return referenceExchangeId_ != null; }
    }
    /// <summary>Clears the value of the "referenceExchangeId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReferenceExchangeId() {
      referenceExchangeId_ = null;
    }

    /// <summary>Field number for the "adjustedOrderType" field.</summary>
    public const int AdjustedOrderTypeFieldNumber = 93;
    private readonly static string AdjustedOrderTypeDefaultValue = "";

    private string adjustedOrderType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AdjustedOrderType {
      get { return adjustedOrderType_ ?? AdjustedOrderTypeDefaultValue; }
      set {
        adjustedOrderType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "adjustedOrderType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAdjustedOrderType {
      get { return adjustedOrderType_ != null; }
    }
    /// <summary>Clears the value of the "adjustedOrderType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAdjustedOrderType() {
      adjustedOrderType_ = null;
    }

    /// <summary>Field number for the "triggerPrice" field.</summary>
    public const int TriggerPriceFieldNumber = 94;
    private readonly static double TriggerPriceDefaultValue = 0D;

    private double triggerPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TriggerPrice {
      get { if ((_hasBits1 & 33554432) != 0) { return triggerPrice_; } else { return TriggerPriceDefaultValue; } }
      set {
        _hasBits1 |= 33554432;
        triggerPrice_ = value;
      }
    }
    /// <summary>Gets whether the "triggerPrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTriggerPrice {
      get { return (_hasBits1 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "triggerPrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTriggerPrice() {
      _hasBits1 &= ~33554432;
    }

    /// <summary>Field number for the "adjustedStopPrice" field.</summary>
    public const int AdjustedStopPriceFieldNumber = 95;
    private readonly static double AdjustedStopPriceDefaultValue = 0D;

    private double adjustedStopPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AdjustedStopPrice {
      get { if ((_hasBits1 & 67108864) != 0) { return adjustedStopPrice_; } else { return AdjustedStopPriceDefaultValue; } }
      set {
        _hasBits1 |= 67108864;
        adjustedStopPrice_ = value;
      }
    }
    /// <summary>Gets whether the "adjustedStopPrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAdjustedStopPrice {
      get { return (_hasBits1 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "adjustedStopPrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAdjustedStopPrice() {
      _hasBits1 &= ~67108864;
    }

    /// <summary>Field number for the "adjustedStopLimitPrice" field.</summary>
    public const int AdjustedStopLimitPriceFieldNumber = 96;
    private readonly static double AdjustedStopLimitPriceDefaultValue = 0D;

    private double adjustedStopLimitPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AdjustedStopLimitPrice {
      get { if ((_hasBits1 & 134217728) != 0) { return adjustedStopLimitPrice_; } else { return AdjustedStopLimitPriceDefaultValue; } }
      set {
        _hasBits1 |= 134217728;
        adjustedStopLimitPrice_ = value;
      }
    }
    /// <summary>Gets whether the "adjustedStopLimitPrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAdjustedStopLimitPrice {
      get { return (_hasBits1 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "adjustedStopLimitPrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAdjustedStopLimitPrice() {
      _hasBits1 &= ~134217728;
    }

    /// <summary>Field number for the "adjustedTrailingAmount" field.</summary>
    public const int AdjustedTrailingAmountFieldNumber = 97;
    private readonly static double AdjustedTrailingAmountDefaultValue = 0D;

    private double adjustedTrailingAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AdjustedTrailingAmount {
      get { if ((_hasBits1 & 268435456) != 0) { return adjustedTrailingAmount_; } else { return AdjustedTrailingAmountDefaultValue; } }
      set {
        _hasBits1 |= 268435456;
        adjustedTrailingAmount_ = value;
      }
    }
    /// <summary>Gets whether the "adjustedTrailingAmount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAdjustedTrailingAmount {
      get { return (_hasBits1 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "adjustedTrailingAmount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAdjustedTrailingAmount() {
      _hasBits1 &= ~268435456;
    }

    /// <summary>Field number for the "adjustableTrailingUnit" field.</summary>
    public const int AdjustableTrailingUnitFieldNumber = 98;
    private readonly static int AdjustableTrailingUnitDefaultValue = 0;

    private int adjustableTrailingUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AdjustableTrailingUnit {
      get { if ((_hasBits1 & 536870912) != 0) { return adjustableTrailingUnit_; } else { return AdjustableTrailingUnitDefaultValue; } }
      set {
        _hasBits1 |= 536870912;
        adjustableTrailingUnit_ = value;
      }
    }
    /// <summary>Gets whether the "adjustableTrailingUnit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAdjustableTrailingUnit {
      get { return (_hasBits1 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "adjustableTrailingUnit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAdjustableTrailingUnit() {
      _hasBits1 &= ~536870912;
    }

    /// <summary>Field number for the "lmtPriceOffset" field.</summary>
    public const int LmtPriceOffsetFieldNumber = 99;
    private readonly static double LmtPriceOffsetDefaultValue = 0D;

    private double lmtPriceOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LmtPriceOffset {
      get { if ((_hasBits1 & 1073741824) != 0) { return lmtPriceOffset_; } else { return LmtPriceOffsetDefaultValue; } }
      set {
        _hasBits1 |= 1073741824;
        lmtPriceOffset_ = value;
      }
    }
    /// <summary>Gets whether the "lmtPriceOffset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLmtPriceOffset {
      get { return (_hasBits1 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "lmtPriceOffset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLmtPriceOffset() {
      _hasBits1 &= ~1073741824;
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 100;
    private static readonly pb::FieldCodec<global::IBApi.protobuf.OrderCondition> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(802, global::IBApi.protobuf.OrderCondition.Parser);
    private readonly pbc::RepeatedField<global::IBApi.protobuf.OrderCondition> conditions_ = new pbc::RepeatedField<global::IBApi.protobuf.OrderCondition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::IBApi.protobuf.OrderCondition> Conditions {
      get { return conditions_; }
    }

    /// <summary>Field number for the "conditionsCancelOrder" field.</summary>
    public const int ConditionsCancelOrderFieldNumber = 101;
    private readonly static bool ConditionsCancelOrderDefaultValue = false;

    private bool conditionsCancelOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ConditionsCancelOrder {
      get { if ((_hasBits1 & -2147483648) != 0) { return conditionsCancelOrder_; } else { return ConditionsCancelOrderDefaultValue; } }
      set {
        _hasBits1 |= -2147483648;
        conditionsCancelOrder_ = value;
      }
    }
    /// <summary>Gets whether the "conditionsCancelOrder" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConditionsCancelOrder {
      get { return (_hasBits1 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "conditionsCancelOrder" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConditionsCancelOrder() {
      _hasBits1 &= ~-2147483648;
    }

    /// <summary>Field number for the "conditionsIgnoreRth" field.</summary>
    public const int ConditionsIgnoreRthFieldNumber = 102;
    private readonly static bool ConditionsIgnoreRthDefaultValue = false;

    private bool conditionsIgnoreRth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ConditionsIgnoreRth {
      get { if ((_hasBits2 & 1) != 0) { return conditionsIgnoreRth_; } else { return ConditionsIgnoreRthDefaultValue; } }
      set {
        _hasBits2 |= 1;
        conditionsIgnoreRth_ = value;
      }
    }
    /// <summary>Gets whether the "conditionsIgnoreRth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConditionsIgnoreRth {
      get { return (_hasBits2 & 1) != 0; }
    }
    /// <summary>Clears the value of the "conditionsIgnoreRth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConditionsIgnoreRth() {
      _hasBits2 &= ~1;
    }

    /// <summary>Field number for the "modelCode" field.</summary>
    public const int ModelCodeFieldNumber = 103;
    private readonly static string ModelCodeDefaultValue = "";

    private string modelCode_;
    /// <summary>
    /// models
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ModelCode {
      get { return modelCode_ ?? ModelCodeDefaultValue; }
      set {
        modelCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "modelCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasModelCode {
      get { return modelCode_ != null; }
    }
    /// <summary>Clears the value of the "modelCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearModelCode() {
      modelCode_ = null;
    }

    /// <summary>Field number for the "extOperator" field.</summary>
    public const int ExtOperatorFieldNumber = 104;
    private readonly static string ExtOperatorDefaultValue = "";

    private string extOperator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExtOperator {
      get { return extOperator_ ?? ExtOperatorDefaultValue; }
      set {
        extOperator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "extOperator" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExtOperator {
      get { return extOperator_ != null; }
    }
    /// <summary>Clears the value of the "extOperator" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExtOperator() {
      extOperator_ = null;
    }

    /// <summary>Field number for the "softDollarTier" field.</summary>
    public const int SoftDollarTierFieldNumber = 105;
    private global::IBApi.protobuf.SoftDollarTier softDollarTier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::IBApi.protobuf.SoftDollarTier SoftDollarTier {
      get { return softDollarTier_; }
      set {
        softDollarTier_ = value;
      }
    }

    /// <summary>Field number for the "cashQty" field.</summary>
    public const int CashQtyFieldNumber = 106;
    private readonly static double CashQtyDefaultValue = 0D;

    private double cashQty_;
    /// <summary>
    /// native cash quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CashQty {
      get { if ((_hasBits2 & 2) != 0) { return cashQty_; } else { return CashQtyDefaultValue; } }
      set {
        _hasBits2 |= 2;
        cashQty_ = value;
      }
    }
    /// <summary>Gets whether the "cashQty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCashQty {
      get { return (_hasBits2 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cashQty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCashQty() {
      _hasBits2 &= ~2;
    }

    /// <summary>Field number for the "mifid2DecisionMaker" field.</summary>
    public const int Mifid2DecisionMakerFieldNumber = 107;
    private readonly static string Mifid2DecisionMakerDefaultValue = "";

    private string mifid2DecisionMaker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Mifid2DecisionMaker {
      get { return mifid2DecisionMaker_ ?? Mifid2DecisionMakerDefaultValue; }
      set {
        mifid2DecisionMaker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mifid2DecisionMaker" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifid2DecisionMaker {
      get { return mifid2DecisionMaker_ != null; }
    }
    /// <summary>Clears the value of the "mifid2DecisionMaker" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifid2DecisionMaker() {
      mifid2DecisionMaker_ = null;
    }

    /// <summary>Field number for the "mifid2DecisionAlgo" field.</summary>
    public const int Mifid2DecisionAlgoFieldNumber = 108;
    private readonly static string Mifid2DecisionAlgoDefaultValue = "";

    private string mifid2DecisionAlgo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Mifid2DecisionAlgo {
      get { return mifid2DecisionAlgo_ ?? Mifid2DecisionAlgoDefaultValue; }
      set {
        mifid2DecisionAlgo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mifid2DecisionAlgo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifid2DecisionAlgo {
      get { return mifid2DecisionAlgo_ != null; }
    }
    /// <summary>Clears the value of the "mifid2DecisionAlgo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifid2DecisionAlgo() {
      mifid2DecisionAlgo_ = null;
    }

    /// <summary>Field number for the "mifid2ExecutionTrader" field.</summary>
    public const int Mifid2ExecutionTraderFieldNumber = 109;
    private readonly static string Mifid2ExecutionTraderDefaultValue = "";

    private string mifid2ExecutionTrader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Mifid2ExecutionTrader {
      get { return mifid2ExecutionTrader_ ?? Mifid2ExecutionTraderDefaultValue; }
      set {
        mifid2ExecutionTrader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mifid2ExecutionTrader" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifid2ExecutionTrader {
      get { return mifid2ExecutionTrader_ != null; }
    }
    /// <summary>Clears the value of the "mifid2ExecutionTrader" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifid2ExecutionTrader() {
      mifid2ExecutionTrader_ = null;
    }

    /// <summary>Field number for the "mifid2ExecutionAlgo" field.</summary>
    public const int Mifid2ExecutionAlgoFieldNumber = 110;
    private readonly static string Mifid2ExecutionAlgoDefaultValue = "";

    private string mifid2ExecutionAlgo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Mifid2ExecutionAlgo {
      get { return mifid2ExecutionAlgo_ ?? Mifid2ExecutionAlgoDefaultValue; }
      set {
        mifid2ExecutionAlgo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mifid2ExecutionAlgo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMifid2ExecutionAlgo {
      get { return mifid2ExecutionAlgo_ != null; }
    }
    /// <summary>Clears the value of the "mifid2ExecutionAlgo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMifid2ExecutionAlgo() {
      mifid2ExecutionAlgo_ = null;
    }

    /// <summary>Field number for the "dontUseAutoPriceForHedge" field.</summary>
    public const int DontUseAutoPriceForHedgeFieldNumber = 111;
    private readonly static bool DontUseAutoPriceForHedgeDefaultValue = false;

    private bool dontUseAutoPriceForHedge_;
    /// <summary>
    /// don't use auto price for hedge
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DontUseAutoPriceForHedge {
      get { if ((_hasBits2 & 4) != 0) { return dontUseAutoPriceForHedge_; } else { return DontUseAutoPriceForHedgeDefaultValue; } }
      set {
        _hasBits2 |= 4;
        dontUseAutoPriceForHedge_ = value;
      }
    }
    /// <summary>Gets whether the "dontUseAutoPriceForHedge" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDontUseAutoPriceForHedge {
      get { return (_hasBits2 & 4) != 0; }
    }
    /// <summary>Clears the value of the "dontUseAutoPriceForHedge" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDontUseAutoPriceForHedge() {
      _hasBits2 &= ~4;
    }

    /// <summary>Field number for the "isOmsContainer" field.</summary>
    public const int IsOmsContainerFieldNumber = 112;
    private readonly static bool IsOmsContainerDefaultValue = false;

    private bool isOmsContainer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsOmsContainer {
      get { if ((_hasBits2 & 8) != 0) { return isOmsContainer_; } else { return IsOmsContainerDefaultValue; } }
      set {
        _hasBits2 |= 8;
        isOmsContainer_ = value;
      }
    }
    /// <summary>Gets whether the "isOmsContainer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsOmsContainer {
      get { return (_hasBits2 & 8) != 0; }
    }
    /// <summary>Clears the value of the "isOmsContainer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsOmsContainer() {
      _hasBits2 &= ~8;
    }

    /// <summary>Field number for the "discretionaryUpToLimitPrice" field.</summary>
    public const int DiscretionaryUpToLimitPriceFieldNumber = 113;
    private readonly static bool DiscretionaryUpToLimitPriceDefaultValue = false;

    private bool discretionaryUpToLimitPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DiscretionaryUpToLimitPrice {
      get { if ((_hasBits2 & 16) != 0) { return discretionaryUpToLimitPrice_; } else { return DiscretionaryUpToLimitPriceDefaultValue; } }
      set {
        _hasBits2 |= 16;
        discretionaryUpToLimitPrice_ = value;
      }
    }
    /// <summary>Gets whether the "discretionaryUpToLimitPrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDiscretionaryUpToLimitPrice {
      get { return (_hasBits2 & 16) != 0; }
    }
    /// <summary>Clears the value of the "discretionaryUpToLimitPrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDiscretionaryUpToLimitPrice() {
      _hasBits2 &= ~16;
    }

    /// <summary>Field number for the "autoCancelDate" field.</summary>
    public const int AutoCancelDateFieldNumber = 114;
    private readonly static string AutoCancelDateDefaultValue = "";

    private string autoCancelDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AutoCancelDate {
      get { return autoCancelDate_ ?? AutoCancelDateDefaultValue; }
      set {
        autoCancelDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "autoCancelDate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoCancelDate {
      get { return autoCancelDate_ != null; }
    }
    /// <summary>Clears the value of the "autoCancelDate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoCancelDate() {
      autoCancelDate_ = null;
    }

    /// <summary>Field number for the "filledQuantity" field.</summary>
    public const int FilledQuantityFieldNumber = 115;
    private readonly static string FilledQuantityDefaultValue = "";

    private string filledQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FilledQuantity {
      get { return filledQuantity_ ?? FilledQuantityDefaultValue; }
      set {
        filledQuantity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "filledQuantity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFilledQuantity {
      get { return filledQuantity_ != null; }
    }
    /// <summary>Clears the value of the "filledQuantity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFilledQuantity() {
      filledQuantity_ = null;
    }

    /// <summary>Field number for the "refFuturesConId" field.</summary>
    public const int RefFuturesConIdFieldNumber = 116;
    private readonly static int RefFuturesConIdDefaultValue = 0;

    private int refFuturesConId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RefFuturesConId {
      get { if ((_hasBits2 & 32) != 0) { return refFuturesConId_; } else { return RefFuturesConIdDefaultValue; } }
      set {
        _hasBits2 |= 32;
        refFuturesConId_ = value;
      }
    }
    /// <summary>Gets whether the "refFuturesConId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRefFuturesConId {
      get { return (_hasBits2 & 32) != 0; }
    }
    /// <summary>Clears the value of the "refFuturesConId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRefFuturesConId() {
      _hasBits2 &= ~32;
    }

    /// <summary>Field number for the "autoCancelParent" field.</summary>
    public const int AutoCancelParentFieldNumber = 117;
    private readonly static bool AutoCancelParentDefaultValue = false;

    private bool autoCancelParent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AutoCancelParent {
      get { if ((_hasBits2 & 64) != 0) { return autoCancelParent_; } else { return AutoCancelParentDefaultValue; } }
      set {
        _hasBits2 |= 64;
        autoCancelParent_ = value;
      }
    }
    /// <summary>Gets whether the "autoCancelParent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoCancelParent {
      get { return (_hasBits2 & 64) != 0; }
    }
    /// <summary>Clears the value of the "autoCancelParent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoCancelParent() {
      _hasBits2 &= ~64;
    }

    /// <summary>Field number for the "shareholder" field.</summary>
    public const int ShareholderFieldNumber = 118;
    private readonly static string ShareholderDefaultValue = "";

    private string shareholder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Shareholder {
      get { return shareholder_ ?? ShareholderDefaultValue; }
      set {
        shareholder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "shareholder" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShareholder {
      get { return shareholder_ != null; }
    }
    /// <summary>Clears the value of the "shareholder" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShareholder() {
      shareholder_ = null;
    }

    /// <summary>Field number for the "imbalanceOnly" field.</summary>
    public const int ImbalanceOnlyFieldNumber = 119;
    private readonly static bool ImbalanceOnlyDefaultValue = false;

    private bool imbalanceOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ImbalanceOnly {
      get { if ((_hasBits2 & 128) != 0) { return imbalanceOnly_; } else { return ImbalanceOnlyDefaultValue; } }
      set {
        _hasBits2 |= 128;
        imbalanceOnly_ = value;
      }
    }
    /// <summary>Gets whether the "imbalanceOnly" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasImbalanceOnly {
      get { return (_hasBits2 & 128) != 0; }
    }
    /// <summary>Clears the value of the "imbalanceOnly" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearImbalanceOnly() {
      _hasBits2 &= ~128;
    }

    /// <summary>Field number for the "routeMarketableToBbo" field.</summary>
    public const int RouteMarketableToBboFieldNumber = 120;
    private readonly static bool RouteMarketableToBboDefaultValue = false;

    private bool routeMarketableToBbo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RouteMarketableToBbo {
      get { if ((_hasBits2 & 256) != 0) { return routeMarketableToBbo_; } else { return RouteMarketableToBboDefaultValue; } }
      set {
        _hasBits2 |= 256;
        routeMarketableToBbo_ = value;
      }
    }
    /// <summary>Gets whether the "routeMarketableToBbo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRouteMarketableToBbo {
      get { return (_hasBits2 & 256) != 0; }
    }
    /// <summary>Clears the value of the "routeMarketableToBbo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRouteMarketableToBbo() {
      _hasBits2 &= ~256;
    }

    /// <summary>Field number for the "parentPermId" field.</summary>
    public const int ParentPermIdFieldNumber = 121;
    private readonly static long ParentPermIdDefaultValue = 0L;

    private long parentPermId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ParentPermId {
      get { if ((_hasBits2 & 512) != 0) { return parentPermId_; } else { return ParentPermIdDefaultValue; } }
      set {
        _hasBits2 |= 512;
        parentPermId_ = value;
      }
    }
    /// <summary>Gets whether the "parentPermId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasParentPermId {
      get { return (_hasBits2 & 512) != 0; }
    }
    /// <summary>Clears the value of the "parentPermId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearParentPermId() {
      _hasBits2 &= ~512;
    }

    /// <summary>Field number for the "usePriceMgmtAlgo" field.</summary>
    public const int UsePriceMgmtAlgoFieldNumber = 122;
    private readonly static int UsePriceMgmtAlgoDefaultValue = 0;

    private int usePriceMgmtAlgo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UsePriceMgmtAlgo {
      get { if ((_hasBits2 & 1024) != 0) { return usePriceMgmtAlgo_; } else { return UsePriceMgmtAlgoDefaultValue; } }
      set {
        _hasBits2 |= 1024;
        usePriceMgmtAlgo_ = value;
      }
    }
    /// <summary>Gets whether the "usePriceMgmtAlgo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUsePriceMgmtAlgo {
      get { return (_hasBits2 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "usePriceMgmtAlgo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUsePriceMgmtAlgo() {
      _hasBits2 &= ~1024;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 123;
    private readonly static int DurationDefaultValue = 0;

    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Duration {
      get { if ((_hasBits2 & 2048) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits2 |= 2048;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDuration {
      get { return (_hasBits2 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDuration() {
      _hasBits2 &= ~2048;
    }

    /// <summary>Field number for the "postToAts" field.</summary>
    public const int PostToAtsFieldNumber = 124;
    private readonly static int PostToAtsDefaultValue = 0;

    private int postToAts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PostToAts {
      get { if ((_hasBits2 & 4096) != 0) { return postToAts_; } else { return PostToAtsDefaultValue; } }
      set {
        _hasBits2 |= 4096;
        postToAts_ = value;
      }
    }
    /// <summary>Gets whether the "postToAts" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPostToAts {
      get { return (_hasBits2 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "postToAts" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPostToAts() {
      _hasBits2 &= ~4096;
    }

    /// <summary>Field number for the "advancedErrorOverride" field.</summary>
    public const int AdvancedErrorOverrideFieldNumber = 125;
    private readonly static string AdvancedErrorOverrideDefaultValue = "";

    private string advancedErrorOverride_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AdvancedErrorOverride {
      get { return advancedErrorOverride_ ?? AdvancedErrorOverrideDefaultValue; }
      set {
        advancedErrorOverride_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "advancedErrorOverride" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAdvancedErrorOverride {
      get { return advancedErrorOverride_ != null; }
    }
    /// <summary>Clears the value of the "advancedErrorOverride" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAdvancedErrorOverride() {
      advancedErrorOverride_ = null;
    }

    /// <summary>Field number for the "manualOrderTime" field.</summary>
    public const int ManualOrderTimeFieldNumber = 126;
    private readonly static string ManualOrderTimeDefaultValue = "";

    private string manualOrderTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ManualOrderTime {
      get { return manualOrderTime_ ?? ManualOrderTimeDefaultValue; }
      set {
        manualOrderTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "manualOrderTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasManualOrderTime {
      get { return manualOrderTime_ != null; }
    }
    /// <summary>Clears the value of the "manualOrderTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearManualOrderTime() {
      manualOrderTime_ = null;
    }

    /// <summary>Field number for the "minTradeQty" field.</summary>
    public const int MinTradeQtyFieldNumber = 127;
    private readonly static int MinTradeQtyDefaultValue = 0;

    private int minTradeQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinTradeQty {
      get { if ((_hasBits2 & 8192) != 0) { return minTradeQty_; } else { return MinTradeQtyDefaultValue; } }
      set {
        _hasBits2 |= 8192;
        minTradeQty_ = value;
      }
    }
    /// <summary>Gets whether the "minTradeQty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinTradeQty {
      get { return (_hasBits2 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "minTradeQty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinTradeQty() {
      _hasBits2 &= ~8192;
    }

    /// <summary>Field number for the "minCompeteSize" field.</summary>
    public const int MinCompeteSizeFieldNumber = 128;
    private readonly static int MinCompeteSizeDefaultValue = 0;

    private int minCompeteSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinCompeteSize {
      get { if ((_hasBits2 & 16384) != 0) { return minCompeteSize_; } else { return MinCompeteSizeDefaultValue; } }
      set {
        _hasBits2 |= 16384;
        minCompeteSize_ = value;
      }
    }
    /// <summary>Gets whether the "minCompeteSize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinCompeteSize {
      get { return (_hasBits2 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "minCompeteSize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinCompeteSize() {
      _hasBits2 &= ~16384;
    }

    /// <summary>Field number for the "competeAgainstBestOffset" field.</summary>
    public const int CompeteAgainstBestOffsetFieldNumber = 129;
    private readonly static double CompeteAgainstBestOffsetDefaultValue = 0D;

    private double competeAgainstBestOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CompeteAgainstBestOffset {
      get { if ((_hasBits2 & 32768) != 0) { return competeAgainstBestOffset_; } else { return CompeteAgainstBestOffsetDefaultValue; } }
      set {
        _hasBits2 |= 32768;
        competeAgainstBestOffset_ = value;
      }
    }
    /// <summary>Gets whether the "competeAgainstBestOffset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCompeteAgainstBestOffset {
      get { return (_hasBits2 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "competeAgainstBestOffset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCompeteAgainstBestOffset() {
      _hasBits2 &= ~32768;
    }

    /// <summary>Field number for the "midOffsetAtWhole" field.</summary>
    public const int MidOffsetAtWholeFieldNumber = 130;
    private readonly static double MidOffsetAtWholeDefaultValue = 0D;

    private double midOffsetAtWhole_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MidOffsetAtWhole {
      get { if ((_hasBits2 & 65536) != 0) { return midOffsetAtWhole_; } else { return MidOffsetAtWholeDefaultValue; } }
      set {
        _hasBits2 |= 65536;
        midOffsetAtWhole_ = value;
      }
    }
    /// <summary>Gets whether the "midOffsetAtWhole" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMidOffsetAtWhole {
      get { return (_hasBits2 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "midOffsetAtWhole" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMidOffsetAtWhole() {
      _hasBits2 &= ~65536;
    }

    /// <summary>Field number for the "midOffsetAtHalf" field.</summary>
    public const int MidOffsetAtHalfFieldNumber = 131;
    private readonly static double MidOffsetAtHalfDefaultValue = 0D;

    private double midOffsetAtHalf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MidOffsetAtHalf {
      get { if ((_hasBits2 & 131072) != 0) { return midOffsetAtHalf_; } else { return MidOffsetAtHalfDefaultValue; } }
      set {
        _hasBits2 |= 131072;
        midOffsetAtHalf_ = value;
      }
    }
    /// <summary>Gets whether the "midOffsetAtHalf" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMidOffsetAtHalf {
      get { return (_hasBits2 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "midOffsetAtHalf" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMidOffsetAtHalf() {
      _hasBits2 &= ~131072;
    }

    /// <summary>Field number for the "customerAccount" field.</summary>
    public const int CustomerAccountFieldNumber = 132;
    private readonly static string CustomerAccountDefaultValue = "";

    private string customerAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CustomerAccount {
      get { return customerAccount_ ?? CustomerAccountDefaultValue; }
      set {
        customerAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "customerAccount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCustomerAccount {
      get { return customerAccount_ != null; }
    }
    /// <summary>Clears the value of the "customerAccount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCustomerAccount() {
      customerAccount_ = null;
    }

    /// <summary>Field number for the "professionalCustomer" field.</summary>
    public const int ProfessionalCustomerFieldNumber = 133;
    private readonly static bool ProfessionalCustomerDefaultValue = false;

    private bool professionalCustomer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProfessionalCustomer {
      get { if ((_hasBits2 & 262144) != 0) { return professionalCustomer_; } else { return ProfessionalCustomerDefaultValue; } }
      set {
        _hasBits2 |= 262144;
        professionalCustomer_ = value;
      }
    }
    /// <summary>Gets whether the "professionalCustomer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProfessionalCustomer {
      get { return (_hasBits2 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "professionalCustomer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProfessionalCustomer() {
      _hasBits2 &= ~262144;
    }

    /// <summary>Field number for the "bondAccruedInterest" field.</summary>
    public const int BondAccruedInterestFieldNumber = 134;
    private readonly static string BondAccruedInterestDefaultValue = "";

    private string bondAccruedInterest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BondAccruedInterest {
      get { return bondAccruedInterest_ ?? BondAccruedInterestDefaultValue; }
      set {
        bondAccruedInterest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "bondAccruedInterest" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBondAccruedInterest {
      get { return bondAccruedInterest_ != null; }
    }
    /// <summary>Clears the value of the "bondAccruedInterest" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBondAccruedInterest() {
      bondAccruedInterest_ = null;
    }

    /// <summary>Field number for the "includeOvernight" field.</summary>
    public const int IncludeOvernightFieldNumber = 135;
    private readonly static bool IncludeOvernightDefaultValue = false;

    private bool includeOvernight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IncludeOvernight {
      get { if ((_hasBits2 & 524288) != 0) { return includeOvernight_; } else { return IncludeOvernightDefaultValue; } }
      set {
        _hasBits2 |= 524288;
        includeOvernight_ = value;
      }
    }
    /// <summary>Gets whether the "includeOvernight" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIncludeOvernight {
      get { return (_hasBits2 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "includeOvernight" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIncludeOvernight() {
      _hasBits2 &= ~524288;
    }

    /// <summary>Field number for the "manualOrderIndicator" field.</summary>
    public const int ManualOrderIndicatorFieldNumber = 136;
    private readonly static int ManualOrderIndicatorDefaultValue = 0;

    private int manualOrderIndicator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ManualOrderIndicator {
      get { if ((_hasBits2 & 1048576) != 0) { return manualOrderIndicator_; } else { return ManualOrderIndicatorDefaultValue; } }
      set {
        _hasBits2 |= 1048576;
        manualOrderIndicator_ = value;
      }
    }
    /// <summary>Gets whether the "manualOrderIndicator" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasManualOrderIndicator {
      get { return (_hasBits2 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "manualOrderIndicator" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearManualOrderIndicator() {
      _hasBits2 &= ~1048576;
    }

    /// <summary>Field number for the "submitter" field.</summary>
    public const int SubmitterFieldNumber = 137;
    private readonly static string SubmitterDefaultValue = "";

    private string submitter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Submitter {
      get { return submitter_ ?? SubmitterDefaultValue; }
      set {
        submitter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "submitter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSubmitter {
      get { return submitter_ != null; }
    }
    /// <summary>Clears the value of the "submitter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSubmitter() {
      submitter_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Order);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Order other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientId != other.ClientId) return false;
      if (OrderId != other.OrderId) return false;
      if (PermId != other.PermId) return false;
      if (ParentId != other.ParentId) return false;
      if (Action != other.Action) return false;
      if (TotalQuantity != other.TotalQuantity) return false;
      if (DisplaySize != other.DisplaySize) return false;
      if (OrderType != other.OrderType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LmtPrice, other.LmtPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AuxPrice, other.AuxPrice)) return false;
      if (Tif != other.Tif) return false;
      if (Account != other.Account) return false;
      if (SettlingFirm != other.SettlingFirm) return false;
      if (ClearingAccount != other.ClearingAccount) return false;
      if (ClearingIntent != other.ClearingIntent) return false;
      if (AllOrNone != other.AllOrNone) return false;
      if (BlockOrder != other.BlockOrder) return false;
      if (Hidden != other.Hidden) return false;
      if (OutsideRth != other.OutsideRth) return false;
      if (SweepToFill != other.SweepToFill) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PercentOffset, other.PercentOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TrailingPercent, other.TrailingPercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TrailStopPrice, other.TrailStopPrice)) return false;
      if (MinQty != other.MinQty) return false;
      if (GoodAfterTime != other.GoodAfterTime) return false;
      if (GoodTillDate != other.GoodTillDate) return false;
      if (OcaGroup != other.OcaGroup) return false;
      if (OrderRef != other.OrderRef) return false;
      if (Rule80A != other.Rule80A) return false;
      if (OcaType != other.OcaType) return false;
      if (TriggerMethod != other.TriggerMethod) return false;
      if (ActiveStartTime != other.ActiveStartTime) return false;
      if (ActiveStopTime != other.ActiveStopTime) return false;
      if (FaGroup != other.FaGroup) return false;
      if (FaMethod != other.FaMethod) return false;
      if (FaPercentage != other.FaPercentage) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Volatility, other.Volatility)) return false;
      if (VolatilityType != other.VolatilityType) return false;
      if (ContinuousUpdate != other.ContinuousUpdate) return false;
      if (ReferencePriceType != other.ReferencePriceType) return false;
      if (DeltaNeutralOrderType != other.DeltaNeutralOrderType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DeltaNeutralAuxPrice, other.DeltaNeutralAuxPrice)) return false;
      if (DeltaNeutralConId != other.DeltaNeutralConId) return false;
      if (DeltaNeutralOpenClose != other.DeltaNeutralOpenClose) return false;
      if (DeltaNeutralShortSale != other.DeltaNeutralShortSale) return false;
      if (DeltaNeutralShortSaleSlot != other.DeltaNeutralShortSaleSlot) return false;
      if (DeltaNeutralDesignatedLocation != other.DeltaNeutralDesignatedLocation) return false;
      if (ScaleInitLevelSize != other.ScaleInitLevelSize) return false;
      if (ScaleSubsLevelSize != other.ScaleSubsLevelSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ScalePriceIncrement, other.ScalePriceIncrement)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ScalePriceAdjustValue, other.ScalePriceAdjustValue)) return false;
      if (ScalePriceAdjustInterval != other.ScalePriceAdjustInterval) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ScaleProfitOffset, other.ScaleProfitOffset)) return false;
      if (ScaleAutoReset != other.ScaleAutoReset) return false;
      if (ScaleInitPosition != other.ScaleInitPosition) return false;
      if (ScaleInitFillQty != other.ScaleInitFillQty) return false;
      if (ScaleRandomPercent != other.ScaleRandomPercent) return false;
      if (ScaleTable != other.ScaleTable) return false;
      if (HedgeType != other.HedgeType) return false;
      if (HedgeParam != other.HedgeParam) return false;
      if (AlgoStrategy != other.AlgoStrategy) return false;
      if (!AlgoParams.Equals(other.AlgoParams)) return false;
      if (AlgoId != other.AlgoId) return false;
      if (!SmartComboRoutingParams.Equals(other.SmartComboRoutingParams)) return false;
      if (WhatIf != other.WhatIf) return false;
      if (Transmit != other.Transmit) return false;
      if (OverridePercentageConstraints != other.OverridePercentageConstraints) return false;
      if (OpenClose != other.OpenClose) return false;
      if (Origin != other.Origin) return false;
      if (ShortSaleSlot != other.ShortSaleSlot) return false;
      if (DesignatedLocation != other.DesignatedLocation) return false;
      if (ExemptCode != other.ExemptCode) return false;
      if (DeltaNeutralSettlingFirm != other.DeltaNeutralSettlingFirm) return false;
      if (DeltaNeutralClearingAccount != other.DeltaNeutralClearingAccount) return false;
      if (DeltaNeutralClearingIntent != other.DeltaNeutralClearingIntent) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DiscretionaryAmt, other.DiscretionaryAmt)) return false;
      if (OptOutSmartRouting != other.OptOutSmartRouting) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StartingPrice, other.StartingPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StockRefPrice, other.StockRefPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Delta, other.Delta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StockRangeLower, other.StockRangeLower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StockRangeUpper, other.StockRangeUpper)) return false;
      if (NotHeld != other.NotHeld) return false;
      if (!OrderMiscOptions.Equals(other.OrderMiscOptions)) return false;
      if (Solicited != other.Solicited) return false;
      if (RandomizeSize != other.RandomizeSize) return false;
      if (RandomizePrice != other.RandomizePrice) return false;
      if (ReferenceContractId != other.ReferenceContractId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PeggedChangeAmount, other.PeggedChangeAmount)) return false;
      if (IsPeggedChangeAmountDecrease != other.IsPeggedChangeAmountDecrease) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ReferenceChangeAmount, other.ReferenceChangeAmount)) return false;
      if (ReferenceExchangeId != other.ReferenceExchangeId) return false;
      if (AdjustedOrderType != other.AdjustedOrderType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TriggerPrice, other.TriggerPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdjustedStopPrice, other.AdjustedStopPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdjustedStopLimitPrice, other.AdjustedStopLimitPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdjustedTrailingAmount, other.AdjustedTrailingAmount)) return false;
      if (AdjustableTrailingUnit != other.AdjustableTrailingUnit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LmtPriceOffset, other.LmtPriceOffset)) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      if (ConditionsCancelOrder != other.ConditionsCancelOrder) return false;
      if (ConditionsIgnoreRth != other.ConditionsIgnoreRth) return false;
      if (ModelCode != other.ModelCode) return false;
      if (ExtOperator != other.ExtOperator) return false;
      if (!object.Equals(SoftDollarTier, other.SoftDollarTier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CashQty, other.CashQty)) return false;
      if (Mifid2DecisionMaker != other.Mifid2DecisionMaker) return false;
      if (Mifid2DecisionAlgo != other.Mifid2DecisionAlgo) return false;
      if (Mifid2ExecutionTrader != other.Mifid2ExecutionTrader) return false;
      if (Mifid2ExecutionAlgo != other.Mifid2ExecutionAlgo) return false;
      if (DontUseAutoPriceForHedge != other.DontUseAutoPriceForHedge) return false;
      if (IsOmsContainer != other.IsOmsContainer) return false;
      if (DiscretionaryUpToLimitPrice != other.DiscretionaryUpToLimitPrice) return false;
      if (AutoCancelDate != other.AutoCancelDate) return false;
      if (FilledQuantity != other.FilledQuantity) return false;
      if (RefFuturesConId != other.RefFuturesConId) return false;
      if (AutoCancelParent != other.AutoCancelParent) return false;
      if (Shareholder != other.Shareholder) return false;
      if (ImbalanceOnly != other.ImbalanceOnly) return false;
      if (RouteMarketableToBbo != other.RouteMarketableToBbo) return false;
      if (ParentPermId != other.ParentPermId) return false;
      if (UsePriceMgmtAlgo != other.UsePriceMgmtAlgo) return false;
      if (Duration != other.Duration) return false;
      if (PostToAts != other.PostToAts) return false;
      if (AdvancedErrorOverride != other.AdvancedErrorOverride) return false;
      if (ManualOrderTime != other.ManualOrderTime) return false;
      if (MinTradeQty != other.MinTradeQty) return false;
      if (MinCompeteSize != other.MinCompeteSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CompeteAgainstBestOffset, other.CompeteAgainstBestOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MidOffsetAtWhole, other.MidOffsetAtWhole)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MidOffsetAtHalf, other.MidOffsetAtHalf)) return false;
      if (CustomerAccount != other.CustomerAccount) return false;
      if (ProfessionalCustomer != other.ProfessionalCustomer) return false;
      if (BondAccruedInterest != other.BondAccruedInterest) return false;
      if (IncludeOvernight != other.IncludeOvernight) return false;
      if (ManualOrderIndicator != other.ManualOrderIndicator) return false;
      if (Submitter != other.Submitter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClientId) hash ^= ClientId.GetHashCode();
      if (HasOrderId) hash ^= OrderId.GetHashCode();
      if (HasPermId) hash ^= PermId.GetHashCode();
      if (HasParentId) hash ^= ParentId.GetHashCode();
      if (HasAction) hash ^= Action.GetHashCode();
      if (HasTotalQuantity) hash ^= TotalQuantity.GetHashCode();
      if (HasDisplaySize) hash ^= DisplaySize.GetHashCode();
      if (HasOrderType) hash ^= OrderType.GetHashCode();
      if (HasLmtPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LmtPrice);
      if (HasAuxPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AuxPrice);
      if (HasTif) hash ^= Tif.GetHashCode();
      if (HasAccount) hash ^= Account.GetHashCode();
      if (HasSettlingFirm) hash ^= SettlingFirm.GetHashCode();
      if (HasClearingAccount) hash ^= ClearingAccount.GetHashCode();
      if (HasClearingIntent) hash ^= ClearingIntent.GetHashCode();
      if (HasAllOrNone) hash ^= AllOrNone.GetHashCode();
      if (HasBlockOrder) hash ^= BlockOrder.GetHashCode();
      if (HasHidden) hash ^= Hidden.GetHashCode();
      if (HasOutsideRth) hash ^= OutsideRth.GetHashCode();
      if (HasSweepToFill) hash ^= SweepToFill.GetHashCode();
      if (HasPercentOffset) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PercentOffset);
      if (HasTrailingPercent) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TrailingPercent);
      if (HasTrailStopPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TrailStopPrice);
      if (HasMinQty) hash ^= MinQty.GetHashCode();
      if (HasGoodAfterTime) hash ^= GoodAfterTime.GetHashCode();
      if (HasGoodTillDate) hash ^= GoodTillDate.GetHashCode();
      if (HasOcaGroup) hash ^= OcaGroup.GetHashCode();
      if (HasOrderRef) hash ^= OrderRef.GetHashCode();
      if (HasRule80A) hash ^= Rule80A.GetHashCode();
      if (HasOcaType) hash ^= OcaType.GetHashCode();
      if (HasTriggerMethod) hash ^= TriggerMethod.GetHashCode();
      if (HasActiveStartTime) hash ^= ActiveStartTime.GetHashCode();
      if (HasActiveStopTime) hash ^= ActiveStopTime.GetHashCode();
      if (HasFaGroup) hash ^= FaGroup.GetHashCode();
      if (HasFaMethod) hash ^= FaMethod.GetHashCode();
      if (HasFaPercentage) hash ^= FaPercentage.GetHashCode();
      if (HasVolatility) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Volatility);
      if (HasVolatilityType) hash ^= VolatilityType.GetHashCode();
      if (HasContinuousUpdate) hash ^= ContinuousUpdate.GetHashCode();
      if (HasReferencePriceType) hash ^= ReferencePriceType.GetHashCode();
      if (HasDeltaNeutralOrderType) hash ^= DeltaNeutralOrderType.GetHashCode();
      if (HasDeltaNeutralAuxPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DeltaNeutralAuxPrice);
      if (HasDeltaNeutralConId) hash ^= DeltaNeutralConId.GetHashCode();
      if (HasDeltaNeutralOpenClose) hash ^= DeltaNeutralOpenClose.GetHashCode();
      if (HasDeltaNeutralShortSale) hash ^= DeltaNeutralShortSale.GetHashCode();
      if (HasDeltaNeutralShortSaleSlot) hash ^= DeltaNeutralShortSaleSlot.GetHashCode();
      if (HasDeltaNeutralDesignatedLocation) hash ^= DeltaNeutralDesignatedLocation.GetHashCode();
      if (HasScaleInitLevelSize) hash ^= ScaleInitLevelSize.GetHashCode();
      if (HasScaleSubsLevelSize) hash ^= ScaleSubsLevelSize.GetHashCode();
      if (HasScalePriceIncrement) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ScalePriceIncrement);
      if (HasScalePriceAdjustValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ScalePriceAdjustValue);
      if (HasScalePriceAdjustInterval) hash ^= ScalePriceAdjustInterval.GetHashCode();
      if (HasScaleProfitOffset) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ScaleProfitOffset);
      if (HasScaleAutoReset) hash ^= ScaleAutoReset.GetHashCode();
      if (HasScaleInitPosition) hash ^= ScaleInitPosition.GetHashCode();
      if (HasScaleInitFillQty) hash ^= ScaleInitFillQty.GetHashCode();
      if (HasScaleRandomPercent) hash ^= ScaleRandomPercent.GetHashCode();
      if (HasScaleTable) hash ^= ScaleTable.GetHashCode();
      if (HasHedgeType) hash ^= HedgeType.GetHashCode();
      if (HasHedgeParam) hash ^= HedgeParam.GetHashCode();
      if (HasAlgoStrategy) hash ^= AlgoStrategy.GetHashCode();
      hash ^= AlgoParams.GetHashCode();
      if (HasAlgoId) hash ^= AlgoId.GetHashCode();
      hash ^= SmartComboRoutingParams.GetHashCode();
      if (HasWhatIf) hash ^= WhatIf.GetHashCode();
      if (HasTransmit) hash ^= Transmit.GetHashCode();
      if (HasOverridePercentageConstraints) hash ^= OverridePercentageConstraints.GetHashCode();
      if (HasOpenClose) hash ^= OpenClose.GetHashCode();
      if (HasOrigin) hash ^= Origin.GetHashCode();
      if (HasShortSaleSlot) hash ^= ShortSaleSlot.GetHashCode();
      if (HasDesignatedLocation) hash ^= DesignatedLocation.GetHashCode();
      if (HasExemptCode) hash ^= ExemptCode.GetHashCode();
      if (HasDeltaNeutralSettlingFirm) hash ^= DeltaNeutralSettlingFirm.GetHashCode();
      if (HasDeltaNeutralClearingAccount) hash ^= DeltaNeutralClearingAccount.GetHashCode();
      if (HasDeltaNeutralClearingIntent) hash ^= DeltaNeutralClearingIntent.GetHashCode();
      if (HasDiscretionaryAmt) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DiscretionaryAmt);
      if (HasOptOutSmartRouting) hash ^= OptOutSmartRouting.GetHashCode();
      if (HasStartingPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StartingPrice);
      if (HasStockRefPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StockRefPrice);
      if (HasDelta) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Delta);
      if (HasStockRangeLower) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StockRangeLower);
      if (HasStockRangeUpper) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StockRangeUpper);
      if (HasNotHeld) hash ^= NotHeld.GetHashCode();
      hash ^= OrderMiscOptions.GetHashCode();
      if (HasSolicited) hash ^= Solicited.GetHashCode();
      if (HasRandomizeSize) hash ^= RandomizeSize.GetHashCode();
      if (HasRandomizePrice) hash ^= RandomizePrice.GetHashCode();
      if (HasReferenceContractId) hash ^= ReferenceContractId.GetHashCode();
      if (HasPeggedChangeAmount) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PeggedChangeAmount);
      if (HasIsPeggedChangeAmountDecrease) hash ^= IsPeggedChangeAmountDecrease.GetHashCode();
      if (HasReferenceChangeAmount) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ReferenceChangeAmount);
      if (HasReferenceExchangeId) hash ^= ReferenceExchangeId.GetHashCode();
      if (HasAdjustedOrderType) hash ^= AdjustedOrderType.GetHashCode();
      if (HasTriggerPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TriggerPrice);
      if (HasAdjustedStopPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdjustedStopPrice);
      if (HasAdjustedStopLimitPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdjustedStopLimitPrice);
      if (HasAdjustedTrailingAmount) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdjustedTrailingAmount);
      if (HasAdjustableTrailingUnit) hash ^= AdjustableTrailingUnit.GetHashCode();
      if (HasLmtPriceOffset) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LmtPriceOffset);
      hash ^= conditions_.GetHashCode();
      if (HasConditionsCancelOrder) hash ^= ConditionsCancelOrder.GetHashCode();
      if (HasConditionsIgnoreRth) hash ^= ConditionsIgnoreRth.GetHashCode();
      if (HasModelCode) hash ^= ModelCode.GetHashCode();
      if (HasExtOperator) hash ^= ExtOperator.GetHashCode();
      if (softDollarTier_ != null) hash ^= SoftDollarTier.GetHashCode();
      if (HasCashQty) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CashQty);
      if (HasMifid2DecisionMaker) hash ^= Mifid2DecisionMaker.GetHashCode();
      if (HasMifid2DecisionAlgo) hash ^= Mifid2DecisionAlgo.GetHashCode();
      if (HasMifid2ExecutionTrader) hash ^= Mifid2ExecutionTrader.GetHashCode();
      if (HasMifid2ExecutionAlgo) hash ^= Mifid2ExecutionAlgo.GetHashCode();
      if (HasDontUseAutoPriceForHedge) hash ^= DontUseAutoPriceForHedge.GetHashCode();
      if (HasIsOmsContainer) hash ^= IsOmsContainer.GetHashCode();
      if (HasDiscretionaryUpToLimitPrice) hash ^= DiscretionaryUpToLimitPrice.GetHashCode();
      if (HasAutoCancelDate) hash ^= AutoCancelDate.GetHashCode();
      if (HasFilledQuantity) hash ^= FilledQuantity.GetHashCode();
      if (HasRefFuturesConId) hash ^= RefFuturesConId.GetHashCode();
      if (HasAutoCancelParent) hash ^= AutoCancelParent.GetHashCode();
      if (HasShareholder) hash ^= Shareholder.GetHashCode();
      if (HasImbalanceOnly) hash ^= ImbalanceOnly.GetHashCode();
      if (HasRouteMarketableToBbo) hash ^= RouteMarketableToBbo.GetHashCode();
      if (HasParentPermId) hash ^= ParentPermId.GetHashCode();
      if (HasUsePriceMgmtAlgo) hash ^= UsePriceMgmtAlgo.GetHashCode();
      if (HasDuration) hash ^= Duration.GetHashCode();
      if (HasPostToAts) hash ^= PostToAts.GetHashCode();
      if (HasAdvancedErrorOverride) hash ^= AdvancedErrorOverride.GetHashCode();
      if (HasManualOrderTime) hash ^= ManualOrderTime.GetHashCode();
      if (HasMinTradeQty) hash ^= MinTradeQty.GetHashCode();
      if (HasMinCompeteSize) hash ^= MinCompeteSize.GetHashCode();
      if (HasCompeteAgainstBestOffset) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CompeteAgainstBestOffset);
      if (HasMidOffsetAtWhole) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MidOffsetAtWhole);
      if (HasMidOffsetAtHalf) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MidOffsetAtHalf);
      if (HasCustomerAccount) hash ^= CustomerAccount.GetHashCode();
      if (HasProfessionalCustomer) hash ^= ProfessionalCustomer.GetHashCode();
      if (HasBondAccruedInterest) hash ^= BondAccruedInterest.GetHashCode();
      if (HasIncludeOvernight) hash ^= IncludeOvernight.GetHashCode();
      if (HasManualOrderIndicator) hash ^= ManualOrderIndicator.GetHashCode();
      if (HasSubmitter) hash ^= Submitter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasClientId) {
        output.WriteRawTag(8);
        output.WriteInt32(ClientId);
      }
      if (HasOrderId) {
        output.WriteRawTag(16);
        output.WriteInt32(OrderId);
      }
      if (HasPermId) {
        output.WriteRawTag(24);
        output.WriteInt64(PermId);
      }
      if (HasParentId) {
        output.WriteRawTag(32);
        output.WriteInt32(ParentId);
      }
      if (HasAction) {
        output.WriteRawTag(42);
        output.WriteString(Action);
      }
      if (HasTotalQuantity) {
        output.WriteRawTag(50);
        output.WriteString(TotalQuantity);
      }
      if (HasDisplaySize) {
        output.WriteRawTag(56);
        output.WriteInt32(DisplaySize);
      }
      if (HasOrderType) {
        output.WriteRawTag(66);
        output.WriteString(OrderType);
      }
      if (HasLmtPrice) {
        output.WriteRawTag(73);
        output.WriteDouble(LmtPrice);
      }
      if (HasAuxPrice) {
        output.WriteRawTag(81);
        output.WriteDouble(AuxPrice);
      }
      if (HasTif) {
        output.WriteRawTag(90);
        output.WriteString(Tif);
      }
      if (HasAccount) {
        output.WriteRawTag(98);
        output.WriteString(Account);
      }
      if (HasSettlingFirm) {
        output.WriteRawTag(106);
        output.WriteString(SettlingFirm);
      }
      if (HasClearingAccount) {
        output.WriteRawTag(114);
        output.WriteString(ClearingAccount);
      }
      if (HasClearingIntent) {
        output.WriteRawTag(122);
        output.WriteString(ClearingIntent);
      }
      if (HasAllOrNone) {
        output.WriteRawTag(128, 1);
        output.WriteBool(AllOrNone);
      }
      if (HasBlockOrder) {
        output.WriteRawTag(136, 1);
        output.WriteBool(BlockOrder);
      }
      if (HasHidden) {
        output.WriteRawTag(144, 1);
        output.WriteBool(Hidden);
      }
      if (HasOutsideRth) {
        output.WriteRawTag(152, 1);
        output.WriteBool(OutsideRth);
      }
      if (HasSweepToFill) {
        output.WriteRawTag(160, 1);
        output.WriteBool(SweepToFill);
      }
      if (HasPercentOffset) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(PercentOffset);
      }
      if (HasTrailingPercent) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(TrailingPercent);
      }
      if (HasTrailStopPrice) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(TrailStopPrice);
      }
      if (HasMinQty) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(MinQty);
      }
      if (HasGoodAfterTime) {
        output.WriteRawTag(202, 1);
        output.WriteString(GoodAfterTime);
      }
      if (HasGoodTillDate) {
        output.WriteRawTag(210, 1);
        output.WriteString(GoodTillDate);
      }
      if (HasOcaGroup) {
        output.WriteRawTag(218, 1);
        output.WriteString(OcaGroup);
      }
      if (HasOrderRef) {
        output.WriteRawTag(226, 1);
        output.WriteString(OrderRef);
      }
      if (HasRule80A) {
        output.WriteRawTag(234, 1);
        output.WriteString(Rule80A);
      }
      if (HasOcaType) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(OcaType);
      }
      if (HasTriggerMethod) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(TriggerMethod);
      }
      if (HasActiveStartTime) {
        output.WriteRawTag(130, 2);
        output.WriteString(ActiveStartTime);
      }
      if (HasActiveStopTime) {
        output.WriteRawTag(138, 2);
        output.WriteString(ActiveStopTime);
      }
      if (HasFaGroup) {
        output.WriteRawTag(146, 2);
        output.WriteString(FaGroup);
      }
      if (HasFaMethod) {
        output.WriteRawTag(154, 2);
        output.WriteString(FaMethod);
      }
      if (HasFaPercentage) {
        output.WriteRawTag(162, 2);
        output.WriteString(FaPercentage);
      }
      if (HasVolatility) {
        output.WriteRawTag(169, 2);
        output.WriteDouble(Volatility);
      }
      if (HasVolatilityType) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(VolatilityType);
      }
      if (HasContinuousUpdate) {
        output.WriteRawTag(184, 2);
        output.WriteBool(ContinuousUpdate);
      }
      if (HasReferencePriceType) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(ReferencePriceType);
      }
      if (HasDeltaNeutralOrderType) {
        output.WriteRawTag(202, 2);
        output.WriteString(DeltaNeutralOrderType);
      }
      if (HasDeltaNeutralAuxPrice) {
        output.WriteRawTag(209, 2);
        output.WriteDouble(DeltaNeutralAuxPrice);
      }
      if (HasDeltaNeutralConId) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(DeltaNeutralConId);
      }
      if (HasDeltaNeutralOpenClose) {
        output.WriteRawTag(226, 2);
        output.WriteString(DeltaNeutralOpenClose);
      }
      if (HasDeltaNeutralShortSale) {
        output.WriteRawTag(232, 2);
        output.WriteBool(DeltaNeutralShortSale);
      }
      if (HasDeltaNeutralShortSaleSlot) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(DeltaNeutralShortSaleSlot);
      }
      if (HasDeltaNeutralDesignatedLocation) {
        output.WriteRawTag(250, 2);
        output.WriteString(DeltaNeutralDesignatedLocation);
      }
      if (HasScaleInitLevelSize) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(ScaleInitLevelSize);
      }
      if (HasScaleSubsLevelSize) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(ScaleSubsLevelSize);
      }
      if (HasScalePriceIncrement) {
        output.WriteRawTag(145, 3);
        output.WriteDouble(ScalePriceIncrement);
      }
      if (HasScalePriceAdjustValue) {
        output.WriteRawTag(153, 3);
        output.WriteDouble(ScalePriceAdjustValue);
      }
      if (HasScalePriceAdjustInterval) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(ScalePriceAdjustInterval);
      }
      if (HasScaleProfitOffset) {
        output.WriteRawTag(169, 3);
        output.WriteDouble(ScaleProfitOffset);
      }
      if (HasScaleAutoReset) {
        output.WriteRawTag(176, 3);
        output.WriteBool(ScaleAutoReset);
      }
      if (HasScaleInitPosition) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(ScaleInitPosition);
      }
      if (HasScaleInitFillQty) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(ScaleInitFillQty);
      }
      if (HasScaleRandomPercent) {
        output.WriteRawTag(200, 3);
        output.WriteBool(ScaleRandomPercent);
      }
      if (HasScaleTable) {
        output.WriteRawTag(210, 3);
        output.WriteString(ScaleTable);
      }
      if (HasHedgeType) {
        output.WriteRawTag(218, 3);
        output.WriteString(HedgeType);
      }
      if (HasHedgeParam) {
        output.WriteRawTag(226, 3);
        output.WriteString(HedgeParam);
      }
      if (HasAlgoStrategy) {
        output.WriteRawTag(234, 3);
        output.WriteString(AlgoStrategy);
      }
      algoParams_.WriteTo(output, _map_algoParams_codec);
      if (HasAlgoId) {
        output.WriteRawTag(250, 3);
        output.WriteString(AlgoId);
      }
      smartComboRoutingParams_.WriteTo(output, _map_smartComboRoutingParams_codec);
      if (HasWhatIf) {
        output.WriteRawTag(136, 4);
        output.WriteBool(WhatIf);
      }
      if (HasTransmit) {
        output.WriteRawTag(144, 4);
        output.WriteBool(Transmit);
      }
      if (HasOverridePercentageConstraints) {
        output.WriteRawTag(152, 4);
        output.WriteBool(OverridePercentageConstraints);
      }
      if (HasOpenClose) {
        output.WriteRawTag(162, 4);
        output.WriteString(OpenClose);
      }
      if (HasOrigin) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(Origin);
      }
      if (HasShortSaleSlot) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(ShortSaleSlot);
      }
      if (HasDesignatedLocation) {
        output.WriteRawTag(186, 4);
        output.WriteString(DesignatedLocation);
      }
      if (HasExemptCode) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(ExemptCode);
      }
      if (HasDeltaNeutralSettlingFirm) {
        output.WriteRawTag(202, 4);
        output.WriteString(DeltaNeutralSettlingFirm);
      }
      if (HasDeltaNeutralClearingAccount) {
        output.WriteRawTag(210, 4);
        output.WriteString(DeltaNeutralClearingAccount);
      }
      if (HasDeltaNeutralClearingIntent) {
        output.WriteRawTag(218, 4);
        output.WriteString(DeltaNeutralClearingIntent);
      }
      if (HasDiscretionaryAmt) {
        output.WriteRawTag(225, 4);
        output.WriteDouble(DiscretionaryAmt);
      }
      if (HasOptOutSmartRouting) {
        output.WriteRawTag(232, 4);
        output.WriteBool(OptOutSmartRouting);
      }
      if (HasStartingPrice) {
        output.WriteRawTag(241, 4);
        output.WriteDouble(StartingPrice);
      }
      if (HasStockRefPrice) {
        output.WriteRawTag(249, 4);
        output.WriteDouble(StockRefPrice);
      }
      if (HasDelta) {
        output.WriteRawTag(129, 5);
        output.WriteDouble(Delta);
      }
      if (HasStockRangeLower) {
        output.WriteRawTag(137, 5);
        output.WriteDouble(StockRangeLower);
      }
      if (HasStockRangeUpper) {
        output.WriteRawTag(145, 5);
        output.WriteDouble(StockRangeUpper);
      }
      if (HasNotHeld) {
        output.WriteRawTag(152, 5);
        output.WriteBool(NotHeld);
      }
      orderMiscOptions_.WriteTo(output, _map_orderMiscOptions_codec);
      if (HasSolicited) {
        output.WriteRawTag(168, 5);
        output.WriteBool(Solicited);
      }
      if (HasRandomizeSize) {
        output.WriteRawTag(176, 5);
        output.WriteBool(RandomizeSize);
      }
      if (HasRandomizePrice) {
        output.WriteRawTag(184, 5);
        output.WriteBool(RandomizePrice);
      }
      if (HasReferenceContractId) {
        output.WriteRawTag(192, 5);
        output.WriteInt32(ReferenceContractId);
      }
      if (HasPeggedChangeAmount) {
        output.WriteRawTag(201, 5);
        output.WriteDouble(PeggedChangeAmount);
      }
      if (HasIsPeggedChangeAmountDecrease) {
        output.WriteRawTag(208, 5);
        output.WriteBool(IsPeggedChangeAmountDecrease);
      }
      if (HasReferenceChangeAmount) {
        output.WriteRawTag(217, 5);
        output.WriteDouble(ReferenceChangeAmount);
      }
      if (HasReferenceExchangeId) {
        output.WriteRawTag(226, 5);
        output.WriteString(ReferenceExchangeId);
      }
      if (HasAdjustedOrderType) {
        output.WriteRawTag(234, 5);
        output.WriteString(AdjustedOrderType);
      }
      if (HasTriggerPrice) {
        output.WriteRawTag(241, 5);
        output.WriteDouble(TriggerPrice);
      }
      if (HasAdjustedStopPrice) {
        output.WriteRawTag(249, 5);
        output.WriteDouble(AdjustedStopPrice);
      }
      if (HasAdjustedStopLimitPrice) {
        output.WriteRawTag(129, 6);
        output.WriteDouble(AdjustedStopLimitPrice);
      }
      if (HasAdjustedTrailingAmount) {
        output.WriteRawTag(137, 6);
        output.WriteDouble(AdjustedTrailingAmount);
      }
      if (HasAdjustableTrailingUnit) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(AdjustableTrailingUnit);
      }
      if (HasLmtPriceOffset) {
        output.WriteRawTag(153, 6);
        output.WriteDouble(LmtPriceOffset);
      }
      conditions_.WriteTo(output, _repeated_conditions_codec);
      if (HasConditionsCancelOrder) {
        output.WriteRawTag(168, 6);
        output.WriteBool(ConditionsCancelOrder);
      }
      if (HasConditionsIgnoreRth) {
        output.WriteRawTag(176, 6);
        output.WriteBool(ConditionsIgnoreRth);
      }
      if (HasModelCode) {
        output.WriteRawTag(186, 6);
        output.WriteString(ModelCode);
      }
      if (HasExtOperator) {
        output.WriteRawTag(194, 6);
        output.WriteString(ExtOperator);
      }
      if (softDollarTier_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(SoftDollarTier);
      }
      if (HasCashQty) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(CashQty);
      }
      if (HasMifid2DecisionMaker) {
        output.WriteRawTag(218, 6);
        output.WriteString(Mifid2DecisionMaker);
      }
      if (HasMifid2DecisionAlgo) {
        output.WriteRawTag(226, 6);
        output.WriteString(Mifid2DecisionAlgo);
      }
      if (HasMifid2ExecutionTrader) {
        output.WriteRawTag(234, 6);
        output.WriteString(Mifid2ExecutionTrader);
      }
      if (HasMifid2ExecutionAlgo) {
        output.WriteRawTag(242, 6);
        output.WriteString(Mifid2ExecutionAlgo);
      }
      if (HasDontUseAutoPriceForHedge) {
        output.WriteRawTag(248, 6);
        output.WriteBool(DontUseAutoPriceForHedge);
      }
      if (HasIsOmsContainer) {
        output.WriteRawTag(128, 7);
        output.WriteBool(IsOmsContainer);
      }
      if (HasDiscretionaryUpToLimitPrice) {
        output.WriteRawTag(136, 7);
        output.WriteBool(DiscretionaryUpToLimitPrice);
      }
      if (HasAutoCancelDate) {
        output.WriteRawTag(146, 7);
        output.WriteString(AutoCancelDate);
      }
      if (HasFilledQuantity) {
        output.WriteRawTag(154, 7);
        output.WriteString(FilledQuantity);
      }
      if (HasRefFuturesConId) {
        output.WriteRawTag(160, 7);
        output.WriteInt32(RefFuturesConId);
      }
      if (HasAutoCancelParent) {
        output.WriteRawTag(168, 7);
        output.WriteBool(AutoCancelParent);
      }
      if (HasShareholder) {
        output.WriteRawTag(178, 7);
        output.WriteString(Shareholder);
      }
      if (HasImbalanceOnly) {
        output.WriteRawTag(184, 7);
        output.WriteBool(ImbalanceOnly);
      }
      if (HasRouteMarketableToBbo) {
        output.WriteRawTag(192, 7);
        output.WriteBool(RouteMarketableToBbo);
      }
      if (HasParentPermId) {
        output.WriteRawTag(200, 7);
        output.WriteInt64(ParentPermId);
      }
      if (HasUsePriceMgmtAlgo) {
        output.WriteRawTag(208, 7);
        output.WriteInt32(UsePriceMgmtAlgo);
      }
      if (HasDuration) {
        output.WriteRawTag(216, 7);
        output.WriteInt32(Duration);
      }
      if (HasPostToAts) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(PostToAts);
      }
      if (HasAdvancedErrorOverride) {
        output.WriteRawTag(234, 7);
        output.WriteString(AdvancedErrorOverride);
      }
      if (HasManualOrderTime) {
        output.WriteRawTag(242, 7);
        output.WriteString(ManualOrderTime);
      }
      if (HasMinTradeQty) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(MinTradeQty);
      }
      if (HasMinCompeteSize) {
        output.WriteRawTag(128, 8);
        output.WriteInt32(MinCompeteSize);
      }
      if (HasCompeteAgainstBestOffset) {
        output.WriteRawTag(137, 8);
        output.WriteDouble(CompeteAgainstBestOffset);
      }
      if (HasMidOffsetAtWhole) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(MidOffsetAtWhole);
      }
      if (HasMidOffsetAtHalf) {
        output.WriteRawTag(153, 8);
        output.WriteDouble(MidOffsetAtHalf);
      }
      if (HasCustomerAccount) {
        output.WriteRawTag(162, 8);
        output.WriteString(CustomerAccount);
      }
      if (HasProfessionalCustomer) {
        output.WriteRawTag(168, 8);
        output.WriteBool(ProfessionalCustomer);
      }
      if (HasBondAccruedInterest) {
        output.WriteRawTag(178, 8);
        output.WriteString(BondAccruedInterest);
      }
      if (HasIncludeOvernight) {
        output.WriteRawTag(184, 8);
        output.WriteBool(IncludeOvernight);
      }
      if (HasManualOrderIndicator) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(ManualOrderIndicator);
      }
      if (HasSubmitter) {
        output.WriteRawTag(202, 8);
        output.WriteString(Submitter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasClientId) {
        output.WriteRawTag(8);
        output.WriteInt32(ClientId);
      }
      if (HasOrderId) {
        output.WriteRawTag(16);
        output.WriteInt32(OrderId);
      }
      if (HasPermId) {
        output.WriteRawTag(24);
        output.WriteInt64(PermId);
      }
      if (HasParentId) {
        output.WriteRawTag(32);
        output.WriteInt32(ParentId);
      }
      if (HasAction) {
        output.WriteRawTag(42);
        output.WriteString(Action);
      }
      if (HasTotalQuantity) {
        output.WriteRawTag(50);
        output.WriteString(TotalQuantity);
      }
      if (HasDisplaySize) {
        output.WriteRawTag(56);
        output.WriteInt32(DisplaySize);
      }
      if (HasOrderType) {
        output.WriteRawTag(66);
        output.WriteString(OrderType);
      }
      if (HasLmtPrice) {
        output.WriteRawTag(73);
        output.WriteDouble(LmtPrice);
      }
      if (HasAuxPrice) {
        output.WriteRawTag(81);
        output.WriteDouble(AuxPrice);
      }
      if (HasTif) {
        output.WriteRawTag(90);
        output.WriteString(Tif);
      }
      if (HasAccount) {
        output.WriteRawTag(98);
        output.WriteString(Account);
      }
      if (HasSettlingFirm) {
        output.WriteRawTag(106);
        output.WriteString(SettlingFirm);
      }
      if (HasClearingAccount) {
        output.WriteRawTag(114);
        output.WriteString(ClearingAccount);
      }
      if (HasClearingIntent) {
        output.WriteRawTag(122);
        output.WriteString(ClearingIntent);
      }
      if (HasAllOrNone) {
        output.WriteRawTag(128, 1);
        output.WriteBool(AllOrNone);
      }
      if (HasBlockOrder) {
        output.WriteRawTag(136, 1);
        output.WriteBool(BlockOrder);
      }
      if (HasHidden) {
        output.WriteRawTag(144, 1);
        output.WriteBool(Hidden);
      }
      if (HasOutsideRth) {
        output.WriteRawTag(152, 1);
        output.WriteBool(OutsideRth);
      }
      if (HasSweepToFill) {
        output.WriteRawTag(160, 1);
        output.WriteBool(SweepToFill);
      }
      if (HasPercentOffset) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(PercentOffset);
      }
      if (HasTrailingPercent) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(TrailingPercent);
      }
      if (HasTrailStopPrice) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(TrailStopPrice);
      }
      if (HasMinQty) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(MinQty);
      }
      if (HasGoodAfterTime) {
        output.WriteRawTag(202, 1);
        output.WriteString(GoodAfterTime);
      }
      if (HasGoodTillDate) {
        output.WriteRawTag(210, 1);
        output.WriteString(GoodTillDate);
      }
      if (HasOcaGroup) {
        output.WriteRawTag(218, 1);
        output.WriteString(OcaGroup);
      }
      if (HasOrderRef) {
        output.WriteRawTag(226, 1);
        output.WriteString(OrderRef);
      }
      if (HasRule80A) {
        output.WriteRawTag(234, 1);
        output.WriteString(Rule80A);
      }
      if (HasOcaType) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(OcaType);
      }
      if (HasTriggerMethod) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(TriggerMethod);
      }
      if (HasActiveStartTime) {
        output.WriteRawTag(130, 2);
        output.WriteString(ActiveStartTime);
      }
      if (HasActiveStopTime) {
        output.WriteRawTag(138, 2);
        output.WriteString(ActiveStopTime);
      }
      if (HasFaGroup) {
        output.WriteRawTag(146, 2);
        output.WriteString(FaGroup);
      }
      if (HasFaMethod) {
        output.WriteRawTag(154, 2);
        output.WriteString(FaMethod);
      }
      if (HasFaPercentage) {
        output.WriteRawTag(162, 2);
        output.WriteString(FaPercentage);
      }
      if (HasVolatility) {
        output.WriteRawTag(169, 2);
        output.WriteDouble(Volatility);
      }
      if (HasVolatilityType) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(VolatilityType);
      }
      if (HasContinuousUpdate) {
        output.WriteRawTag(184, 2);
        output.WriteBool(ContinuousUpdate);
      }
      if (HasReferencePriceType) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(ReferencePriceType);
      }
      if (HasDeltaNeutralOrderType) {
        output.WriteRawTag(202, 2);
        output.WriteString(DeltaNeutralOrderType);
      }
      if (HasDeltaNeutralAuxPrice) {
        output.WriteRawTag(209, 2);
        output.WriteDouble(DeltaNeutralAuxPrice);
      }
      if (HasDeltaNeutralConId) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(DeltaNeutralConId);
      }
      if (HasDeltaNeutralOpenClose) {
        output.WriteRawTag(226, 2);
        output.WriteString(DeltaNeutralOpenClose);
      }
      if (HasDeltaNeutralShortSale) {
        output.WriteRawTag(232, 2);
        output.WriteBool(DeltaNeutralShortSale);
      }
      if (HasDeltaNeutralShortSaleSlot) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(DeltaNeutralShortSaleSlot);
      }
      if (HasDeltaNeutralDesignatedLocation) {
        output.WriteRawTag(250, 2);
        output.WriteString(DeltaNeutralDesignatedLocation);
      }
      if (HasScaleInitLevelSize) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(ScaleInitLevelSize);
      }
      if (HasScaleSubsLevelSize) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(ScaleSubsLevelSize);
      }
      if (HasScalePriceIncrement) {
        output.WriteRawTag(145, 3);
        output.WriteDouble(ScalePriceIncrement);
      }
      if (HasScalePriceAdjustValue) {
        output.WriteRawTag(153, 3);
        output.WriteDouble(ScalePriceAdjustValue);
      }
      if (HasScalePriceAdjustInterval) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(ScalePriceAdjustInterval);
      }
      if (HasScaleProfitOffset) {
        output.WriteRawTag(169, 3);
        output.WriteDouble(ScaleProfitOffset);
      }
      if (HasScaleAutoReset) {
        output.WriteRawTag(176, 3);
        output.WriteBool(ScaleAutoReset);
      }
      if (HasScaleInitPosition) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(ScaleInitPosition);
      }
      if (HasScaleInitFillQty) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(ScaleInitFillQty);
      }
      if (HasScaleRandomPercent) {
        output.WriteRawTag(200, 3);
        output.WriteBool(ScaleRandomPercent);
      }
      if (HasScaleTable) {
        output.WriteRawTag(210, 3);
        output.WriteString(ScaleTable);
      }
      if (HasHedgeType) {
        output.WriteRawTag(218, 3);
        output.WriteString(HedgeType);
      }
      if (HasHedgeParam) {
        output.WriteRawTag(226, 3);
        output.WriteString(HedgeParam);
      }
      if (HasAlgoStrategy) {
        output.WriteRawTag(234, 3);
        output.WriteString(AlgoStrategy);
      }
      algoParams_.WriteTo(ref output, _map_algoParams_codec);
      if (HasAlgoId) {
        output.WriteRawTag(250, 3);
        output.WriteString(AlgoId);
      }
      smartComboRoutingParams_.WriteTo(ref output, _map_smartComboRoutingParams_codec);
      if (HasWhatIf) {
        output.WriteRawTag(136, 4);
        output.WriteBool(WhatIf);
      }
      if (HasTransmit) {
        output.WriteRawTag(144, 4);
        output.WriteBool(Transmit);
      }
      if (HasOverridePercentageConstraints) {
        output.WriteRawTag(152, 4);
        output.WriteBool(OverridePercentageConstraints);
      }
      if (HasOpenClose) {
        output.WriteRawTag(162, 4);
        output.WriteString(OpenClose);
      }
      if (HasOrigin) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(Origin);
      }
      if (HasShortSaleSlot) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(ShortSaleSlot);
      }
      if (HasDesignatedLocation) {
        output.WriteRawTag(186, 4);
        output.WriteString(DesignatedLocation);
      }
      if (HasExemptCode) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(ExemptCode);
      }
      if (HasDeltaNeutralSettlingFirm) {
        output.WriteRawTag(202, 4);
        output.WriteString(DeltaNeutralSettlingFirm);
      }
      if (HasDeltaNeutralClearingAccount) {
        output.WriteRawTag(210, 4);
        output.WriteString(DeltaNeutralClearingAccount);
      }
      if (HasDeltaNeutralClearingIntent) {
        output.WriteRawTag(218, 4);
        output.WriteString(DeltaNeutralClearingIntent);
      }
      if (HasDiscretionaryAmt) {
        output.WriteRawTag(225, 4);
        output.WriteDouble(DiscretionaryAmt);
      }
      if (HasOptOutSmartRouting) {
        output.WriteRawTag(232, 4);
        output.WriteBool(OptOutSmartRouting);
      }
      if (HasStartingPrice) {
        output.WriteRawTag(241, 4);
        output.WriteDouble(StartingPrice);
      }
      if (HasStockRefPrice) {
        output.WriteRawTag(249, 4);
        output.WriteDouble(StockRefPrice);
      }
      if (HasDelta) {
        output.WriteRawTag(129, 5);
        output.WriteDouble(Delta);
      }
      if (HasStockRangeLower) {
        output.WriteRawTag(137, 5);
        output.WriteDouble(StockRangeLower);
      }
      if (HasStockRangeUpper) {
        output.WriteRawTag(145, 5);
        output.WriteDouble(StockRangeUpper);
      }
      if (HasNotHeld) {
        output.WriteRawTag(152, 5);
        output.WriteBool(NotHeld);
      }
      orderMiscOptions_.WriteTo(ref output, _map_orderMiscOptions_codec);
      if (HasSolicited) {
        output.WriteRawTag(168, 5);
        output.WriteBool(Solicited);
      }
      if (HasRandomizeSize) {
        output.WriteRawTag(176, 5);
        output.WriteBool(RandomizeSize);
      }
      if (HasRandomizePrice) {
        output.WriteRawTag(184, 5);
        output.WriteBool(RandomizePrice);
      }
      if (HasReferenceContractId) {
        output.WriteRawTag(192, 5);
        output.WriteInt32(ReferenceContractId);
      }
      if (HasPeggedChangeAmount) {
        output.WriteRawTag(201, 5);
        output.WriteDouble(PeggedChangeAmount);
      }
      if (HasIsPeggedChangeAmountDecrease) {
        output.WriteRawTag(208, 5);
        output.WriteBool(IsPeggedChangeAmountDecrease);
      }
      if (HasReferenceChangeAmount) {
        output.WriteRawTag(217, 5);
        output.WriteDouble(ReferenceChangeAmount);
      }
      if (HasReferenceExchangeId) {
        output.WriteRawTag(226, 5);
        output.WriteString(ReferenceExchangeId);
      }
      if (HasAdjustedOrderType) {
        output.WriteRawTag(234, 5);
        output.WriteString(AdjustedOrderType);
      }
      if (HasTriggerPrice) {
        output.WriteRawTag(241, 5);
        output.WriteDouble(TriggerPrice);
      }
      if (HasAdjustedStopPrice) {
        output.WriteRawTag(249, 5);
        output.WriteDouble(AdjustedStopPrice);
      }
      if (HasAdjustedStopLimitPrice) {
        output.WriteRawTag(129, 6);
        output.WriteDouble(AdjustedStopLimitPrice);
      }
      if (HasAdjustedTrailingAmount) {
        output.WriteRawTag(137, 6);
        output.WriteDouble(AdjustedTrailingAmount);
      }
      if (HasAdjustableTrailingUnit) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(AdjustableTrailingUnit);
      }
      if (HasLmtPriceOffset) {
        output.WriteRawTag(153, 6);
        output.WriteDouble(LmtPriceOffset);
      }
      conditions_.WriteTo(ref output, _repeated_conditions_codec);
      if (HasConditionsCancelOrder) {
        output.WriteRawTag(168, 6);
        output.WriteBool(ConditionsCancelOrder);
      }
      if (HasConditionsIgnoreRth) {
        output.WriteRawTag(176, 6);
        output.WriteBool(ConditionsIgnoreRth);
      }
      if (HasModelCode) {
        output.WriteRawTag(186, 6);
        output.WriteString(ModelCode);
      }
      if (HasExtOperator) {
        output.WriteRawTag(194, 6);
        output.WriteString(ExtOperator);
      }
      if (softDollarTier_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(SoftDollarTier);
      }
      if (HasCashQty) {
        output.WriteRawTag(209, 6);
        output.WriteDouble(CashQty);
      }
      if (HasMifid2DecisionMaker) {
        output.WriteRawTag(218, 6);
        output.WriteString(Mifid2DecisionMaker);
      }
      if (HasMifid2DecisionAlgo) {
        output.WriteRawTag(226, 6);
        output.WriteString(Mifid2DecisionAlgo);
      }
      if (HasMifid2ExecutionTrader) {
        output.WriteRawTag(234, 6);
        output.WriteString(Mifid2ExecutionTrader);
      }
      if (HasMifid2ExecutionAlgo) {
        output.WriteRawTag(242, 6);
        output.WriteString(Mifid2ExecutionAlgo);
      }
      if (HasDontUseAutoPriceForHedge) {
        output.WriteRawTag(248, 6);
        output.WriteBool(DontUseAutoPriceForHedge);
      }
      if (HasIsOmsContainer) {
        output.WriteRawTag(128, 7);
        output.WriteBool(IsOmsContainer);
      }
      if (HasDiscretionaryUpToLimitPrice) {
        output.WriteRawTag(136, 7);
        output.WriteBool(DiscretionaryUpToLimitPrice);
      }
      if (HasAutoCancelDate) {
        output.WriteRawTag(146, 7);
        output.WriteString(AutoCancelDate);
      }
      if (HasFilledQuantity) {
        output.WriteRawTag(154, 7);
        output.WriteString(FilledQuantity);
      }
      if (HasRefFuturesConId) {
        output.WriteRawTag(160, 7);
        output.WriteInt32(RefFuturesConId);
      }
      if (HasAutoCancelParent) {
        output.WriteRawTag(168, 7);
        output.WriteBool(AutoCancelParent);
      }
      if (HasShareholder) {
        output.WriteRawTag(178, 7);
        output.WriteString(Shareholder);
      }
      if (HasImbalanceOnly) {
        output.WriteRawTag(184, 7);
        output.WriteBool(ImbalanceOnly);
      }
      if (HasRouteMarketableToBbo) {
        output.WriteRawTag(192, 7);
        output.WriteBool(RouteMarketableToBbo);
      }
      if (HasParentPermId) {
        output.WriteRawTag(200, 7);
        output.WriteInt64(ParentPermId);
      }
      if (HasUsePriceMgmtAlgo) {
        output.WriteRawTag(208, 7);
        output.WriteInt32(UsePriceMgmtAlgo);
      }
      if (HasDuration) {
        output.WriteRawTag(216, 7);
        output.WriteInt32(Duration);
      }
      if (HasPostToAts) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(PostToAts);
      }
      if (HasAdvancedErrorOverride) {
        output.WriteRawTag(234, 7);
        output.WriteString(AdvancedErrorOverride);
      }
      if (HasManualOrderTime) {
        output.WriteRawTag(242, 7);
        output.WriteString(ManualOrderTime);
      }
      if (HasMinTradeQty) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(MinTradeQty);
      }
      if (HasMinCompeteSize) {
        output.WriteRawTag(128, 8);
        output.WriteInt32(MinCompeteSize);
      }
      if (HasCompeteAgainstBestOffset) {
        output.WriteRawTag(137, 8);
        output.WriteDouble(CompeteAgainstBestOffset);
      }
      if (HasMidOffsetAtWhole) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(MidOffsetAtWhole);
      }
      if (HasMidOffsetAtHalf) {
        output.WriteRawTag(153, 8);
        output.WriteDouble(MidOffsetAtHalf);
      }
      if (HasCustomerAccount) {
        output.WriteRawTag(162, 8);
        output.WriteString(CustomerAccount);
      }
      if (HasProfessionalCustomer) {
        output.WriteRawTag(168, 8);
        output.WriteBool(ProfessionalCustomer);
      }
      if (HasBondAccruedInterest) {
        output.WriteRawTag(178, 8);
        output.WriteString(BondAccruedInterest);
      }
      if (HasIncludeOvernight) {
        output.WriteRawTag(184, 8);
        output.WriteBool(IncludeOvernight);
      }
      if (HasManualOrderIndicator) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(ManualOrderIndicator);
      }
      if (HasSubmitter) {
        output.WriteRawTag(202, 8);
        output.WriteString(Submitter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasClientId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientId);
      }
      if (HasOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderId);
      }
      if (HasPermId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PermId);
      }
      if (HasParentId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentId);
      }
      if (HasAction) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (HasTotalQuantity) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TotalQuantity);
      }
      if (HasDisplaySize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisplaySize);
      }
      if (HasOrderType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderType);
      }
      if (HasLmtPrice) {
        size += 1 + 8;
      }
      if (HasAuxPrice) {
        size += 1 + 8;
      }
      if (HasTif) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tif);
      }
      if (HasAccount) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (HasSettlingFirm) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettlingFirm);
      }
      if (HasClearingAccount) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClearingAccount);
      }
      if (HasClearingIntent) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClearingIntent);
      }
      if (HasAllOrNone) {
        size += 2 + 1;
      }
      if (HasBlockOrder) {
        size += 2 + 1;
      }
      if (HasHidden) {
        size += 2 + 1;
      }
      if (HasOutsideRth) {
        size += 2 + 1;
      }
      if (HasSweepToFill) {
        size += 2 + 1;
      }
      if (HasPercentOffset) {
        size += 2 + 8;
      }
      if (HasTrailingPercent) {
        size += 2 + 8;
      }
      if (HasTrailStopPrice) {
        size += 2 + 8;
      }
      if (HasMinQty) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinQty);
      }
      if (HasGoodAfterTime) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GoodAfterTime);
      }
      if (HasGoodTillDate) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GoodTillDate);
      }
      if (HasOcaGroup) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OcaGroup);
      }
      if (HasOrderRef) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderRef);
      }
      if (HasRule80A) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Rule80A);
      }
      if (HasOcaType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OcaType);
      }
      if (HasTriggerMethod) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TriggerMethod);
      }
      if (HasActiveStartTime) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ActiveStartTime);
      }
      if (HasActiveStopTime) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ActiveStopTime);
      }
      if (HasFaGroup) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FaGroup);
      }
      if (HasFaMethod) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FaMethod);
      }
      if (HasFaPercentage) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FaPercentage);
      }
      if (HasVolatility) {
        size += 2 + 8;
      }
      if (HasVolatilityType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VolatilityType);
      }
      if (HasContinuousUpdate) {
        size += 2 + 1;
      }
      if (HasReferencePriceType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReferencePriceType);
      }
      if (HasDeltaNeutralOrderType) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeltaNeutralOrderType);
      }
      if (HasDeltaNeutralAuxPrice) {
        size += 2 + 8;
      }
      if (HasDeltaNeutralConId) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeltaNeutralConId);
      }
      if (HasDeltaNeutralOpenClose) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeltaNeutralOpenClose);
      }
      if (HasDeltaNeutralShortSale) {
        size += 2 + 1;
      }
      if (HasDeltaNeutralShortSaleSlot) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeltaNeutralShortSaleSlot);
      }
      if (HasDeltaNeutralDesignatedLocation) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeltaNeutralDesignatedLocation);
      }
      if (HasScaleInitLevelSize) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ScaleInitLevelSize);
      }
      if (HasScaleSubsLevelSize) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ScaleSubsLevelSize);
      }
      if (HasScalePriceIncrement) {
        size += 2 + 8;
      }
      if (HasScalePriceAdjustValue) {
        size += 2 + 8;
      }
      if (HasScalePriceAdjustInterval) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ScalePriceAdjustInterval);
      }
      if (HasScaleProfitOffset) {
        size += 2 + 8;
      }
      if (HasScaleAutoReset) {
        size += 2 + 1;
      }
      if (HasScaleInitPosition) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ScaleInitPosition);
      }
      if (HasScaleInitFillQty) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ScaleInitFillQty);
      }
      if (HasScaleRandomPercent) {
        size += 2 + 1;
      }
      if (HasScaleTable) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ScaleTable);
      }
      if (HasHedgeType) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HedgeType);
      }
      if (HasHedgeParam) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HedgeParam);
      }
      if (HasAlgoStrategy) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AlgoStrategy);
      }
      size += algoParams_.CalculateSize(_map_algoParams_codec);
      if (HasAlgoId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AlgoId);
      }
      size += smartComboRoutingParams_.CalculateSize(_map_smartComboRoutingParams_codec);
      if (HasWhatIf) {
        size += 2 + 1;
      }
      if (HasTransmit) {
        size += 2 + 1;
      }
      if (HasOverridePercentageConstraints) {
        size += 2 + 1;
      }
      if (HasOpenClose) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OpenClose);
      }
      if (HasOrigin) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Origin);
      }
      if (HasShortSaleSlot) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShortSaleSlot);
      }
      if (HasDesignatedLocation) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DesignatedLocation);
      }
      if (HasExemptCode) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExemptCode);
      }
      if (HasDeltaNeutralSettlingFirm) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeltaNeutralSettlingFirm);
      }
      if (HasDeltaNeutralClearingAccount) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeltaNeutralClearingAccount);
      }
      if (HasDeltaNeutralClearingIntent) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeltaNeutralClearingIntent);
      }
      if (HasDiscretionaryAmt) {
        size += 2 + 8;
      }
      if (HasOptOutSmartRouting) {
        size += 2 + 1;
      }
      if (HasStartingPrice) {
        size += 2 + 8;
      }
      if (HasStockRefPrice) {
        size += 2 + 8;
      }
      if (HasDelta) {
        size += 2 + 8;
      }
      if (HasStockRangeLower) {
        size += 2 + 8;
      }
      if (HasStockRangeUpper) {
        size += 2 + 8;
      }
      if (HasNotHeld) {
        size += 2 + 1;
      }
      size += orderMiscOptions_.CalculateSize(_map_orderMiscOptions_codec);
      if (HasSolicited) {
        size += 2 + 1;
      }
      if (HasRandomizeSize) {
        size += 2 + 1;
      }
      if (HasRandomizePrice) {
        size += 2 + 1;
      }
      if (HasReferenceContractId) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReferenceContractId);
      }
      if (HasPeggedChangeAmount) {
        size += 2 + 8;
      }
      if (HasIsPeggedChangeAmountDecrease) {
        size += 2 + 1;
      }
      if (HasReferenceChangeAmount) {
        size += 2 + 8;
      }
      if (HasReferenceExchangeId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReferenceExchangeId);
      }
      if (HasAdjustedOrderType) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AdjustedOrderType);
      }
      if (HasTriggerPrice) {
        size += 2 + 8;
      }
      if (HasAdjustedStopPrice) {
        size += 2 + 8;
      }
      if (HasAdjustedStopLimitPrice) {
        size += 2 + 8;
      }
      if (HasAdjustedTrailingAmount) {
        size += 2 + 8;
      }
      if (HasAdjustableTrailingUnit) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AdjustableTrailingUnit);
      }
      if (HasLmtPriceOffset) {
        size += 2 + 8;
      }
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      if (HasConditionsCancelOrder) {
        size += 2 + 1;
      }
      if (HasConditionsIgnoreRth) {
        size += 2 + 1;
      }
      if (HasModelCode) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModelCode);
      }
      if (HasExtOperator) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExtOperator);
      }
      if (softDollarTier_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SoftDollarTier);
      }
      if (HasCashQty) {
        size += 2 + 8;
      }
      if (HasMifid2DecisionMaker) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Mifid2DecisionMaker);
      }
      if (HasMifid2DecisionAlgo) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Mifid2DecisionAlgo);
      }
      if (HasMifid2ExecutionTrader) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Mifid2ExecutionTrader);
      }
      if (HasMifid2ExecutionAlgo) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Mifid2ExecutionAlgo);
      }
      if (HasDontUseAutoPriceForHedge) {
        size += 2 + 1;
      }
      if (HasIsOmsContainer) {
        size += 2 + 1;
      }
      if (HasDiscretionaryUpToLimitPrice) {
        size += 2 + 1;
      }
      if (HasAutoCancelDate) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AutoCancelDate);
      }
      if (HasFilledQuantity) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FilledQuantity);
      }
      if (HasRefFuturesConId) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RefFuturesConId);
      }
      if (HasAutoCancelParent) {
        size += 2 + 1;
      }
      if (HasShareholder) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Shareholder);
      }
      if (HasImbalanceOnly) {
        size += 2 + 1;
      }
      if (HasRouteMarketableToBbo) {
        size += 2 + 1;
      }
      if (HasParentPermId) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ParentPermId);
      }
      if (HasUsePriceMgmtAlgo) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UsePriceMgmtAlgo);
      }
      if (HasDuration) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (HasPostToAts) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PostToAts);
      }
      if (HasAdvancedErrorOverride) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AdvancedErrorOverride);
      }
      if (HasManualOrderTime) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ManualOrderTime);
      }
      if (HasMinTradeQty) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinTradeQty);
      }
      if (HasMinCompeteSize) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinCompeteSize);
      }
      if (HasCompeteAgainstBestOffset) {
        size += 2 + 8;
      }
      if (HasMidOffsetAtWhole) {
        size += 2 + 8;
      }
      if (HasMidOffsetAtHalf) {
        size += 2 + 8;
      }
      if (HasCustomerAccount) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CustomerAccount);
      }
      if (HasProfessionalCustomer) {
        size += 2 + 1;
      }
      if (HasBondAccruedInterest) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BondAccruedInterest);
      }
      if (HasIncludeOvernight) {
        size += 2 + 1;
      }
      if (HasManualOrderIndicator) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ManualOrderIndicator);
      }
      if (HasSubmitter) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Submitter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Order other) {
      if (other == null) {
        return;
      }
      if (other.HasClientId) {
        ClientId = other.ClientId;
      }
      if (other.HasOrderId) {
        OrderId = other.OrderId;
      }
      if (other.HasPermId) {
        PermId = other.PermId;
      }
      if (other.HasParentId) {
        ParentId = other.ParentId;
      }
      if (other.HasAction) {
        Action = other.Action;
      }
      if (other.HasTotalQuantity) {
        TotalQuantity = other.TotalQuantity;
      }
      if (other.HasDisplaySize) {
        DisplaySize = other.DisplaySize;
      }
      if (other.HasOrderType) {
        OrderType = other.OrderType;
      }
      if (other.HasLmtPrice) {
        LmtPrice = other.LmtPrice;
      }
      if (other.HasAuxPrice) {
        AuxPrice = other.AuxPrice;
      }
      if (other.HasTif) {
        Tif = other.Tif;
      }
      if (other.HasAccount) {
        Account = other.Account;
      }
      if (other.HasSettlingFirm) {
        SettlingFirm = other.SettlingFirm;
      }
      if (other.HasClearingAccount) {
        ClearingAccount = other.ClearingAccount;
      }
      if (other.HasClearingIntent) {
        ClearingIntent = other.ClearingIntent;
      }
      if (other.HasAllOrNone) {
        AllOrNone = other.AllOrNone;
      }
      if (other.HasBlockOrder) {
        BlockOrder = other.BlockOrder;
      }
      if (other.HasHidden) {
        Hidden = other.Hidden;
      }
      if (other.HasOutsideRth) {
        OutsideRth = other.OutsideRth;
      }
      if (other.HasSweepToFill) {
        SweepToFill = other.SweepToFill;
      }
      if (other.HasPercentOffset) {
        PercentOffset = other.PercentOffset;
      }
      if (other.HasTrailingPercent) {
        TrailingPercent = other.TrailingPercent;
      }
      if (other.HasTrailStopPrice) {
        TrailStopPrice = other.TrailStopPrice;
      }
      if (other.HasMinQty) {
        MinQty = other.MinQty;
      }
      if (other.HasGoodAfterTime) {
        GoodAfterTime = other.GoodAfterTime;
      }
      if (other.HasGoodTillDate) {
        GoodTillDate = other.GoodTillDate;
      }
      if (other.HasOcaGroup) {
        OcaGroup = other.OcaGroup;
      }
      if (other.HasOrderRef) {
        OrderRef = other.OrderRef;
      }
      if (other.HasRule80A) {
        Rule80A = other.Rule80A;
      }
      if (other.HasOcaType) {
        OcaType = other.OcaType;
      }
      if (other.HasTriggerMethod) {
        TriggerMethod = other.TriggerMethod;
      }
      if (other.HasActiveStartTime) {
        ActiveStartTime = other.ActiveStartTime;
      }
      if (other.HasActiveStopTime) {
        ActiveStopTime = other.ActiveStopTime;
      }
      if (other.HasFaGroup) {
        FaGroup = other.FaGroup;
      }
      if (other.HasFaMethod) {
        FaMethod = other.FaMethod;
      }
      if (other.HasFaPercentage) {
        FaPercentage = other.FaPercentage;
      }
      if (other.HasVolatility) {
        Volatility = other.Volatility;
      }
      if (other.HasVolatilityType) {
        VolatilityType = other.VolatilityType;
      }
      if (other.HasContinuousUpdate) {
        ContinuousUpdate = other.ContinuousUpdate;
      }
      if (other.HasReferencePriceType) {
        ReferencePriceType = other.ReferencePriceType;
      }
      if (other.HasDeltaNeutralOrderType) {
        DeltaNeutralOrderType = other.DeltaNeutralOrderType;
      }
      if (other.HasDeltaNeutralAuxPrice) {
        DeltaNeutralAuxPrice = other.DeltaNeutralAuxPrice;
      }
      if (other.HasDeltaNeutralConId) {
        DeltaNeutralConId = other.DeltaNeutralConId;
      }
      if (other.HasDeltaNeutralOpenClose) {
        DeltaNeutralOpenClose = other.DeltaNeutralOpenClose;
      }
      if (other.HasDeltaNeutralShortSale) {
        DeltaNeutralShortSale = other.DeltaNeutralShortSale;
      }
      if (other.HasDeltaNeutralShortSaleSlot) {
        DeltaNeutralShortSaleSlot = other.DeltaNeutralShortSaleSlot;
      }
      if (other.HasDeltaNeutralDesignatedLocation) {
        DeltaNeutralDesignatedLocation = other.DeltaNeutralDesignatedLocation;
      }
      if (other.HasScaleInitLevelSize) {
        ScaleInitLevelSize = other.ScaleInitLevelSize;
      }
      if (other.HasScaleSubsLevelSize) {
        ScaleSubsLevelSize = other.ScaleSubsLevelSize;
      }
      if (other.HasScalePriceIncrement) {
        ScalePriceIncrement = other.ScalePriceIncrement;
      }
      if (other.HasScalePriceAdjustValue) {
        ScalePriceAdjustValue = other.ScalePriceAdjustValue;
      }
      if (other.HasScalePriceAdjustInterval) {
        ScalePriceAdjustInterval = other.ScalePriceAdjustInterval;
      }
      if (other.HasScaleProfitOffset) {
        ScaleProfitOffset = other.ScaleProfitOffset;
      }
      if (other.HasScaleAutoReset) {
        ScaleAutoReset = other.ScaleAutoReset;
      }
      if (other.HasScaleInitPosition) {
        ScaleInitPosition = other.ScaleInitPosition;
      }
      if (other.HasScaleInitFillQty) {
        ScaleInitFillQty = other.ScaleInitFillQty;
      }
      if (other.HasScaleRandomPercent) {
        ScaleRandomPercent = other.ScaleRandomPercent;
      }
      if (other.HasScaleTable) {
        ScaleTable = other.ScaleTable;
      }
      if (other.HasHedgeType) {
        HedgeType = other.HedgeType;
      }
      if (other.HasHedgeParam) {
        HedgeParam = other.HedgeParam;
      }
      if (other.HasAlgoStrategy) {
        AlgoStrategy = other.AlgoStrategy;
      }
      algoParams_.MergeFrom(other.algoParams_);
      if (other.HasAlgoId) {
        AlgoId = other.AlgoId;
      }
      smartComboRoutingParams_.MergeFrom(other.smartComboRoutingParams_);
      if (other.HasWhatIf) {
        WhatIf = other.WhatIf;
      }
      if (other.HasTransmit) {
        Transmit = other.Transmit;
      }
      if (other.HasOverridePercentageConstraints) {
        OverridePercentageConstraints = other.OverridePercentageConstraints;
      }
      if (other.HasOpenClose) {
        OpenClose = other.OpenClose;
      }
      if (other.HasOrigin) {
        Origin = other.Origin;
      }
      if (other.HasShortSaleSlot) {
        ShortSaleSlot = other.ShortSaleSlot;
      }
      if (other.HasDesignatedLocation) {
        DesignatedLocation = other.DesignatedLocation;
      }
      if (other.HasExemptCode) {
        ExemptCode = other.ExemptCode;
      }
      if (other.HasDeltaNeutralSettlingFirm) {
        DeltaNeutralSettlingFirm = other.DeltaNeutralSettlingFirm;
      }
      if (other.HasDeltaNeutralClearingAccount) {
        DeltaNeutralClearingAccount = other.DeltaNeutralClearingAccount;
      }
      if (other.HasDeltaNeutralClearingIntent) {
        DeltaNeutralClearingIntent = other.DeltaNeutralClearingIntent;
      }
      if (other.HasDiscretionaryAmt) {
        DiscretionaryAmt = other.DiscretionaryAmt;
      }
      if (other.HasOptOutSmartRouting) {
        OptOutSmartRouting = other.OptOutSmartRouting;
      }
      if (other.HasStartingPrice) {
        StartingPrice = other.StartingPrice;
      }
      if (other.HasStockRefPrice) {
        StockRefPrice = other.StockRefPrice;
      }
      if (other.HasDelta) {
        Delta = other.Delta;
      }
      if (other.HasStockRangeLower) {
        StockRangeLower = other.StockRangeLower;
      }
      if (other.HasStockRangeUpper) {
        StockRangeUpper = other.StockRangeUpper;
      }
      if (other.HasNotHeld) {
        NotHeld = other.NotHeld;
      }
      orderMiscOptions_.MergeFrom(other.orderMiscOptions_);
      if (other.HasSolicited) {
        Solicited = other.Solicited;
      }
      if (other.HasRandomizeSize) {
        RandomizeSize = other.RandomizeSize;
      }
      if (other.HasRandomizePrice) {
        RandomizePrice = other.RandomizePrice;
      }
      if (other.HasReferenceContractId) {
        ReferenceContractId = other.ReferenceContractId;
      }
      if (other.HasPeggedChangeAmount) {
        PeggedChangeAmount = other.PeggedChangeAmount;
      }
      if (other.HasIsPeggedChangeAmountDecrease) {
        IsPeggedChangeAmountDecrease = other.IsPeggedChangeAmountDecrease;
      }
      if (other.HasReferenceChangeAmount) {
        ReferenceChangeAmount = other.ReferenceChangeAmount;
      }
      if (other.HasReferenceExchangeId) {
        ReferenceExchangeId = other.ReferenceExchangeId;
      }
      if (other.HasAdjustedOrderType) {
        AdjustedOrderType = other.AdjustedOrderType;
      }
      if (other.HasTriggerPrice) {
        TriggerPrice = other.TriggerPrice;
      }
      if (other.HasAdjustedStopPrice) {
        AdjustedStopPrice = other.AdjustedStopPrice;
      }
      if (other.HasAdjustedStopLimitPrice) {
        AdjustedStopLimitPrice = other.AdjustedStopLimitPrice;
      }
      if (other.HasAdjustedTrailingAmount) {
        AdjustedTrailingAmount = other.AdjustedTrailingAmount;
      }
      if (other.HasAdjustableTrailingUnit) {
        AdjustableTrailingUnit = other.AdjustableTrailingUnit;
      }
      if (other.HasLmtPriceOffset) {
        LmtPriceOffset = other.LmtPriceOffset;
      }
      conditions_.Add(other.conditions_);
      if (other.HasConditionsCancelOrder) {
        ConditionsCancelOrder = other.ConditionsCancelOrder;
      }
      if (other.HasConditionsIgnoreRth) {
        ConditionsIgnoreRth = other.ConditionsIgnoreRth;
      }
      if (other.HasModelCode) {
        ModelCode = other.ModelCode;
      }
      if (other.HasExtOperator) {
        ExtOperator = other.ExtOperator;
      }
      if (other.softDollarTier_ != null) {
        if (softDollarTier_ == null) {
          SoftDollarTier = new global::IBApi.protobuf.SoftDollarTier();
        }
        SoftDollarTier.MergeFrom(other.SoftDollarTier);
      }
      if (other.HasCashQty) {
        CashQty = other.CashQty;
      }
      if (other.HasMifid2DecisionMaker) {
        Mifid2DecisionMaker = other.Mifid2DecisionMaker;
      }
      if (other.HasMifid2DecisionAlgo) {
        Mifid2DecisionAlgo = other.Mifid2DecisionAlgo;
      }
      if (other.HasMifid2ExecutionTrader) {
        Mifid2ExecutionTrader = other.Mifid2ExecutionTrader;
      }
      if (other.HasMifid2ExecutionAlgo) {
        Mifid2ExecutionAlgo = other.Mifid2ExecutionAlgo;
      }
      if (other.HasDontUseAutoPriceForHedge) {
        DontUseAutoPriceForHedge = other.DontUseAutoPriceForHedge;
      }
      if (other.HasIsOmsContainer) {
        IsOmsContainer = other.IsOmsContainer;
      }
      if (other.HasDiscretionaryUpToLimitPrice) {
        DiscretionaryUpToLimitPrice = other.DiscretionaryUpToLimitPrice;
      }
      if (other.HasAutoCancelDate) {
        AutoCancelDate = other.AutoCancelDate;
      }
      if (other.HasFilledQuantity) {
        FilledQuantity = other.FilledQuantity;
      }
      if (other.HasRefFuturesConId) {
        RefFuturesConId = other.RefFuturesConId;
      }
      if (other.HasAutoCancelParent) {
        AutoCancelParent = other.AutoCancelParent;
      }
      if (other.HasShareholder) {
        Shareholder = other.Shareholder;
      }
      if (other.HasImbalanceOnly) {
        ImbalanceOnly = other.ImbalanceOnly;
      }
      if (other.HasRouteMarketableToBbo) {
        RouteMarketableToBbo = other.RouteMarketableToBbo;
      }
      if (other.HasParentPermId) {
        ParentPermId = other.ParentPermId;
      }
      if (other.HasUsePriceMgmtAlgo) {
        UsePriceMgmtAlgo = other.UsePriceMgmtAlgo;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasPostToAts) {
        PostToAts = other.PostToAts;
      }
      if (other.HasAdvancedErrorOverride) {
        AdvancedErrorOverride = other.AdvancedErrorOverride;
      }
      if (other.HasManualOrderTime) {
        ManualOrderTime = other.ManualOrderTime;
      }
      if (other.HasMinTradeQty) {
        MinTradeQty = other.MinTradeQty;
      }
      if (other.HasMinCompeteSize) {
        MinCompeteSize = other.MinCompeteSize;
      }
      if (other.HasCompeteAgainstBestOffset) {
        CompeteAgainstBestOffset = other.CompeteAgainstBestOffset;
      }
      if (other.HasMidOffsetAtWhole) {
        MidOffsetAtWhole = other.MidOffsetAtWhole;
      }
      if (other.HasMidOffsetAtHalf) {
        MidOffsetAtHalf = other.MidOffsetAtHalf;
      }
      if (other.HasCustomerAccount) {
        CustomerAccount = other.CustomerAccount;
      }
      if (other.HasProfessionalCustomer) {
        ProfessionalCustomer = other.ProfessionalCustomer;
      }
      if (other.HasBondAccruedInterest) {
        BondAccruedInterest = other.BondAccruedInterest;
      }
      if (other.HasIncludeOvernight) {
        IncludeOvernight = other.IncludeOvernight;
      }
      if (other.HasManualOrderIndicator) {
        ManualOrderIndicator = other.ManualOrderIndicator;
      }
      if (other.HasSubmitter) {
        Submitter = other.Submitter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClientId = input.ReadInt32();
            break;
          }
          case 16: {
            OrderId = input.ReadInt32();
            break;
          }
          case 24: {
            PermId = input.ReadInt64();
            break;
          }
          case 32: {
            ParentId = input.ReadInt32();
            break;
          }
          case 42: {
            Action = input.ReadString();
            break;
          }
          case 50: {
            TotalQuantity = input.ReadString();
            break;
          }
          case 56: {
            DisplaySize = input.ReadInt32();
            break;
          }
          case 66: {
            OrderType = input.ReadString();
            break;
          }
          case 73: {
            LmtPrice = input.ReadDouble();
            break;
          }
          case 81: {
            AuxPrice = input.ReadDouble();
            break;
          }
          case 90: {
            Tif = input.ReadString();
            break;
          }
          case 98: {
            Account = input.ReadString();
            break;
          }
          case 106: {
            SettlingFirm = input.ReadString();
            break;
          }
          case 114: {
            ClearingAccount = input.ReadString();
            break;
          }
          case 122: {
            ClearingIntent = input.ReadString();
            break;
          }
          case 128: {
            AllOrNone = input.ReadBool();
            break;
          }
          case 136: {
            BlockOrder = input.ReadBool();
            break;
          }
          case 144: {
            Hidden = input.ReadBool();
            break;
          }
          case 152: {
            OutsideRth = input.ReadBool();
            break;
          }
          case 160: {
            SweepToFill = input.ReadBool();
            break;
          }
          case 169: {
            PercentOffset = input.ReadDouble();
            break;
          }
          case 177: {
            TrailingPercent = input.ReadDouble();
            break;
          }
          case 185: {
            TrailStopPrice = input.ReadDouble();
            break;
          }
          case 192: {
            MinQty = input.ReadInt32();
            break;
          }
          case 202: {
            GoodAfterTime = input.ReadString();
            break;
          }
          case 210: {
            GoodTillDate = input.ReadString();
            break;
          }
          case 218: {
            OcaGroup = input.ReadString();
            break;
          }
          case 226: {
            OrderRef = input.ReadString();
            break;
          }
          case 234: {
            Rule80A = input.ReadString();
            break;
          }
          case 240: {
            OcaType = input.ReadInt32();
            break;
          }
          case 248: {
            TriggerMethod = input.ReadInt32();
            break;
          }
          case 258: {
            ActiveStartTime = input.ReadString();
            break;
          }
          case 266: {
            ActiveStopTime = input.ReadString();
            break;
          }
          case 274: {
            FaGroup = input.ReadString();
            break;
          }
          case 282: {
            FaMethod = input.ReadString();
            break;
          }
          case 290: {
            FaPercentage = input.ReadString();
            break;
          }
          case 297: {
            Volatility = input.ReadDouble();
            break;
          }
          case 304: {
            VolatilityType = input.ReadInt32();
            break;
          }
          case 312: {
            ContinuousUpdate = input.ReadBool();
            break;
          }
          case 320: {
            ReferencePriceType = input.ReadInt32();
            break;
          }
          case 330: {
            DeltaNeutralOrderType = input.ReadString();
            break;
          }
          case 337: {
            DeltaNeutralAuxPrice = input.ReadDouble();
            break;
          }
          case 344: {
            DeltaNeutralConId = input.ReadInt32();
            break;
          }
          case 354: {
            DeltaNeutralOpenClose = input.ReadString();
            break;
          }
          case 360: {
            DeltaNeutralShortSale = input.ReadBool();
            break;
          }
          case 368: {
            DeltaNeutralShortSaleSlot = input.ReadInt32();
            break;
          }
          case 378: {
            DeltaNeutralDesignatedLocation = input.ReadString();
            break;
          }
          case 384: {
            ScaleInitLevelSize = input.ReadInt32();
            break;
          }
          case 392: {
            ScaleSubsLevelSize = input.ReadInt32();
            break;
          }
          case 401: {
            ScalePriceIncrement = input.ReadDouble();
            break;
          }
          case 409: {
            ScalePriceAdjustValue = input.ReadDouble();
            break;
          }
          case 416: {
            ScalePriceAdjustInterval = input.ReadInt32();
            break;
          }
          case 425: {
            ScaleProfitOffset = input.ReadDouble();
            break;
          }
          case 432: {
            ScaleAutoReset = input.ReadBool();
            break;
          }
          case 440: {
            ScaleInitPosition = input.ReadInt32();
            break;
          }
          case 448: {
            ScaleInitFillQty = input.ReadInt32();
            break;
          }
          case 456: {
            ScaleRandomPercent = input.ReadBool();
            break;
          }
          case 466: {
            ScaleTable = input.ReadString();
            break;
          }
          case 474: {
            HedgeType = input.ReadString();
            break;
          }
          case 482: {
            HedgeParam = input.ReadString();
            break;
          }
          case 490: {
            AlgoStrategy = input.ReadString();
            break;
          }
          case 498: {
            algoParams_.AddEntriesFrom(input, _map_algoParams_codec);
            break;
          }
          case 506: {
            AlgoId = input.ReadString();
            break;
          }
          case 514: {
            smartComboRoutingParams_.AddEntriesFrom(input, _map_smartComboRoutingParams_codec);
            break;
          }
          case 520: {
            WhatIf = input.ReadBool();
            break;
          }
          case 528: {
            Transmit = input.ReadBool();
            break;
          }
          case 536: {
            OverridePercentageConstraints = input.ReadBool();
            break;
          }
          case 546: {
            OpenClose = input.ReadString();
            break;
          }
          case 552: {
            Origin = input.ReadInt32();
            break;
          }
          case 560: {
            ShortSaleSlot = input.ReadInt32();
            break;
          }
          case 570: {
            DesignatedLocation = input.ReadString();
            break;
          }
          case 576: {
            ExemptCode = input.ReadInt32();
            break;
          }
          case 586: {
            DeltaNeutralSettlingFirm = input.ReadString();
            break;
          }
          case 594: {
            DeltaNeutralClearingAccount = input.ReadString();
            break;
          }
          case 602: {
            DeltaNeutralClearingIntent = input.ReadString();
            break;
          }
          case 609: {
            DiscretionaryAmt = input.ReadDouble();
            break;
          }
          case 616: {
            OptOutSmartRouting = input.ReadBool();
            break;
          }
          case 625: {
            StartingPrice = input.ReadDouble();
            break;
          }
          case 633: {
            StockRefPrice = input.ReadDouble();
            break;
          }
          case 641: {
            Delta = input.ReadDouble();
            break;
          }
          case 649: {
            StockRangeLower = input.ReadDouble();
            break;
          }
          case 657: {
            StockRangeUpper = input.ReadDouble();
            break;
          }
          case 664: {
            NotHeld = input.ReadBool();
            break;
          }
          case 674: {
            orderMiscOptions_.AddEntriesFrom(input, _map_orderMiscOptions_codec);
            break;
          }
          case 680: {
            Solicited = input.ReadBool();
            break;
          }
          case 688: {
            RandomizeSize = input.ReadBool();
            break;
          }
          case 696: {
            RandomizePrice = input.ReadBool();
            break;
          }
          case 704: {
            ReferenceContractId = input.ReadInt32();
            break;
          }
          case 713: {
            PeggedChangeAmount = input.ReadDouble();
            break;
          }
          case 720: {
            IsPeggedChangeAmountDecrease = input.ReadBool();
            break;
          }
          case 729: {
            ReferenceChangeAmount = input.ReadDouble();
            break;
          }
          case 738: {
            ReferenceExchangeId = input.ReadString();
            break;
          }
          case 746: {
            AdjustedOrderType = input.ReadString();
            break;
          }
          case 753: {
            TriggerPrice = input.ReadDouble();
            break;
          }
          case 761: {
            AdjustedStopPrice = input.ReadDouble();
            break;
          }
          case 769: {
            AdjustedStopLimitPrice = input.ReadDouble();
            break;
          }
          case 777: {
            AdjustedTrailingAmount = input.ReadDouble();
            break;
          }
          case 784: {
            AdjustableTrailingUnit = input.ReadInt32();
            break;
          }
          case 793: {
            LmtPriceOffset = input.ReadDouble();
            break;
          }
          case 802: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
          case 808: {
            ConditionsCancelOrder = input.ReadBool();
            break;
          }
          case 816: {
            ConditionsIgnoreRth = input.ReadBool();
            break;
          }
          case 826: {
            ModelCode = input.ReadString();
            break;
          }
          case 834: {
            ExtOperator = input.ReadString();
            break;
          }
          case 842: {
            if (softDollarTier_ == null) {
              SoftDollarTier = new global::IBApi.protobuf.SoftDollarTier();
            }
            input.ReadMessage(SoftDollarTier);
            break;
          }
          case 849: {
            CashQty = input.ReadDouble();
            break;
          }
          case 858: {
            Mifid2DecisionMaker = input.ReadString();
            break;
          }
          case 866: {
            Mifid2DecisionAlgo = input.ReadString();
            break;
          }
          case 874: {
            Mifid2ExecutionTrader = input.ReadString();
            break;
          }
          case 882: {
            Mifid2ExecutionAlgo = input.ReadString();
            break;
          }
          case 888: {
            DontUseAutoPriceForHedge = input.ReadBool();
            break;
          }
          case 896: {
            IsOmsContainer = input.ReadBool();
            break;
          }
          case 904: {
            DiscretionaryUpToLimitPrice = input.ReadBool();
            break;
          }
          case 914: {
            AutoCancelDate = input.ReadString();
            break;
          }
          case 922: {
            FilledQuantity = input.ReadString();
            break;
          }
          case 928: {
            RefFuturesConId = input.ReadInt32();
            break;
          }
          case 936: {
            AutoCancelParent = input.ReadBool();
            break;
          }
          case 946: {
            Shareholder = input.ReadString();
            break;
          }
          case 952: {
            ImbalanceOnly = input.ReadBool();
            break;
          }
          case 960: {
            RouteMarketableToBbo = input.ReadBool();
            break;
          }
          case 968: {
            ParentPermId = input.ReadInt64();
            break;
          }
          case 976: {
            UsePriceMgmtAlgo = input.ReadInt32();
            break;
          }
          case 984: {
            Duration = input.ReadInt32();
            break;
          }
          case 992: {
            PostToAts = input.ReadInt32();
            break;
          }
          case 1002: {
            AdvancedErrorOverride = input.ReadString();
            break;
          }
          case 1010: {
            ManualOrderTime = input.ReadString();
            break;
          }
          case 1016: {
            MinTradeQty = input.ReadInt32();
            break;
          }
          case 1024: {
            MinCompeteSize = input.ReadInt32();
            break;
          }
          case 1033: {
            CompeteAgainstBestOffset = input.ReadDouble();
            break;
          }
          case 1041: {
            MidOffsetAtWhole = input.ReadDouble();
            break;
          }
          case 1049: {
            MidOffsetAtHalf = input.ReadDouble();
            break;
          }
          case 1058: {
            CustomerAccount = input.ReadString();
            break;
          }
          case 1064: {
            ProfessionalCustomer = input.ReadBool();
            break;
          }
          case 1074: {
            BondAccruedInterest = input.ReadString();
            break;
          }
          case 1080: {
            IncludeOvernight = input.ReadBool();
            break;
          }
          case 1088: {
            ManualOrderIndicator = input.ReadInt32();
            break;
          }
          case 1098: {
            Submitter = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ClientId = input.ReadInt32();
            break;
          }
          case 16: {
            OrderId = input.ReadInt32();
            break;
          }
          case 24: {
            PermId = input.ReadInt64();
            break;
          }
          case 32: {
            ParentId = input.ReadInt32();
            break;
          }
          case 42: {
            Action = input.ReadString();
            break;
          }
          case 50: {
            TotalQuantity = input.ReadString();
            break;
          }
          case 56: {
            DisplaySize = input.ReadInt32();
            break;
          }
          case 66: {
            OrderType = input.ReadString();
            break;
          }
          case 73: {
            LmtPrice = input.ReadDouble();
            break;
          }
          case 81: {
            AuxPrice = input.ReadDouble();
            break;
          }
          case 90: {
            Tif = input.ReadString();
            break;
          }
          case 98: {
            Account = input.ReadString();
            break;
          }
          case 106: {
            SettlingFirm = input.ReadString();
            break;
          }
          case 114: {
            ClearingAccount = input.ReadString();
            break;
          }
          case 122: {
            ClearingIntent = input.ReadString();
            break;
          }
          case 128: {
            AllOrNone = input.ReadBool();
            break;
          }
          case 136: {
            BlockOrder = input.ReadBool();
            break;
          }
          case 144: {
            Hidden = input.ReadBool();
            break;
          }
          case 152: {
            OutsideRth = input.ReadBool();
            break;
          }
          case 160: {
            SweepToFill = input.ReadBool();
            break;
          }
          case 169: {
            PercentOffset = input.ReadDouble();
            break;
          }
          case 177: {
            TrailingPercent = input.ReadDouble();
            break;
          }
          case 185: {
            TrailStopPrice = input.ReadDouble();
            break;
          }
          case 192: {
            MinQty = input.ReadInt32();
            break;
          }
          case 202: {
            GoodAfterTime = input.ReadString();
            break;
          }
          case 210: {
            GoodTillDate = input.ReadString();
            break;
          }
          case 218: {
            OcaGroup = input.ReadString();
            break;
          }
          case 226: {
            OrderRef = input.ReadString();
            break;
          }
          case 234: {
            Rule80A = input.ReadString();
            break;
          }
          case 240: {
            OcaType = input.ReadInt32();
            break;
          }
          case 248: {
            TriggerMethod = input.ReadInt32();
            break;
          }
          case 258: {
            ActiveStartTime = input.ReadString();
            break;
          }
          case 266: {
            ActiveStopTime = input.ReadString();
            break;
          }
          case 274: {
            FaGroup = input.ReadString();
            break;
          }
          case 282: {
            FaMethod = input.ReadString();
            break;
          }
          case 290: {
            FaPercentage = input.ReadString();
            break;
          }
          case 297: {
            Volatility = input.ReadDouble();
            break;
          }
          case 304: {
            VolatilityType = input.ReadInt32();
            break;
          }
          case 312: {
            ContinuousUpdate = input.ReadBool();
            break;
          }
          case 320: {
            ReferencePriceType = input.ReadInt32();
            break;
          }
          case 330: {
            DeltaNeutralOrderType = input.ReadString();
            break;
          }
          case 337: {
            DeltaNeutralAuxPrice = input.ReadDouble();
            break;
          }
          case 344: {
            DeltaNeutralConId = input.ReadInt32();
            break;
          }
          case 354: {
            DeltaNeutralOpenClose = input.ReadString();
            break;
          }
          case 360: {
            DeltaNeutralShortSale = input.ReadBool();
            break;
          }
          case 368: {
            DeltaNeutralShortSaleSlot = input.ReadInt32();
            break;
          }
          case 378: {
            DeltaNeutralDesignatedLocation = input.ReadString();
            break;
          }
          case 384: {
            ScaleInitLevelSize = input.ReadInt32();
            break;
          }
          case 392: {
            ScaleSubsLevelSize = input.ReadInt32();
            break;
          }
          case 401: {
            ScalePriceIncrement = input.ReadDouble();
            break;
          }
          case 409: {
            ScalePriceAdjustValue = input.ReadDouble();
            break;
          }
          case 416: {
            ScalePriceAdjustInterval = input.ReadInt32();
            break;
          }
          case 425: {
            ScaleProfitOffset = input.ReadDouble();
            break;
          }
          case 432: {
            ScaleAutoReset = input.ReadBool();
            break;
          }
          case 440: {
            ScaleInitPosition = input.ReadInt32();
            break;
          }
          case 448: {
            ScaleInitFillQty = input.ReadInt32();
            break;
          }
          case 456: {
            ScaleRandomPercent = input.ReadBool();
            break;
          }
          case 466: {
            ScaleTable = input.ReadString();
            break;
          }
          case 474: {
            HedgeType = input.ReadString();
            break;
          }
          case 482: {
            HedgeParam = input.ReadString();
            break;
          }
          case 490: {
            AlgoStrategy = input.ReadString();
            break;
          }
          case 498: {
            algoParams_.AddEntriesFrom(ref input, _map_algoParams_codec);
            break;
          }
          case 506: {
            AlgoId = input.ReadString();
            break;
          }
          case 514: {
            smartComboRoutingParams_.AddEntriesFrom(ref input, _map_smartComboRoutingParams_codec);
            break;
          }
          case 520: {
            WhatIf = input.ReadBool();
            break;
          }
          case 528: {
            Transmit = input.ReadBool();
            break;
          }
          case 536: {
            OverridePercentageConstraints = input.ReadBool();
            break;
          }
          case 546: {
            OpenClose = input.ReadString();
            break;
          }
          case 552: {
            Origin = input.ReadInt32();
            break;
          }
          case 560: {
            ShortSaleSlot = input.ReadInt32();
            break;
          }
          case 570: {
            DesignatedLocation = input.ReadString();
            break;
          }
          case 576: {
            ExemptCode = input.ReadInt32();
            break;
          }
          case 586: {
            DeltaNeutralSettlingFirm = input.ReadString();
            break;
          }
          case 594: {
            DeltaNeutralClearingAccount = input.ReadString();
            break;
          }
          case 602: {
            DeltaNeutralClearingIntent = input.ReadString();
            break;
          }
          case 609: {
            DiscretionaryAmt = input.ReadDouble();
            break;
          }
          case 616: {
            OptOutSmartRouting = input.ReadBool();
            break;
          }
          case 625: {
            StartingPrice = input.ReadDouble();
            break;
          }
          case 633: {
            StockRefPrice = input.ReadDouble();
            break;
          }
          case 641: {
            Delta = input.ReadDouble();
            break;
          }
          case 649: {
            StockRangeLower = input.ReadDouble();
            break;
          }
          case 657: {
            StockRangeUpper = input.ReadDouble();
            break;
          }
          case 664: {
            NotHeld = input.ReadBool();
            break;
          }
          case 674: {
            orderMiscOptions_.AddEntriesFrom(ref input, _map_orderMiscOptions_codec);
            break;
          }
          case 680: {
            Solicited = input.ReadBool();
            break;
          }
          case 688: {
            RandomizeSize = input.ReadBool();
            break;
          }
          case 696: {
            RandomizePrice = input.ReadBool();
            break;
          }
          case 704: {
            ReferenceContractId = input.ReadInt32();
            break;
          }
          case 713: {
            PeggedChangeAmount = input.ReadDouble();
            break;
          }
          case 720: {
            IsPeggedChangeAmountDecrease = input.ReadBool();
            break;
          }
          case 729: {
            ReferenceChangeAmount = input.ReadDouble();
            break;
          }
          case 738: {
            ReferenceExchangeId = input.ReadString();
            break;
          }
          case 746: {
            AdjustedOrderType = input.ReadString();
            break;
          }
          case 753: {
            TriggerPrice = input.ReadDouble();
            break;
          }
          case 761: {
            AdjustedStopPrice = input.ReadDouble();
            break;
          }
          case 769: {
            AdjustedStopLimitPrice = input.ReadDouble();
            break;
          }
          case 777: {
            AdjustedTrailingAmount = input.ReadDouble();
            break;
          }
          case 784: {
            AdjustableTrailingUnit = input.ReadInt32();
            break;
          }
          case 793: {
            LmtPriceOffset = input.ReadDouble();
            break;
          }
          case 802: {
            conditions_.AddEntriesFrom(ref input, _repeated_conditions_codec);
            break;
          }
          case 808: {
            ConditionsCancelOrder = input.ReadBool();
            break;
          }
          case 816: {
            ConditionsIgnoreRth = input.ReadBool();
            break;
          }
          case 826: {
            ModelCode = input.ReadString();
            break;
          }
          case 834: {
            ExtOperator = input.ReadString();
            break;
          }
          case 842: {
            if (softDollarTier_ == null) {
              SoftDollarTier = new global::IBApi.protobuf.SoftDollarTier();
            }
            input.ReadMessage(SoftDollarTier);
            break;
          }
          case 849: {
            CashQty = input.ReadDouble();
            break;
          }
          case 858: {
            Mifid2DecisionMaker = input.ReadString();
            break;
          }
          case 866: {
            Mifid2DecisionAlgo = input.ReadString();
            break;
          }
          case 874: {
            Mifid2ExecutionTrader = input.ReadString();
            break;
          }
          case 882: {
            Mifid2ExecutionAlgo = input.ReadString();
            break;
          }
          case 888: {
            DontUseAutoPriceForHedge = input.ReadBool();
            break;
          }
          case 896: {
            IsOmsContainer = input.ReadBool();
            break;
          }
          case 904: {
            DiscretionaryUpToLimitPrice = input.ReadBool();
            break;
          }
          case 914: {
            AutoCancelDate = input.ReadString();
            break;
          }
          case 922: {
            FilledQuantity = input.ReadString();
            break;
          }
          case 928: {
            RefFuturesConId = input.ReadInt32();
            break;
          }
          case 936: {
            AutoCancelParent = input.ReadBool();
            break;
          }
          case 946: {
            Shareholder = input.ReadString();
            break;
          }
          case 952: {
            ImbalanceOnly = input.ReadBool();
            break;
          }
          case 960: {
            RouteMarketableToBbo = input.ReadBool();
            break;
          }
          case 968: {
            ParentPermId = input.ReadInt64();
            break;
          }
          case 976: {
            UsePriceMgmtAlgo = input.ReadInt32();
            break;
          }
          case 984: {
            Duration = input.ReadInt32();
            break;
          }
          case 992: {
            PostToAts = input.ReadInt32();
            break;
          }
          case 1002: {
            AdvancedErrorOverride = input.ReadString();
            break;
          }
          case 1010: {
            ManualOrderTime = input.ReadString();
            break;
          }
          case 1016: {
            MinTradeQty = input.ReadInt32();
            break;
          }
          case 1024: {
            MinCompeteSize = input.ReadInt32();
            break;
          }
          case 1033: {
            CompeteAgainstBestOffset = input.ReadDouble();
            break;
          }
          case 1041: {
            MidOffsetAtWhole = input.ReadDouble();
            break;
          }
          case 1049: {
            MidOffsetAtHalf = input.ReadDouble();
            break;
          }
          case 1058: {
            CustomerAccount = input.ReadString();
            break;
          }
          case 1064: {
            ProfessionalCustomer = input.ReadBool();
            break;
          }
          case 1074: {
            BondAccruedInterest = input.ReadString();
            break;
          }
          case 1080: {
            IncludeOvernight = input.ReadBool();
            break;
          }
          case 1088: {
            ManualOrderIndicator = input.ReadInt32();
            break;
          }
          case 1098: {
            Submitter = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
