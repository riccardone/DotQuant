// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: OrderState.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IBApi.protobuf {

  /// <summary>Holder for reflection information generated from OrderState.proto</summary>
  public static partial class OrderStateReflection {

    #region Descriptor
    /// <summary>File descriptor for OrderState.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OrderStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBPcmRlclN0YXRlLnByb3RvEghwcm90b2J1ZhoVT3JkZXJBbGxvY2F0aW9u",
            "LnByb3RvIvUNCgpPcmRlclN0YXRlEhMKBnN0YXR1cxgBIAEoCUgAiAEBEh0K",
            "EGluaXRNYXJnaW5CZWZvcmUYAiABKAFIAYgBARIeChFtYWludE1hcmdpbkJl",
            "Zm9yZRgDIAEoAUgCiAEBEiEKFGVxdWl0eVdpdGhMb2FuQmVmb3JlGAQgASgB",
            "SAOIAQESHQoQaW5pdE1hcmdpbkNoYW5nZRgFIAEoAUgEiAEBEh4KEW1haW50",
            "TWFyZ2luQ2hhbmdlGAYgASgBSAWIAQESIQoUZXF1aXR5V2l0aExvYW5DaGFu",
            "Z2UYByABKAFIBogBARIcCg9pbml0TWFyZ2luQWZ0ZXIYCCABKAFIB4gBARId",
            "ChBtYWludE1hcmdpbkFmdGVyGAkgASgBSAiIAQESIAoTZXF1aXR5V2l0aExv",
            "YW5BZnRlchgKIAEoAUgJiAEBEh4KEWNvbW1pc3Npb25BbmRGZWVzGAsgASgB",
            "SAqIAQESIQoUbWluQ29tbWlzc2lvbkFuZEZlZXMYDCABKAFIC4gBARIhChRt",
            "YXhDb21taXNzaW9uQW5kRmVlcxgNIAEoAUgMiAEBEiYKGWNvbW1pc3Npb25B",
            "bmRGZWVzQ3VycmVuY3kYDiABKAlIDYgBARIbCg5tYXJnaW5DdXJyZW5jeRgP",
            "IAEoCUgOiAEBEicKGmluaXRNYXJnaW5CZWZvcmVPdXRzaWRlUlRIGBAgASgB",
            "SA+IAQESKAobbWFpbnRNYXJnaW5CZWZvcmVPdXRzaWRlUlRIGBEgASgBSBCI",
            "AQESKwoeZXF1aXR5V2l0aExvYW5CZWZvcmVPdXRzaWRlUlRIGBIgASgBSBGI",
            "AQESJwoaaW5pdE1hcmdpbkNoYW5nZU91dHNpZGVSVEgYEyABKAFIEogBARIo",
            "ChttYWludE1hcmdpbkNoYW5nZU91dHNpZGVSVEgYFCABKAFIE4gBARIrCh5l",
            "cXVpdHlXaXRoTG9hbkNoYW5nZU91dHNpZGVSVEgYFSABKAFIFIgBARImChlp",
            "bml0TWFyZ2luQWZ0ZXJPdXRzaWRlUlRIGBYgASgBSBWIAQESJwoabWFpbnRN",
            "YXJnaW5BZnRlck91dHNpZGVSVEgYFyABKAFIFogBARIqCh1lcXVpdHlXaXRo",
            "TG9hbkFmdGVyT3V0c2lkZVJUSBgYIAEoAUgXiAEBEhoKDXN1Z2dlc3RlZFNp",
            "emUYGSABKAlIGIgBARIZCgxyZWplY3RSZWFzb24YGiABKAlIGYgBARIzChBv",
            "cmRlckFsbG9jYXRpb25zGBsgAygLMhkucHJvdG9idWYuT3JkZXJBbGxvY2F0",
            "aW9uEhgKC3dhcm5pbmdUZXh0GBwgASgJSBqIAQESGgoNY29tcGxldGVkVGlt",
            "ZRgdIAEoCUgbiAEBEhwKD2NvbXBsZXRlZFN0YXR1cxgeIAEoCUgciAEBQgkK",
            "B19zdGF0dXNCEwoRX2luaXRNYXJnaW5CZWZvcmVCFAoSX21haW50TWFyZ2lu",
            "QmVmb3JlQhcKFV9lcXVpdHlXaXRoTG9hbkJlZm9yZUITChFfaW5pdE1hcmdp",
            "bkNoYW5nZUIUChJfbWFpbnRNYXJnaW5DaGFuZ2VCFwoVX2VxdWl0eVdpdGhM",
            "b2FuQ2hhbmdlQhIKEF9pbml0TWFyZ2luQWZ0ZXJCEwoRX21haW50TWFyZ2lu",
            "QWZ0ZXJCFgoUX2VxdWl0eVdpdGhMb2FuQWZ0ZXJCFAoSX2NvbW1pc3Npb25B",
            "bmRGZWVzQhcKFV9taW5Db21taXNzaW9uQW5kRmVlc0IXChVfbWF4Q29tbWlz",
            "c2lvbkFuZEZlZXNCHAoaX2NvbW1pc3Npb25BbmRGZWVzQ3VycmVuY3lCEQoP",
            "X21hcmdpbkN1cnJlbmN5Qh0KG19pbml0TWFyZ2luQmVmb3JlT3V0c2lkZVJU",
            "SEIeChxfbWFpbnRNYXJnaW5CZWZvcmVPdXRzaWRlUlRIQiEKH19lcXVpdHlX",
            "aXRoTG9hbkJlZm9yZU91dHNpZGVSVEhCHQobX2luaXRNYXJnaW5DaGFuZ2VP",
            "dXRzaWRlUlRIQh4KHF9tYWludE1hcmdpbkNoYW5nZU91dHNpZGVSVEhCIQof",
            "X2VxdWl0eVdpdGhMb2FuQ2hhbmdlT3V0c2lkZVJUSEIcChpfaW5pdE1hcmdp",
            "bkFmdGVyT3V0c2lkZVJUSEIdChtfbWFpbnRNYXJnaW5BZnRlck91dHNpZGVS",
            "VEhCIAoeX2VxdWl0eVdpdGhMb2FuQWZ0ZXJPdXRzaWRlUlRIQhAKDl9zdWdn",
            "ZXN0ZWRTaXplQg8KDV9yZWplY3RSZWFzb25CDgoMX3dhcm5pbmdUZXh0QhAK",
            "Dl9jb21wbGV0ZWRUaW1lQhIKEF9jb21wbGV0ZWRTdGF0dXNCOgoWY29tLmli",
            "LmNsaWVudC5wcm90b2J1ZkIPT3JkZXJTdGF0ZVByb3RvqgIOSUJBcGkucHJv",
            "dG9idWZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::IBApi.protobuf.OrderAllocationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IBApi.protobuf.OrderState), global::IBApi.protobuf.OrderState.Parser, new[]{ "Status", "InitMarginBefore", "MaintMarginBefore", "EquityWithLoanBefore", "InitMarginChange", "MaintMarginChange", "EquityWithLoanChange", "InitMarginAfter", "MaintMarginAfter", "EquityWithLoanAfter", "CommissionAndFees", "MinCommissionAndFees", "MaxCommissionAndFees", "CommissionAndFeesCurrency", "MarginCurrency", "InitMarginBeforeOutsideRTH", "MaintMarginBeforeOutsideRTH", "EquityWithLoanBeforeOutsideRTH", "InitMarginChangeOutsideRTH", "MaintMarginChangeOutsideRTH", "EquityWithLoanChangeOutsideRTH", "InitMarginAfterOutsideRTH", "MaintMarginAfterOutsideRTH", "EquityWithLoanAfterOutsideRTH", "SuggestedSize", "RejectReason", "OrderAllocations", "WarningText", "CompletedTime", "CompletedStatus" }, new[]{ "Status", "InitMarginBefore", "MaintMarginBefore", "EquityWithLoanBefore", "InitMarginChange", "MaintMarginChange", "EquityWithLoanChange", "InitMarginAfter", "MaintMarginAfter", "EquityWithLoanAfter", "CommissionAndFees", "MinCommissionAndFees", "MaxCommissionAndFees", "CommissionAndFeesCurrency", "MarginCurrency", "InitMarginBeforeOutsideRTH", "MaintMarginBeforeOutsideRTH", "EquityWithLoanBeforeOutsideRTH", "InitMarginChangeOutsideRTH", "MaintMarginChangeOutsideRTH", "EquityWithLoanChangeOutsideRTH", "InitMarginAfterOutsideRTH", "MaintMarginAfterOutsideRTH", "EquityWithLoanAfterOutsideRTH", "SuggestedSize", "RejectReason", "WarningText", "CompletedTime", "CompletedStatus" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OrderState : pb::IMessage<OrderState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderState> _parser = new pb::MessageParser<OrderState>(() => new OrderState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OrderState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IBApi.protobuf.OrderStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderState(OrderState other) : this() {
      _hasBits0 = other._hasBits0;
      status_ = other.status_;
      initMarginBefore_ = other.initMarginBefore_;
      maintMarginBefore_ = other.maintMarginBefore_;
      equityWithLoanBefore_ = other.equityWithLoanBefore_;
      initMarginChange_ = other.initMarginChange_;
      maintMarginChange_ = other.maintMarginChange_;
      equityWithLoanChange_ = other.equityWithLoanChange_;
      initMarginAfter_ = other.initMarginAfter_;
      maintMarginAfter_ = other.maintMarginAfter_;
      equityWithLoanAfter_ = other.equityWithLoanAfter_;
      commissionAndFees_ = other.commissionAndFees_;
      minCommissionAndFees_ = other.minCommissionAndFees_;
      maxCommissionAndFees_ = other.maxCommissionAndFees_;
      commissionAndFeesCurrency_ = other.commissionAndFeesCurrency_;
      marginCurrency_ = other.marginCurrency_;
      initMarginBeforeOutsideRTH_ = other.initMarginBeforeOutsideRTH_;
      maintMarginBeforeOutsideRTH_ = other.maintMarginBeforeOutsideRTH_;
      equityWithLoanBeforeOutsideRTH_ = other.equityWithLoanBeforeOutsideRTH_;
      initMarginChangeOutsideRTH_ = other.initMarginChangeOutsideRTH_;
      maintMarginChangeOutsideRTH_ = other.maintMarginChangeOutsideRTH_;
      equityWithLoanChangeOutsideRTH_ = other.equityWithLoanChangeOutsideRTH_;
      initMarginAfterOutsideRTH_ = other.initMarginAfterOutsideRTH_;
      maintMarginAfterOutsideRTH_ = other.maintMarginAfterOutsideRTH_;
      equityWithLoanAfterOutsideRTH_ = other.equityWithLoanAfterOutsideRTH_;
      suggestedSize_ = other.suggestedSize_;
      rejectReason_ = other.rejectReason_;
      orderAllocations_ = other.orderAllocations_.Clone();
      warningText_ = other.warningText_;
      completedTime_ = other.completedTime_;
      completedStatus_ = other.completedStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderState Clone() {
      return new OrderState(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private readonly static string StatusDefaultValue = "";

    private string status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Status {
      get { return status_ ?? StatusDefaultValue; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatus {
      get { return status_ != null; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatus() {
      status_ = null;
    }

    /// <summary>Field number for the "initMarginBefore" field.</summary>
    public const int InitMarginBeforeFieldNumber = 2;
    private readonly static double InitMarginBeforeDefaultValue = 0D;

    private double initMarginBefore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double InitMarginBefore {
      get { if ((_hasBits0 & 1) != 0) { return initMarginBefore_; } else { return InitMarginBeforeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        initMarginBefore_ = value;
      }
    }
    /// <summary>Gets whether the "initMarginBefore" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInitMarginBefore {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "initMarginBefore" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInitMarginBefore() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "maintMarginBefore" field.</summary>
    public const int MaintMarginBeforeFieldNumber = 3;
    private readonly static double MaintMarginBeforeDefaultValue = 0D;

    private double maintMarginBefore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaintMarginBefore {
      get { if ((_hasBits0 & 2) != 0) { return maintMarginBefore_; } else { return MaintMarginBeforeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maintMarginBefore_ = value;
      }
    }
    /// <summary>Gets whether the "maintMarginBefore" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaintMarginBefore {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "maintMarginBefore" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaintMarginBefore() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "equityWithLoanBefore" field.</summary>
    public const int EquityWithLoanBeforeFieldNumber = 4;
    private readonly static double EquityWithLoanBeforeDefaultValue = 0D;

    private double equityWithLoanBefore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EquityWithLoanBefore {
      get { if ((_hasBits0 & 4) != 0) { return equityWithLoanBefore_; } else { return EquityWithLoanBeforeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        equityWithLoanBefore_ = value;
      }
    }
    /// <summary>Gets whether the "equityWithLoanBefore" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEquityWithLoanBefore {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "equityWithLoanBefore" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEquityWithLoanBefore() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "initMarginChange" field.</summary>
    public const int InitMarginChangeFieldNumber = 5;
    private readonly static double InitMarginChangeDefaultValue = 0D;

    private double initMarginChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double InitMarginChange {
      get { if ((_hasBits0 & 8) != 0) { return initMarginChange_; } else { return InitMarginChangeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        initMarginChange_ = value;
      }
    }
    /// <summary>Gets whether the "initMarginChange" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInitMarginChange {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "initMarginChange" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInitMarginChange() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "maintMarginChange" field.</summary>
    public const int MaintMarginChangeFieldNumber = 6;
    private readonly static double MaintMarginChangeDefaultValue = 0D;

    private double maintMarginChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaintMarginChange {
      get { if ((_hasBits0 & 16) != 0) { return maintMarginChange_; } else { return MaintMarginChangeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        maintMarginChange_ = value;
      }
    }
    /// <summary>Gets whether the "maintMarginChange" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaintMarginChange {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "maintMarginChange" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaintMarginChange() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "equityWithLoanChange" field.</summary>
    public const int EquityWithLoanChangeFieldNumber = 7;
    private readonly static double EquityWithLoanChangeDefaultValue = 0D;

    private double equityWithLoanChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EquityWithLoanChange {
      get { if ((_hasBits0 & 32) != 0) { return equityWithLoanChange_; } else { return EquityWithLoanChangeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        equityWithLoanChange_ = value;
      }
    }
    /// <summary>Gets whether the "equityWithLoanChange" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEquityWithLoanChange {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "equityWithLoanChange" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEquityWithLoanChange() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "initMarginAfter" field.</summary>
    public const int InitMarginAfterFieldNumber = 8;
    private readonly static double InitMarginAfterDefaultValue = 0D;

    private double initMarginAfter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double InitMarginAfter {
      get { if ((_hasBits0 & 64) != 0) { return initMarginAfter_; } else { return InitMarginAfterDefaultValue; } }
      set {
        _hasBits0 |= 64;
        initMarginAfter_ = value;
      }
    }
    /// <summary>Gets whether the "initMarginAfter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInitMarginAfter {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "initMarginAfter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInitMarginAfter() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "maintMarginAfter" field.</summary>
    public const int MaintMarginAfterFieldNumber = 9;
    private readonly static double MaintMarginAfterDefaultValue = 0D;

    private double maintMarginAfter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaintMarginAfter {
      get { if ((_hasBits0 & 128) != 0) { return maintMarginAfter_; } else { return MaintMarginAfterDefaultValue; } }
      set {
        _hasBits0 |= 128;
        maintMarginAfter_ = value;
      }
    }
    /// <summary>Gets whether the "maintMarginAfter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaintMarginAfter {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "maintMarginAfter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaintMarginAfter() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "equityWithLoanAfter" field.</summary>
    public const int EquityWithLoanAfterFieldNumber = 10;
    private readonly static double EquityWithLoanAfterDefaultValue = 0D;

    private double equityWithLoanAfter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EquityWithLoanAfter {
      get { if ((_hasBits0 & 256) != 0) { return equityWithLoanAfter_; } else { return EquityWithLoanAfterDefaultValue; } }
      set {
        _hasBits0 |= 256;
        equityWithLoanAfter_ = value;
      }
    }
    /// <summary>Gets whether the "equityWithLoanAfter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEquityWithLoanAfter {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "equityWithLoanAfter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEquityWithLoanAfter() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "commissionAndFees" field.</summary>
    public const int CommissionAndFeesFieldNumber = 11;
    private readonly static double CommissionAndFeesDefaultValue = 0D;

    private double commissionAndFees_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CommissionAndFees {
      get { if ((_hasBits0 & 512) != 0) { return commissionAndFees_; } else { return CommissionAndFeesDefaultValue; } }
      set {
        _hasBits0 |= 512;
        commissionAndFees_ = value;
      }
    }
    /// <summary>Gets whether the "commissionAndFees" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCommissionAndFees {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "commissionAndFees" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCommissionAndFees() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "minCommissionAndFees" field.</summary>
    public const int MinCommissionAndFeesFieldNumber = 12;
    private readonly static double MinCommissionAndFeesDefaultValue = 0D;

    private double minCommissionAndFees_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MinCommissionAndFees {
      get { if ((_hasBits0 & 1024) != 0) { return minCommissionAndFees_; } else { return MinCommissionAndFeesDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        minCommissionAndFees_ = value;
      }
    }
    /// <summary>Gets whether the "minCommissionAndFees" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinCommissionAndFees {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "minCommissionAndFees" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinCommissionAndFees() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "maxCommissionAndFees" field.</summary>
    public const int MaxCommissionAndFeesFieldNumber = 13;
    private readonly static double MaxCommissionAndFeesDefaultValue = 0D;

    private double maxCommissionAndFees_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaxCommissionAndFees {
      get { if ((_hasBits0 & 2048) != 0) { return maxCommissionAndFees_; } else { return MaxCommissionAndFeesDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        maxCommissionAndFees_ = value;
      }
    }
    /// <summary>Gets whether the "maxCommissionAndFees" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxCommissionAndFees {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "maxCommissionAndFees" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxCommissionAndFees() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "commissionAndFeesCurrency" field.</summary>
    public const int CommissionAndFeesCurrencyFieldNumber = 14;
    private readonly static string CommissionAndFeesCurrencyDefaultValue = "";

    private string commissionAndFeesCurrency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CommissionAndFeesCurrency {
      get { return commissionAndFeesCurrency_ ?? CommissionAndFeesCurrencyDefaultValue; }
      set {
        commissionAndFeesCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "commissionAndFeesCurrency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCommissionAndFeesCurrency {
      get { return commissionAndFeesCurrency_ != null; }
    }
    /// <summary>Clears the value of the "commissionAndFeesCurrency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCommissionAndFeesCurrency() {
      commissionAndFeesCurrency_ = null;
    }

    /// <summary>Field number for the "marginCurrency" field.</summary>
    public const int MarginCurrencyFieldNumber = 15;
    private readonly static string MarginCurrencyDefaultValue = "";

    private string marginCurrency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MarginCurrency {
      get { return marginCurrency_ ?? MarginCurrencyDefaultValue; }
      set {
        marginCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "marginCurrency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMarginCurrency {
      get { return marginCurrency_ != null; }
    }
    /// <summary>Clears the value of the "marginCurrency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMarginCurrency() {
      marginCurrency_ = null;
    }

    /// <summary>Field number for the "initMarginBeforeOutsideRTH" field.</summary>
    public const int InitMarginBeforeOutsideRTHFieldNumber = 16;
    private readonly static double InitMarginBeforeOutsideRTHDefaultValue = 0D;

    private double initMarginBeforeOutsideRTH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double InitMarginBeforeOutsideRTH {
      get { if ((_hasBits0 & 4096) != 0) { return initMarginBeforeOutsideRTH_; } else { return InitMarginBeforeOutsideRTHDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        initMarginBeforeOutsideRTH_ = value;
      }
    }
    /// <summary>Gets whether the "initMarginBeforeOutsideRTH" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInitMarginBeforeOutsideRTH {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "initMarginBeforeOutsideRTH" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInitMarginBeforeOutsideRTH() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "maintMarginBeforeOutsideRTH" field.</summary>
    public const int MaintMarginBeforeOutsideRTHFieldNumber = 17;
    private readonly static double MaintMarginBeforeOutsideRTHDefaultValue = 0D;

    private double maintMarginBeforeOutsideRTH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaintMarginBeforeOutsideRTH {
      get { if ((_hasBits0 & 8192) != 0) { return maintMarginBeforeOutsideRTH_; } else { return MaintMarginBeforeOutsideRTHDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        maintMarginBeforeOutsideRTH_ = value;
      }
    }
    /// <summary>Gets whether the "maintMarginBeforeOutsideRTH" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaintMarginBeforeOutsideRTH {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "maintMarginBeforeOutsideRTH" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaintMarginBeforeOutsideRTH() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "equityWithLoanBeforeOutsideRTH" field.</summary>
    public const int EquityWithLoanBeforeOutsideRTHFieldNumber = 18;
    private readonly static double EquityWithLoanBeforeOutsideRTHDefaultValue = 0D;

    private double equityWithLoanBeforeOutsideRTH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EquityWithLoanBeforeOutsideRTH {
      get { if ((_hasBits0 & 16384) != 0) { return equityWithLoanBeforeOutsideRTH_; } else { return EquityWithLoanBeforeOutsideRTHDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        equityWithLoanBeforeOutsideRTH_ = value;
      }
    }
    /// <summary>Gets whether the "equityWithLoanBeforeOutsideRTH" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEquityWithLoanBeforeOutsideRTH {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "equityWithLoanBeforeOutsideRTH" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEquityWithLoanBeforeOutsideRTH() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "initMarginChangeOutsideRTH" field.</summary>
    public const int InitMarginChangeOutsideRTHFieldNumber = 19;
    private readonly static double InitMarginChangeOutsideRTHDefaultValue = 0D;

    private double initMarginChangeOutsideRTH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double InitMarginChangeOutsideRTH {
      get { if ((_hasBits0 & 32768) != 0) { return initMarginChangeOutsideRTH_; } else { return InitMarginChangeOutsideRTHDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        initMarginChangeOutsideRTH_ = value;
      }
    }
    /// <summary>Gets whether the "initMarginChangeOutsideRTH" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInitMarginChangeOutsideRTH {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "initMarginChangeOutsideRTH" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInitMarginChangeOutsideRTH() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "maintMarginChangeOutsideRTH" field.</summary>
    public const int MaintMarginChangeOutsideRTHFieldNumber = 20;
    private readonly static double MaintMarginChangeOutsideRTHDefaultValue = 0D;

    private double maintMarginChangeOutsideRTH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaintMarginChangeOutsideRTH {
      get { if ((_hasBits0 & 65536) != 0) { return maintMarginChangeOutsideRTH_; } else { return MaintMarginChangeOutsideRTHDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        maintMarginChangeOutsideRTH_ = value;
      }
    }
    /// <summary>Gets whether the "maintMarginChangeOutsideRTH" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaintMarginChangeOutsideRTH {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "maintMarginChangeOutsideRTH" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaintMarginChangeOutsideRTH() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "equityWithLoanChangeOutsideRTH" field.</summary>
    public const int EquityWithLoanChangeOutsideRTHFieldNumber = 21;
    private readonly static double EquityWithLoanChangeOutsideRTHDefaultValue = 0D;

    private double equityWithLoanChangeOutsideRTH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EquityWithLoanChangeOutsideRTH {
      get { if ((_hasBits0 & 131072) != 0) { return equityWithLoanChangeOutsideRTH_; } else { return EquityWithLoanChangeOutsideRTHDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        equityWithLoanChangeOutsideRTH_ = value;
      }
    }
    /// <summary>Gets whether the "equityWithLoanChangeOutsideRTH" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEquityWithLoanChangeOutsideRTH {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "equityWithLoanChangeOutsideRTH" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEquityWithLoanChangeOutsideRTH() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "initMarginAfterOutsideRTH" field.</summary>
    public const int InitMarginAfterOutsideRTHFieldNumber = 22;
    private readonly static double InitMarginAfterOutsideRTHDefaultValue = 0D;

    private double initMarginAfterOutsideRTH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double InitMarginAfterOutsideRTH {
      get { if ((_hasBits0 & 262144) != 0) { return initMarginAfterOutsideRTH_; } else { return InitMarginAfterOutsideRTHDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        initMarginAfterOutsideRTH_ = value;
      }
    }
    /// <summary>Gets whether the "initMarginAfterOutsideRTH" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInitMarginAfterOutsideRTH {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "initMarginAfterOutsideRTH" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInitMarginAfterOutsideRTH() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "maintMarginAfterOutsideRTH" field.</summary>
    public const int MaintMarginAfterOutsideRTHFieldNumber = 23;
    private readonly static double MaintMarginAfterOutsideRTHDefaultValue = 0D;

    private double maintMarginAfterOutsideRTH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaintMarginAfterOutsideRTH {
      get { if ((_hasBits0 & 524288) != 0) { return maintMarginAfterOutsideRTH_; } else { return MaintMarginAfterOutsideRTHDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        maintMarginAfterOutsideRTH_ = value;
      }
    }
    /// <summary>Gets whether the "maintMarginAfterOutsideRTH" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaintMarginAfterOutsideRTH {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "maintMarginAfterOutsideRTH" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaintMarginAfterOutsideRTH() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "equityWithLoanAfterOutsideRTH" field.</summary>
    public const int EquityWithLoanAfterOutsideRTHFieldNumber = 24;
    private readonly static double EquityWithLoanAfterOutsideRTHDefaultValue = 0D;

    private double equityWithLoanAfterOutsideRTH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EquityWithLoanAfterOutsideRTH {
      get { if ((_hasBits0 & 1048576) != 0) { return equityWithLoanAfterOutsideRTH_; } else { return EquityWithLoanAfterOutsideRTHDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        equityWithLoanAfterOutsideRTH_ = value;
      }
    }
    /// <summary>Gets whether the "equityWithLoanAfterOutsideRTH" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEquityWithLoanAfterOutsideRTH {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "equityWithLoanAfterOutsideRTH" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEquityWithLoanAfterOutsideRTH() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "suggestedSize" field.</summary>
    public const int SuggestedSizeFieldNumber = 25;
    private readonly static string SuggestedSizeDefaultValue = "";

    private string suggestedSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SuggestedSize {
      get { return suggestedSize_ ?? SuggestedSizeDefaultValue; }
      set {
        suggestedSize_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "suggestedSize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuggestedSize {
      get { return suggestedSize_ != null; }
    }
    /// <summary>Clears the value of the "suggestedSize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuggestedSize() {
      suggestedSize_ = null;
    }

    /// <summary>Field number for the "rejectReason" field.</summary>
    public const int RejectReasonFieldNumber = 26;
    private readonly static string RejectReasonDefaultValue = "";

    private string rejectReason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RejectReason {
      get { return rejectReason_ ?? RejectReasonDefaultValue; }
      set {
        rejectReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "rejectReason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRejectReason {
      get { return rejectReason_ != null; }
    }
    /// <summary>Clears the value of the "rejectReason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRejectReason() {
      rejectReason_ = null;
    }

    /// <summary>Field number for the "orderAllocations" field.</summary>
    public const int OrderAllocationsFieldNumber = 27;
    private static readonly pb::FieldCodec<global::IBApi.protobuf.OrderAllocation> _repeated_orderAllocations_codec
        = pb::FieldCodec.ForMessage(218, global::IBApi.protobuf.OrderAllocation.Parser);
    private readonly pbc::RepeatedField<global::IBApi.protobuf.OrderAllocation> orderAllocations_ = new pbc::RepeatedField<global::IBApi.protobuf.OrderAllocation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::IBApi.protobuf.OrderAllocation> OrderAllocations {
      get { return orderAllocations_; }
    }

    /// <summary>Field number for the "warningText" field.</summary>
    public const int WarningTextFieldNumber = 28;
    private readonly static string WarningTextDefaultValue = "";

    private string warningText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string WarningText {
      get { return warningText_ ?? WarningTextDefaultValue; }
      set {
        warningText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "warningText" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWarningText {
      get { return warningText_ != null; }
    }
    /// <summary>Clears the value of the "warningText" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWarningText() {
      warningText_ = null;
    }

    /// <summary>Field number for the "completedTime" field.</summary>
    public const int CompletedTimeFieldNumber = 29;
    private readonly static string CompletedTimeDefaultValue = "";

    private string completedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CompletedTime {
      get { return completedTime_ ?? CompletedTimeDefaultValue; }
      set {
        completedTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "completedTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCompletedTime {
      get { return completedTime_ != null; }
    }
    /// <summary>Clears the value of the "completedTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCompletedTime() {
      completedTime_ = null;
    }

    /// <summary>Field number for the "completedStatus" field.</summary>
    public const int CompletedStatusFieldNumber = 30;
    private readonly static string CompletedStatusDefaultValue = "";

    private string completedStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CompletedStatus {
      get { return completedStatus_ ?? CompletedStatusDefaultValue; }
      set {
        completedStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "completedStatus" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCompletedStatus {
      get { return completedStatus_ != null; }
    }
    /// <summary>Clears the value of the "completedStatus" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCompletedStatus() {
      completedStatus_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OrderState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OrderState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InitMarginBefore, other.InitMarginBefore)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaintMarginBefore, other.MaintMarginBefore)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EquityWithLoanBefore, other.EquityWithLoanBefore)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InitMarginChange, other.InitMarginChange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaintMarginChange, other.MaintMarginChange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EquityWithLoanChange, other.EquityWithLoanChange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InitMarginAfter, other.InitMarginAfter)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaintMarginAfter, other.MaintMarginAfter)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EquityWithLoanAfter, other.EquityWithLoanAfter)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CommissionAndFees, other.CommissionAndFees)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinCommissionAndFees, other.MinCommissionAndFees)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxCommissionAndFees, other.MaxCommissionAndFees)) return false;
      if (CommissionAndFeesCurrency != other.CommissionAndFeesCurrency) return false;
      if (MarginCurrency != other.MarginCurrency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InitMarginBeforeOutsideRTH, other.InitMarginBeforeOutsideRTH)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaintMarginBeforeOutsideRTH, other.MaintMarginBeforeOutsideRTH)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EquityWithLoanBeforeOutsideRTH, other.EquityWithLoanBeforeOutsideRTH)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InitMarginChangeOutsideRTH, other.InitMarginChangeOutsideRTH)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaintMarginChangeOutsideRTH, other.MaintMarginChangeOutsideRTH)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EquityWithLoanChangeOutsideRTH, other.EquityWithLoanChangeOutsideRTH)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InitMarginAfterOutsideRTH, other.InitMarginAfterOutsideRTH)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaintMarginAfterOutsideRTH, other.MaintMarginAfterOutsideRTH)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EquityWithLoanAfterOutsideRTH, other.EquityWithLoanAfterOutsideRTH)) return false;
      if (SuggestedSize != other.SuggestedSize) return false;
      if (RejectReason != other.RejectReason) return false;
      if(!orderAllocations_.Equals(other.orderAllocations_)) return false;
      if (WarningText != other.WarningText) return false;
      if (CompletedTime != other.CompletedTime) return false;
      if (CompletedStatus != other.CompletedStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStatus) hash ^= Status.GetHashCode();
      if (HasInitMarginBefore) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InitMarginBefore);
      if (HasMaintMarginBefore) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaintMarginBefore);
      if (HasEquityWithLoanBefore) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EquityWithLoanBefore);
      if (HasInitMarginChange) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InitMarginChange);
      if (HasMaintMarginChange) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaintMarginChange);
      if (HasEquityWithLoanChange) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EquityWithLoanChange);
      if (HasInitMarginAfter) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InitMarginAfter);
      if (HasMaintMarginAfter) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaintMarginAfter);
      if (HasEquityWithLoanAfter) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EquityWithLoanAfter);
      if (HasCommissionAndFees) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CommissionAndFees);
      if (HasMinCommissionAndFees) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinCommissionAndFees);
      if (HasMaxCommissionAndFees) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxCommissionAndFees);
      if (HasCommissionAndFeesCurrency) hash ^= CommissionAndFeesCurrency.GetHashCode();
      if (HasMarginCurrency) hash ^= MarginCurrency.GetHashCode();
      if (HasInitMarginBeforeOutsideRTH) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InitMarginBeforeOutsideRTH);
      if (HasMaintMarginBeforeOutsideRTH) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaintMarginBeforeOutsideRTH);
      if (HasEquityWithLoanBeforeOutsideRTH) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EquityWithLoanBeforeOutsideRTH);
      if (HasInitMarginChangeOutsideRTH) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InitMarginChangeOutsideRTH);
      if (HasMaintMarginChangeOutsideRTH) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaintMarginChangeOutsideRTH);
      if (HasEquityWithLoanChangeOutsideRTH) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EquityWithLoanChangeOutsideRTH);
      if (HasInitMarginAfterOutsideRTH) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InitMarginAfterOutsideRTH);
      if (HasMaintMarginAfterOutsideRTH) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaintMarginAfterOutsideRTH);
      if (HasEquityWithLoanAfterOutsideRTH) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EquityWithLoanAfterOutsideRTH);
      if (HasSuggestedSize) hash ^= SuggestedSize.GetHashCode();
      if (HasRejectReason) hash ^= RejectReason.GetHashCode();
      hash ^= orderAllocations_.GetHashCode();
      if (HasWarningText) hash ^= WarningText.GetHashCode();
      if (HasCompletedTime) hash ^= CompletedTime.GetHashCode();
      if (HasCompletedStatus) hash ^= CompletedStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStatus) {
        output.WriteRawTag(10);
        output.WriteString(Status);
      }
      if (HasInitMarginBefore) {
        output.WriteRawTag(17);
        output.WriteDouble(InitMarginBefore);
      }
      if (HasMaintMarginBefore) {
        output.WriteRawTag(25);
        output.WriteDouble(MaintMarginBefore);
      }
      if (HasEquityWithLoanBefore) {
        output.WriteRawTag(33);
        output.WriteDouble(EquityWithLoanBefore);
      }
      if (HasInitMarginChange) {
        output.WriteRawTag(41);
        output.WriteDouble(InitMarginChange);
      }
      if (HasMaintMarginChange) {
        output.WriteRawTag(49);
        output.WriteDouble(MaintMarginChange);
      }
      if (HasEquityWithLoanChange) {
        output.WriteRawTag(57);
        output.WriteDouble(EquityWithLoanChange);
      }
      if (HasInitMarginAfter) {
        output.WriteRawTag(65);
        output.WriteDouble(InitMarginAfter);
      }
      if (HasMaintMarginAfter) {
        output.WriteRawTag(73);
        output.WriteDouble(MaintMarginAfter);
      }
      if (HasEquityWithLoanAfter) {
        output.WriteRawTag(81);
        output.WriteDouble(EquityWithLoanAfter);
      }
      if (HasCommissionAndFees) {
        output.WriteRawTag(89);
        output.WriteDouble(CommissionAndFees);
      }
      if (HasMinCommissionAndFees) {
        output.WriteRawTag(97);
        output.WriteDouble(MinCommissionAndFees);
      }
      if (HasMaxCommissionAndFees) {
        output.WriteRawTag(105);
        output.WriteDouble(MaxCommissionAndFees);
      }
      if (HasCommissionAndFeesCurrency) {
        output.WriteRawTag(114);
        output.WriteString(CommissionAndFeesCurrency);
      }
      if (HasMarginCurrency) {
        output.WriteRawTag(122);
        output.WriteString(MarginCurrency);
      }
      if (HasInitMarginBeforeOutsideRTH) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(InitMarginBeforeOutsideRTH);
      }
      if (HasMaintMarginBeforeOutsideRTH) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(MaintMarginBeforeOutsideRTH);
      }
      if (HasEquityWithLoanBeforeOutsideRTH) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(EquityWithLoanBeforeOutsideRTH);
      }
      if (HasInitMarginChangeOutsideRTH) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(InitMarginChangeOutsideRTH);
      }
      if (HasMaintMarginChangeOutsideRTH) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(MaintMarginChangeOutsideRTH);
      }
      if (HasEquityWithLoanChangeOutsideRTH) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(EquityWithLoanChangeOutsideRTH);
      }
      if (HasInitMarginAfterOutsideRTH) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(InitMarginAfterOutsideRTH);
      }
      if (HasMaintMarginAfterOutsideRTH) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(MaintMarginAfterOutsideRTH);
      }
      if (HasEquityWithLoanAfterOutsideRTH) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(EquityWithLoanAfterOutsideRTH);
      }
      if (HasSuggestedSize) {
        output.WriteRawTag(202, 1);
        output.WriteString(SuggestedSize);
      }
      if (HasRejectReason) {
        output.WriteRawTag(210, 1);
        output.WriteString(RejectReason);
      }
      orderAllocations_.WriteTo(output, _repeated_orderAllocations_codec);
      if (HasWarningText) {
        output.WriteRawTag(226, 1);
        output.WriteString(WarningText);
      }
      if (HasCompletedTime) {
        output.WriteRawTag(234, 1);
        output.WriteString(CompletedTime);
      }
      if (HasCompletedStatus) {
        output.WriteRawTag(242, 1);
        output.WriteString(CompletedStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStatus) {
        output.WriteRawTag(10);
        output.WriteString(Status);
      }
      if (HasInitMarginBefore) {
        output.WriteRawTag(17);
        output.WriteDouble(InitMarginBefore);
      }
      if (HasMaintMarginBefore) {
        output.WriteRawTag(25);
        output.WriteDouble(MaintMarginBefore);
      }
      if (HasEquityWithLoanBefore) {
        output.WriteRawTag(33);
        output.WriteDouble(EquityWithLoanBefore);
      }
      if (HasInitMarginChange) {
        output.WriteRawTag(41);
        output.WriteDouble(InitMarginChange);
      }
      if (HasMaintMarginChange) {
        output.WriteRawTag(49);
        output.WriteDouble(MaintMarginChange);
      }
      if (HasEquityWithLoanChange) {
        output.WriteRawTag(57);
        output.WriteDouble(EquityWithLoanChange);
      }
      if (HasInitMarginAfter) {
        output.WriteRawTag(65);
        output.WriteDouble(InitMarginAfter);
      }
      if (HasMaintMarginAfter) {
        output.WriteRawTag(73);
        output.WriteDouble(MaintMarginAfter);
      }
      if (HasEquityWithLoanAfter) {
        output.WriteRawTag(81);
        output.WriteDouble(EquityWithLoanAfter);
      }
      if (HasCommissionAndFees) {
        output.WriteRawTag(89);
        output.WriteDouble(CommissionAndFees);
      }
      if (HasMinCommissionAndFees) {
        output.WriteRawTag(97);
        output.WriteDouble(MinCommissionAndFees);
      }
      if (HasMaxCommissionAndFees) {
        output.WriteRawTag(105);
        output.WriteDouble(MaxCommissionAndFees);
      }
      if (HasCommissionAndFeesCurrency) {
        output.WriteRawTag(114);
        output.WriteString(CommissionAndFeesCurrency);
      }
      if (HasMarginCurrency) {
        output.WriteRawTag(122);
        output.WriteString(MarginCurrency);
      }
      if (HasInitMarginBeforeOutsideRTH) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(InitMarginBeforeOutsideRTH);
      }
      if (HasMaintMarginBeforeOutsideRTH) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(MaintMarginBeforeOutsideRTH);
      }
      if (HasEquityWithLoanBeforeOutsideRTH) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(EquityWithLoanBeforeOutsideRTH);
      }
      if (HasInitMarginChangeOutsideRTH) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(InitMarginChangeOutsideRTH);
      }
      if (HasMaintMarginChangeOutsideRTH) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(MaintMarginChangeOutsideRTH);
      }
      if (HasEquityWithLoanChangeOutsideRTH) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(EquityWithLoanChangeOutsideRTH);
      }
      if (HasInitMarginAfterOutsideRTH) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(InitMarginAfterOutsideRTH);
      }
      if (HasMaintMarginAfterOutsideRTH) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(MaintMarginAfterOutsideRTH);
      }
      if (HasEquityWithLoanAfterOutsideRTH) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(EquityWithLoanAfterOutsideRTH);
      }
      if (HasSuggestedSize) {
        output.WriteRawTag(202, 1);
        output.WriteString(SuggestedSize);
      }
      if (HasRejectReason) {
        output.WriteRawTag(210, 1);
        output.WriteString(RejectReason);
      }
      orderAllocations_.WriteTo(ref output, _repeated_orderAllocations_codec);
      if (HasWarningText) {
        output.WriteRawTag(226, 1);
        output.WriteString(WarningText);
      }
      if (HasCompletedTime) {
        output.WriteRawTag(234, 1);
        output.WriteString(CompletedTime);
      }
      if (HasCompletedStatus) {
        output.WriteRawTag(242, 1);
        output.WriteString(CompletedStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (HasInitMarginBefore) {
        size += 1 + 8;
      }
      if (HasMaintMarginBefore) {
        size += 1 + 8;
      }
      if (HasEquityWithLoanBefore) {
        size += 1 + 8;
      }
      if (HasInitMarginChange) {
        size += 1 + 8;
      }
      if (HasMaintMarginChange) {
        size += 1 + 8;
      }
      if (HasEquityWithLoanChange) {
        size += 1 + 8;
      }
      if (HasInitMarginAfter) {
        size += 1 + 8;
      }
      if (HasMaintMarginAfter) {
        size += 1 + 8;
      }
      if (HasEquityWithLoanAfter) {
        size += 1 + 8;
      }
      if (HasCommissionAndFees) {
        size += 1 + 8;
      }
      if (HasMinCommissionAndFees) {
        size += 1 + 8;
      }
      if (HasMaxCommissionAndFees) {
        size += 1 + 8;
      }
      if (HasCommissionAndFeesCurrency) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CommissionAndFeesCurrency);
      }
      if (HasMarginCurrency) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MarginCurrency);
      }
      if (HasInitMarginBeforeOutsideRTH) {
        size += 2 + 8;
      }
      if (HasMaintMarginBeforeOutsideRTH) {
        size += 2 + 8;
      }
      if (HasEquityWithLoanBeforeOutsideRTH) {
        size += 2 + 8;
      }
      if (HasInitMarginChangeOutsideRTH) {
        size += 2 + 8;
      }
      if (HasMaintMarginChangeOutsideRTH) {
        size += 2 + 8;
      }
      if (HasEquityWithLoanChangeOutsideRTH) {
        size += 2 + 8;
      }
      if (HasInitMarginAfterOutsideRTH) {
        size += 2 + 8;
      }
      if (HasMaintMarginAfterOutsideRTH) {
        size += 2 + 8;
      }
      if (HasEquityWithLoanAfterOutsideRTH) {
        size += 2 + 8;
      }
      if (HasSuggestedSize) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SuggestedSize);
      }
      if (HasRejectReason) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RejectReason);
      }
      size += orderAllocations_.CalculateSize(_repeated_orderAllocations_codec);
      if (HasWarningText) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WarningText);
      }
      if (HasCompletedTime) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CompletedTime);
      }
      if (HasCompletedStatus) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CompletedStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OrderState other) {
      if (other == null) {
        return;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasInitMarginBefore) {
        InitMarginBefore = other.InitMarginBefore;
      }
      if (other.HasMaintMarginBefore) {
        MaintMarginBefore = other.MaintMarginBefore;
      }
      if (other.HasEquityWithLoanBefore) {
        EquityWithLoanBefore = other.EquityWithLoanBefore;
      }
      if (other.HasInitMarginChange) {
        InitMarginChange = other.InitMarginChange;
      }
      if (other.HasMaintMarginChange) {
        MaintMarginChange = other.MaintMarginChange;
      }
      if (other.HasEquityWithLoanChange) {
        EquityWithLoanChange = other.EquityWithLoanChange;
      }
      if (other.HasInitMarginAfter) {
        InitMarginAfter = other.InitMarginAfter;
      }
      if (other.HasMaintMarginAfter) {
        MaintMarginAfter = other.MaintMarginAfter;
      }
      if (other.HasEquityWithLoanAfter) {
        EquityWithLoanAfter = other.EquityWithLoanAfter;
      }
      if (other.HasCommissionAndFees) {
        CommissionAndFees = other.CommissionAndFees;
      }
      if (other.HasMinCommissionAndFees) {
        MinCommissionAndFees = other.MinCommissionAndFees;
      }
      if (other.HasMaxCommissionAndFees) {
        MaxCommissionAndFees = other.MaxCommissionAndFees;
      }
      if (other.HasCommissionAndFeesCurrency) {
        CommissionAndFeesCurrency = other.CommissionAndFeesCurrency;
      }
      if (other.HasMarginCurrency) {
        MarginCurrency = other.MarginCurrency;
      }
      if (other.HasInitMarginBeforeOutsideRTH) {
        InitMarginBeforeOutsideRTH = other.InitMarginBeforeOutsideRTH;
      }
      if (other.HasMaintMarginBeforeOutsideRTH) {
        MaintMarginBeforeOutsideRTH = other.MaintMarginBeforeOutsideRTH;
      }
      if (other.HasEquityWithLoanBeforeOutsideRTH) {
        EquityWithLoanBeforeOutsideRTH = other.EquityWithLoanBeforeOutsideRTH;
      }
      if (other.HasInitMarginChangeOutsideRTH) {
        InitMarginChangeOutsideRTH = other.InitMarginChangeOutsideRTH;
      }
      if (other.HasMaintMarginChangeOutsideRTH) {
        MaintMarginChangeOutsideRTH = other.MaintMarginChangeOutsideRTH;
      }
      if (other.HasEquityWithLoanChangeOutsideRTH) {
        EquityWithLoanChangeOutsideRTH = other.EquityWithLoanChangeOutsideRTH;
      }
      if (other.HasInitMarginAfterOutsideRTH) {
        InitMarginAfterOutsideRTH = other.InitMarginAfterOutsideRTH;
      }
      if (other.HasMaintMarginAfterOutsideRTH) {
        MaintMarginAfterOutsideRTH = other.MaintMarginAfterOutsideRTH;
      }
      if (other.HasEquityWithLoanAfterOutsideRTH) {
        EquityWithLoanAfterOutsideRTH = other.EquityWithLoanAfterOutsideRTH;
      }
      if (other.HasSuggestedSize) {
        SuggestedSize = other.SuggestedSize;
      }
      if (other.HasRejectReason) {
        RejectReason = other.RejectReason;
      }
      orderAllocations_.Add(other.orderAllocations_);
      if (other.HasWarningText) {
        WarningText = other.WarningText;
      }
      if (other.HasCompletedTime) {
        CompletedTime = other.CompletedTime;
      }
      if (other.HasCompletedStatus) {
        CompletedStatus = other.CompletedStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Status = input.ReadString();
            break;
          }
          case 17: {
            InitMarginBefore = input.ReadDouble();
            break;
          }
          case 25: {
            MaintMarginBefore = input.ReadDouble();
            break;
          }
          case 33: {
            EquityWithLoanBefore = input.ReadDouble();
            break;
          }
          case 41: {
            InitMarginChange = input.ReadDouble();
            break;
          }
          case 49: {
            MaintMarginChange = input.ReadDouble();
            break;
          }
          case 57: {
            EquityWithLoanChange = input.ReadDouble();
            break;
          }
          case 65: {
            InitMarginAfter = input.ReadDouble();
            break;
          }
          case 73: {
            MaintMarginAfter = input.ReadDouble();
            break;
          }
          case 81: {
            EquityWithLoanAfter = input.ReadDouble();
            break;
          }
          case 89: {
            CommissionAndFees = input.ReadDouble();
            break;
          }
          case 97: {
            MinCommissionAndFees = input.ReadDouble();
            break;
          }
          case 105: {
            MaxCommissionAndFees = input.ReadDouble();
            break;
          }
          case 114: {
            CommissionAndFeesCurrency = input.ReadString();
            break;
          }
          case 122: {
            MarginCurrency = input.ReadString();
            break;
          }
          case 129: {
            InitMarginBeforeOutsideRTH = input.ReadDouble();
            break;
          }
          case 137: {
            MaintMarginBeforeOutsideRTH = input.ReadDouble();
            break;
          }
          case 145: {
            EquityWithLoanBeforeOutsideRTH = input.ReadDouble();
            break;
          }
          case 153: {
            InitMarginChangeOutsideRTH = input.ReadDouble();
            break;
          }
          case 161: {
            MaintMarginChangeOutsideRTH = input.ReadDouble();
            break;
          }
          case 169: {
            EquityWithLoanChangeOutsideRTH = input.ReadDouble();
            break;
          }
          case 177: {
            InitMarginAfterOutsideRTH = input.ReadDouble();
            break;
          }
          case 185: {
            MaintMarginAfterOutsideRTH = input.ReadDouble();
            break;
          }
          case 193: {
            EquityWithLoanAfterOutsideRTH = input.ReadDouble();
            break;
          }
          case 202: {
            SuggestedSize = input.ReadString();
            break;
          }
          case 210: {
            RejectReason = input.ReadString();
            break;
          }
          case 218: {
            orderAllocations_.AddEntriesFrom(input, _repeated_orderAllocations_codec);
            break;
          }
          case 226: {
            WarningText = input.ReadString();
            break;
          }
          case 234: {
            CompletedTime = input.ReadString();
            break;
          }
          case 242: {
            CompletedStatus = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Status = input.ReadString();
            break;
          }
          case 17: {
            InitMarginBefore = input.ReadDouble();
            break;
          }
          case 25: {
            MaintMarginBefore = input.ReadDouble();
            break;
          }
          case 33: {
            EquityWithLoanBefore = input.ReadDouble();
            break;
          }
          case 41: {
            InitMarginChange = input.ReadDouble();
            break;
          }
          case 49: {
            MaintMarginChange = input.ReadDouble();
            break;
          }
          case 57: {
            EquityWithLoanChange = input.ReadDouble();
            break;
          }
          case 65: {
            InitMarginAfter = input.ReadDouble();
            break;
          }
          case 73: {
            MaintMarginAfter = input.ReadDouble();
            break;
          }
          case 81: {
            EquityWithLoanAfter = input.ReadDouble();
            break;
          }
          case 89: {
            CommissionAndFees = input.ReadDouble();
            break;
          }
          case 97: {
            MinCommissionAndFees = input.ReadDouble();
            break;
          }
          case 105: {
            MaxCommissionAndFees = input.ReadDouble();
            break;
          }
          case 114: {
            CommissionAndFeesCurrency = input.ReadString();
            break;
          }
          case 122: {
            MarginCurrency = input.ReadString();
            break;
          }
          case 129: {
            InitMarginBeforeOutsideRTH = input.ReadDouble();
            break;
          }
          case 137: {
            MaintMarginBeforeOutsideRTH = input.ReadDouble();
            break;
          }
          case 145: {
            EquityWithLoanBeforeOutsideRTH = input.ReadDouble();
            break;
          }
          case 153: {
            InitMarginChangeOutsideRTH = input.ReadDouble();
            break;
          }
          case 161: {
            MaintMarginChangeOutsideRTH = input.ReadDouble();
            break;
          }
          case 169: {
            EquityWithLoanChangeOutsideRTH = input.ReadDouble();
            break;
          }
          case 177: {
            InitMarginAfterOutsideRTH = input.ReadDouble();
            break;
          }
          case 185: {
            MaintMarginAfterOutsideRTH = input.ReadDouble();
            break;
          }
          case 193: {
            EquityWithLoanAfterOutsideRTH = input.ReadDouble();
            break;
          }
          case 202: {
            SuggestedSize = input.ReadString();
            break;
          }
          case 210: {
            RejectReason = input.ReadString();
            break;
          }
          case 218: {
            orderAllocations_.AddEntriesFrom(ref input, _repeated_orderAllocations_codec);
            break;
          }
          case 226: {
            WarningText = input.ReadString();
            break;
          }
          case 234: {
            CompletedTime = input.ReadString();
            break;
          }
          case 242: {
            CompletedStatus = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
