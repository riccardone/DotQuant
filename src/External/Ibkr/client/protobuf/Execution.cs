// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Execution.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IBApi.protobuf {

  /// <summary>Holder for reflection information generated from Execution.proto</summary>
  public static partial class ExecutionReflection {

    #region Descriptor
    /// <summary>File descriptor for Execution.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExecutionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9FeGVjdXRpb24ucHJvdG8SCHByb3RvYnVmIq8GCglFeGVjdXRpb24SFAoH",
            "b3JkZXJJZBgBIAEoBUgAiAEBEhMKBmV4ZWNJZBgCIAEoCUgBiAEBEhEKBHRp",
            "bWUYAyABKAlIAogBARIXCgphY2N0TnVtYmVyGAQgASgJSAOIAQESFQoIZXhj",
            "aGFuZ2UYBSABKAlIBIgBARIRCgRzaWRlGAYgASgJSAWIAQESEwoGc2hhcmVz",
            "GAcgASgJSAaIAQESEgoFcHJpY2UYCCABKAFIB4gBARITCgZwZXJtSWQYCSAB",
            "KANICIgBARIVCghjbGllbnRJZBgKIAEoBUgJiAEBEhoKDWlzTGlxdWlkYXRp",
            "b24YCyABKAhICogBARITCgZjdW1RdHkYDCABKAlIC4gBARIVCghhdmdQcmlj",
            "ZRgNIAEoAUgMiAEBEhUKCG9yZGVyUmVmGA4gASgJSA2IAQESEwoGZXZSdWxl",
            "GA8gASgJSA6IAQESGQoMZXZNdWx0aXBsaWVyGBAgASgBSA+IAQESFgoJbW9k",
            "ZWxDb2RlGBEgASgJSBCIAQESGgoNbGFzdExpcXVpZGl0eRgSIAEoBUgRiAEB",
            "EiMKFmlzUHJpY2VSZXZpc2lvblBlbmRpbmcYEyABKAhIEogBARIWCglzdWJt",
            "aXR0ZXIYFCABKAlIE4gBARIjChZvcHRFeGVyY2lzZU9yTGFwc2VUeXBlGBUg",
            "ASgFSBSIAQFCCgoIX29yZGVySWRCCQoHX2V4ZWNJZEIHCgVfdGltZUINCgtf",
            "YWNjdE51bWJlckILCglfZXhjaGFuZ2VCBwoFX3NpZGVCCQoHX3NoYXJlc0II",
            "CgZfcHJpY2VCCQoHX3Blcm1JZEILCglfY2xpZW50SWRCEAoOX2lzTGlxdWlk",
            "YXRpb25CCQoHX2N1bVF0eUILCglfYXZnUHJpY2VCCwoJX29yZGVyUmVmQgkK",
            "B19ldlJ1bGVCDwoNX2V2TXVsdGlwbGllckIMCgpfbW9kZWxDb2RlQhAKDl9s",
            "YXN0TGlxdWlkaXR5QhkKF19pc1ByaWNlUmV2aXNpb25QZW5kaW5nQgwKCl9z",
            "dWJtaXR0ZXJCGQoXX29wdEV4ZXJjaXNlT3JMYXBzZVR5cGVCOQoWY29tLmli",
            "LmNsaWVudC5wcm90b2J1ZkIORXhlY3V0aW9uUHJvdG+qAg5JQkFwaS5wcm90",
            "b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IBApi.protobuf.Execution), global::IBApi.protobuf.Execution.Parser, new[]{ "OrderId", "ExecId", "Time", "AcctNumber", "Exchange", "Side", "Shares", "Price", "PermId", "ClientId", "IsLiquidation", "CumQty", "AvgPrice", "OrderRef", "EvRule", "EvMultiplier", "ModelCode", "LastLiquidity", "IsPriceRevisionPending", "Submitter", "OptExerciseOrLapseType" }, new[]{ "OrderId", "ExecId", "Time", "AcctNumber", "Exchange", "Side", "Shares", "Price", "PermId", "ClientId", "IsLiquidation", "CumQty", "AvgPrice", "OrderRef", "EvRule", "EvMultiplier", "ModelCode", "LastLiquidity", "IsPriceRevisionPending", "Submitter", "OptExerciseOrLapseType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Execution : pb::IMessage<Execution>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Execution> _parser = new pb::MessageParser<Execution>(() => new Execution());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Execution> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IBApi.protobuf.ExecutionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Execution() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Execution(Execution other) : this() {
      _hasBits0 = other._hasBits0;
      orderId_ = other.orderId_;
      execId_ = other.execId_;
      time_ = other.time_;
      acctNumber_ = other.acctNumber_;
      exchange_ = other.exchange_;
      side_ = other.side_;
      shares_ = other.shares_;
      price_ = other.price_;
      permId_ = other.permId_;
      clientId_ = other.clientId_;
      isLiquidation_ = other.isLiquidation_;
      cumQty_ = other.cumQty_;
      avgPrice_ = other.avgPrice_;
      orderRef_ = other.orderRef_;
      evRule_ = other.evRule_;
      evMultiplier_ = other.evMultiplier_;
      modelCode_ = other.modelCode_;
      lastLiquidity_ = other.lastLiquidity_;
      isPriceRevisionPending_ = other.isPriceRevisionPending_;
      submitter_ = other.submitter_;
      optExerciseOrLapseType_ = other.optExerciseOrLapseType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Execution Clone() {
      return new Execution(this);
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private readonly static int OrderIdDefaultValue = 0;

    private int orderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrderId {
      get { if ((_hasBits0 & 1) != 0) { return orderId_; } else { return OrderIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        orderId_ = value;
      }
    }
    /// <summary>Gets whether the "orderId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrderId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "orderId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrderId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "execId" field.</summary>
    public const int ExecIdFieldNumber = 2;
    private readonly static string ExecIdDefaultValue = "";

    private string execId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecId {
      get { return execId_ ?? ExecIdDefaultValue; }
      set {
        execId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "execId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExecId {
      get { return execId_ != null; }
    }
    /// <summary>Clears the value of the "execId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExecId() {
      execId_ = null;
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private readonly static string TimeDefaultValue = "";

    private string time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Time {
      get { return time_ ?? TimeDefaultValue; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTime {
      get { return time_ != null; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTime() {
      time_ = null;
    }

    /// <summary>Field number for the "acctNumber" field.</summary>
    public const int AcctNumberFieldNumber = 4;
    private readonly static string AcctNumberDefaultValue = "";

    private string acctNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AcctNumber {
      get { return acctNumber_ ?? AcctNumberDefaultValue; }
      set {
        acctNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "acctNumber" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAcctNumber {
      get { return acctNumber_ != null; }
    }
    /// <summary>Clears the value of the "acctNumber" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAcctNumber() {
      acctNumber_ = null;
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 5;
    private readonly static string ExchangeDefaultValue = "";

    private string exchange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_ ?? ExchangeDefaultValue; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "exchange" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExchange {
      get { return exchange_ != null; }
    }
    /// <summary>Clears the value of the "exchange" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExchange() {
      exchange_ = null;
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 6;
    private readonly static string SideDefaultValue = "";

    private string side_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Side {
      get { return side_ ?? SideDefaultValue; }
      set {
        side_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "side" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSide {
      get { return side_ != null; }
    }
    /// <summary>Clears the value of the "side" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSide() {
      side_ = null;
    }

    /// <summary>Field number for the "shares" field.</summary>
    public const int SharesFieldNumber = 7;
    private readonly static string SharesDefaultValue = "";

    private string shares_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Shares {
      get { return shares_ ?? SharesDefaultValue; }
      set {
        shares_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "shares" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShares {
      get { return shares_ != null; }
    }
    /// <summary>Clears the value of the "shares" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShares() {
      shares_ = null;
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 8;
    private readonly static double PriceDefaultValue = 0D;

    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Price {
      get { if ((_hasBits0 & 2) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPrice {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPrice() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "permId" field.</summary>
    public const int PermIdFieldNumber = 9;
    private readonly static long PermIdDefaultValue = 0L;

    private long permId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PermId {
      get { if ((_hasBits0 & 4) != 0) { return permId_; } else { return PermIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        permId_ = value;
      }
    }
    /// <summary>Gets whether the "permId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPermId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "permId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPermId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "clientId" field.</summary>
    public const int ClientIdFieldNumber = 10;
    private readonly static int ClientIdDefaultValue = 0;

    private int clientId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ClientId {
      get { if ((_hasBits0 & 8) != 0) { return clientId_; } else { return ClientIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        clientId_ = value;
      }
    }
    /// <summary>Gets whether the "clientId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClientId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "clientId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClientId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "isLiquidation" field.</summary>
    public const int IsLiquidationFieldNumber = 11;
    private readonly static bool IsLiquidationDefaultValue = false;

    private bool isLiquidation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsLiquidation {
      get { if ((_hasBits0 & 16) != 0) { return isLiquidation_; } else { return IsLiquidationDefaultValue; } }
      set {
        _hasBits0 |= 16;
        isLiquidation_ = value;
      }
    }
    /// <summary>Gets whether the "isLiquidation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsLiquidation {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "isLiquidation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsLiquidation() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "cumQty" field.</summary>
    public const int CumQtyFieldNumber = 12;
    private readonly static string CumQtyDefaultValue = "";

    private string cumQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CumQty {
      get { return cumQty_ ?? CumQtyDefaultValue; }
      set {
        cumQty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cumQty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCumQty {
      get { return cumQty_ != null; }
    }
    /// <summary>Clears the value of the "cumQty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCumQty() {
      cumQty_ = null;
    }

    /// <summary>Field number for the "avgPrice" field.</summary>
    public const int AvgPriceFieldNumber = 13;
    private readonly static double AvgPriceDefaultValue = 0D;

    private double avgPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgPrice {
      get { if ((_hasBits0 & 32) != 0) { return avgPrice_; } else { return AvgPriceDefaultValue; } }
      set {
        _hasBits0 |= 32;
        avgPrice_ = value;
      }
    }
    /// <summary>Gets whether the "avgPrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAvgPrice {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "avgPrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAvgPrice() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "orderRef" field.</summary>
    public const int OrderRefFieldNumber = 14;
    private readonly static string OrderRefDefaultValue = "";

    private string orderRef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderRef {
      get { return orderRef_ ?? OrderRefDefaultValue; }
      set {
        orderRef_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "orderRef" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrderRef {
      get { return orderRef_ != null; }
    }
    /// <summary>Clears the value of the "orderRef" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrderRef() {
      orderRef_ = null;
    }

    /// <summary>Field number for the "evRule" field.</summary>
    public const int EvRuleFieldNumber = 15;
    private readonly static string EvRuleDefaultValue = "";

    private string evRule_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EvRule {
      get { return evRule_ ?? EvRuleDefaultValue; }
      set {
        evRule_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "evRule" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEvRule {
      get { return evRule_ != null; }
    }
    /// <summary>Clears the value of the "evRule" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEvRule() {
      evRule_ = null;
    }

    /// <summary>Field number for the "evMultiplier" field.</summary>
    public const int EvMultiplierFieldNumber = 16;
    private readonly static double EvMultiplierDefaultValue = 0D;

    private double evMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EvMultiplier {
      get { if ((_hasBits0 & 64) != 0) { return evMultiplier_; } else { return EvMultiplierDefaultValue; } }
      set {
        _hasBits0 |= 64;
        evMultiplier_ = value;
      }
    }
    /// <summary>Gets whether the "evMultiplier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEvMultiplier {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "evMultiplier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEvMultiplier() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "modelCode" field.</summary>
    public const int ModelCodeFieldNumber = 17;
    private readonly static string ModelCodeDefaultValue = "";

    private string modelCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ModelCode {
      get { return modelCode_ ?? ModelCodeDefaultValue; }
      set {
        modelCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "modelCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasModelCode {
      get { return modelCode_ != null; }
    }
    /// <summary>Clears the value of the "modelCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearModelCode() {
      modelCode_ = null;
    }

    /// <summary>Field number for the "lastLiquidity" field.</summary>
    public const int LastLiquidityFieldNumber = 18;
    private readonly static int LastLiquidityDefaultValue = 0;

    private int lastLiquidity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LastLiquidity {
      get { if ((_hasBits0 & 128) != 0) { return lastLiquidity_; } else { return LastLiquidityDefaultValue; } }
      set {
        _hasBits0 |= 128;
        lastLiquidity_ = value;
      }
    }
    /// <summary>Gets whether the "lastLiquidity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastLiquidity {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "lastLiquidity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastLiquidity() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "isPriceRevisionPending" field.</summary>
    public const int IsPriceRevisionPendingFieldNumber = 19;
    private readonly static bool IsPriceRevisionPendingDefaultValue = false;

    private bool isPriceRevisionPending_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPriceRevisionPending {
      get { if ((_hasBits0 & 256) != 0) { return isPriceRevisionPending_; } else { return IsPriceRevisionPendingDefaultValue; } }
      set {
        _hasBits0 |= 256;
        isPriceRevisionPending_ = value;
      }
    }
    /// <summary>Gets whether the "isPriceRevisionPending" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPriceRevisionPending {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "isPriceRevisionPending" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPriceRevisionPending() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "submitter" field.</summary>
    public const int SubmitterFieldNumber = 20;
    private readonly static string SubmitterDefaultValue = "";

    private string submitter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Submitter {
      get { return submitter_ ?? SubmitterDefaultValue; }
      set {
        submitter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "submitter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSubmitter {
      get { return submitter_ != null; }
    }
    /// <summary>Clears the value of the "submitter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSubmitter() {
      submitter_ = null;
    }

    /// <summary>Field number for the "optExerciseOrLapseType" field.</summary>
    public const int OptExerciseOrLapseTypeFieldNumber = 21;
    private readonly static int OptExerciseOrLapseTypeDefaultValue = 0;

    private int optExerciseOrLapseType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OptExerciseOrLapseType {
      get { if ((_hasBits0 & 512) != 0) { return optExerciseOrLapseType_; } else { return OptExerciseOrLapseTypeDefaultValue; } }
      set {
        _hasBits0 |= 512;
        optExerciseOrLapseType_ = value;
      }
    }
    /// <summary>Gets whether the "optExerciseOrLapseType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOptExerciseOrLapseType {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "optExerciseOrLapseType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOptExerciseOrLapseType() {
      _hasBits0 &= ~512;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Execution);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Execution other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (ExecId != other.ExecId) return false;
      if (Time != other.Time) return false;
      if (AcctNumber != other.AcctNumber) return false;
      if (Exchange != other.Exchange) return false;
      if (Side != other.Side) return false;
      if (Shares != other.Shares) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (PermId != other.PermId) return false;
      if (ClientId != other.ClientId) return false;
      if (IsLiquidation != other.IsLiquidation) return false;
      if (CumQty != other.CumQty) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgPrice, other.AvgPrice)) return false;
      if (OrderRef != other.OrderRef) return false;
      if (EvRule != other.EvRule) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EvMultiplier, other.EvMultiplier)) return false;
      if (ModelCode != other.ModelCode) return false;
      if (LastLiquidity != other.LastLiquidity) return false;
      if (IsPriceRevisionPending != other.IsPriceRevisionPending) return false;
      if (Submitter != other.Submitter) return false;
      if (OptExerciseOrLapseType != other.OptExerciseOrLapseType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOrderId) hash ^= OrderId.GetHashCode();
      if (HasExecId) hash ^= ExecId.GetHashCode();
      if (HasTime) hash ^= Time.GetHashCode();
      if (HasAcctNumber) hash ^= AcctNumber.GetHashCode();
      if (HasExchange) hash ^= Exchange.GetHashCode();
      if (HasSide) hash ^= Side.GetHashCode();
      if (HasShares) hash ^= Shares.GetHashCode();
      if (HasPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (HasPermId) hash ^= PermId.GetHashCode();
      if (HasClientId) hash ^= ClientId.GetHashCode();
      if (HasIsLiquidation) hash ^= IsLiquidation.GetHashCode();
      if (HasCumQty) hash ^= CumQty.GetHashCode();
      if (HasAvgPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgPrice);
      if (HasOrderRef) hash ^= OrderRef.GetHashCode();
      if (HasEvRule) hash ^= EvRule.GetHashCode();
      if (HasEvMultiplier) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EvMultiplier);
      if (HasModelCode) hash ^= ModelCode.GetHashCode();
      if (HasLastLiquidity) hash ^= LastLiquidity.GetHashCode();
      if (HasIsPriceRevisionPending) hash ^= IsPriceRevisionPending.GetHashCode();
      if (HasSubmitter) hash ^= Submitter.GetHashCode();
      if (HasOptExerciseOrLapseType) hash ^= OptExerciseOrLapseType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOrderId) {
        output.WriteRawTag(8);
        output.WriteInt32(OrderId);
      }
      if (HasExecId) {
        output.WriteRawTag(18);
        output.WriteString(ExecId);
      }
      if (HasTime) {
        output.WriteRawTag(26);
        output.WriteString(Time);
      }
      if (HasAcctNumber) {
        output.WriteRawTag(34);
        output.WriteString(AcctNumber);
      }
      if (HasExchange) {
        output.WriteRawTag(42);
        output.WriteString(Exchange);
      }
      if (HasSide) {
        output.WriteRawTag(50);
        output.WriteString(Side);
      }
      if (HasShares) {
        output.WriteRawTag(58);
        output.WriteString(Shares);
      }
      if (HasPrice) {
        output.WriteRawTag(65);
        output.WriteDouble(Price);
      }
      if (HasPermId) {
        output.WriteRawTag(72);
        output.WriteInt64(PermId);
      }
      if (HasClientId) {
        output.WriteRawTag(80);
        output.WriteInt32(ClientId);
      }
      if (HasIsLiquidation) {
        output.WriteRawTag(88);
        output.WriteBool(IsLiquidation);
      }
      if (HasCumQty) {
        output.WriteRawTag(98);
        output.WriteString(CumQty);
      }
      if (HasAvgPrice) {
        output.WriteRawTag(105);
        output.WriteDouble(AvgPrice);
      }
      if (HasOrderRef) {
        output.WriteRawTag(114);
        output.WriteString(OrderRef);
      }
      if (HasEvRule) {
        output.WriteRawTag(122);
        output.WriteString(EvRule);
      }
      if (HasEvMultiplier) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(EvMultiplier);
      }
      if (HasModelCode) {
        output.WriteRawTag(138, 1);
        output.WriteString(ModelCode);
      }
      if (HasLastLiquidity) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(LastLiquidity);
      }
      if (HasIsPriceRevisionPending) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsPriceRevisionPending);
      }
      if (HasSubmitter) {
        output.WriteRawTag(162, 1);
        output.WriteString(Submitter);
      }
      if (HasOptExerciseOrLapseType) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(OptExerciseOrLapseType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOrderId) {
        output.WriteRawTag(8);
        output.WriteInt32(OrderId);
      }
      if (HasExecId) {
        output.WriteRawTag(18);
        output.WriteString(ExecId);
      }
      if (HasTime) {
        output.WriteRawTag(26);
        output.WriteString(Time);
      }
      if (HasAcctNumber) {
        output.WriteRawTag(34);
        output.WriteString(AcctNumber);
      }
      if (HasExchange) {
        output.WriteRawTag(42);
        output.WriteString(Exchange);
      }
      if (HasSide) {
        output.WriteRawTag(50);
        output.WriteString(Side);
      }
      if (HasShares) {
        output.WriteRawTag(58);
        output.WriteString(Shares);
      }
      if (HasPrice) {
        output.WriteRawTag(65);
        output.WriteDouble(Price);
      }
      if (HasPermId) {
        output.WriteRawTag(72);
        output.WriteInt64(PermId);
      }
      if (HasClientId) {
        output.WriteRawTag(80);
        output.WriteInt32(ClientId);
      }
      if (HasIsLiquidation) {
        output.WriteRawTag(88);
        output.WriteBool(IsLiquidation);
      }
      if (HasCumQty) {
        output.WriteRawTag(98);
        output.WriteString(CumQty);
      }
      if (HasAvgPrice) {
        output.WriteRawTag(105);
        output.WriteDouble(AvgPrice);
      }
      if (HasOrderRef) {
        output.WriteRawTag(114);
        output.WriteString(OrderRef);
      }
      if (HasEvRule) {
        output.WriteRawTag(122);
        output.WriteString(EvRule);
      }
      if (HasEvMultiplier) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(EvMultiplier);
      }
      if (HasModelCode) {
        output.WriteRawTag(138, 1);
        output.WriteString(ModelCode);
      }
      if (HasLastLiquidity) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(LastLiquidity);
      }
      if (HasIsPriceRevisionPending) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsPriceRevisionPending);
      }
      if (HasSubmitter) {
        output.WriteRawTag(162, 1);
        output.WriteString(Submitter);
      }
      if (HasOptExerciseOrLapseType) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(OptExerciseOrLapseType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderId);
      }
      if (HasExecId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecId);
      }
      if (HasTime) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (HasAcctNumber) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AcctNumber);
      }
      if (HasExchange) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (HasSide) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Side);
      }
      if (HasShares) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shares);
      }
      if (HasPrice) {
        size += 1 + 8;
      }
      if (HasPermId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PermId);
      }
      if (HasClientId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientId);
      }
      if (HasIsLiquidation) {
        size += 1 + 1;
      }
      if (HasCumQty) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CumQty);
      }
      if (HasAvgPrice) {
        size += 1 + 8;
      }
      if (HasOrderRef) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderRef);
      }
      if (HasEvRule) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EvRule);
      }
      if (HasEvMultiplier) {
        size += 2 + 8;
      }
      if (HasModelCode) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModelCode);
      }
      if (HasLastLiquidity) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LastLiquidity);
      }
      if (HasIsPriceRevisionPending) {
        size += 2 + 1;
      }
      if (HasSubmitter) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Submitter);
      }
      if (HasOptExerciseOrLapseType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OptExerciseOrLapseType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Execution other) {
      if (other == null) {
        return;
      }
      if (other.HasOrderId) {
        OrderId = other.OrderId;
      }
      if (other.HasExecId) {
        ExecId = other.ExecId;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      if (other.HasAcctNumber) {
        AcctNumber = other.AcctNumber;
      }
      if (other.HasExchange) {
        Exchange = other.Exchange;
      }
      if (other.HasSide) {
        Side = other.Side;
      }
      if (other.HasShares) {
        Shares = other.Shares;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      if (other.HasPermId) {
        PermId = other.PermId;
      }
      if (other.HasClientId) {
        ClientId = other.ClientId;
      }
      if (other.HasIsLiquidation) {
        IsLiquidation = other.IsLiquidation;
      }
      if (other.HasCumQty) {
        CumQty = other.CumQty;
      }
      if (other.HasAvgPrice) {
        AvgPrice = other.AvgPrice;
      }
      if (other.HasOrderRef) {
        OrderRef = other.OrderRef;
      }
      if (other.HasEvRule) {
        EvRule = other.EvRule;
      }
      if (other.HasEvMultiplier) {
        EvMultiplier = other.EvMultiplier;
      }
      if (other.HasModelCode) {
        ModelCode = other.ModelCode;
      }
      if (other.HasLastLiquidity) {
        LastLiquidity = other.LastLiquidity;
      }
      if (other.HasIsPriceRevisionPending) {
        IsPriceRevisionPending = other.IsPriceRevisionPending;
      }
      if (other.HasSubmitter) {
        Submitter = other.Submitter;
      }
      if (other.HasOptExerciseOrLapseType) {
        OptExerciseOrLapseType = other.OptExerciseOrLapseType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OrderId = input.ReadInt32();
            break;
          }
          case 18: {
            ExecId = input.ReadString();
            break;
          }
          case 26: {
            Time = input.ReadString();
            break;
          }
          case 34: {
            AcctNumber = input.ReadString();
            break;
          }
          case 42: {
            Exchange = input.ReadString();
            break;
          }
          case 50: {
            Side = input.ReadString();
            break;
          }
          case 58: {
            Shares = input.ReadString();
            break;
          }
          case 65: {
            Price = input.ReadDouble();
            break;
          }
          case 72: {
            PermId = input.ReadInt64();
            break;
          }
          case 80: {
            ClientId = input.ReadInt32();
            break;
          }
          case 88: {
            IsLiquidation = input.ReadBool();
            break;
          }
          case 98: {
            CumQty = input.ReadString();
            break;
          }
          case 105: {
            AvgPrice = input.ReadDouble();
            break;
          }
          case 114: {
            OrderRef = input.ReadString();
            break;
          }
          case 122: {
            EvRule = input.ReadString();
            break;
          }
          case 129: {
            EvMultiplier = input.ReadDouble();
            break;
          }
          case 138: {
            ModelCode = input.ReadString();
            break;
          }
          case 144: {
            LastLiquidity = input.ReadInt32();
            break;
          }
          case 152: {
            IsPriceRevisionPending = input.ReadBool();
            break;
          }
          case 162: {
            Submitter = input.ReadString();
            break;
          }
          case 168: {
            OptExerciseOrLapseType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OrderId = input.ReadInt32();
            break;
          }
          case 18: {
            ExecId = input.ReadString();
            break;
          }
          case 26: {
            Time = input.ReadString();
            break;
          }
          case 34: {
            AcctNumber = input.ReadString();
            break;
          }
          case 42: {
            Exchange = input.ReadString();
            break;
          }
          case 50: {
            Side = input.ReadString();
            break;
          }
          case 58: {
            Shares = input.ReadString();
            break;
          }
          case 65: {
            Price = input.ReadDouble();
            break;
          }
          case 72: {
            PermId = input.ReadInt64();
            break;
          }
          case 80: {
            ClientId = input.ReadInt32();
            break;
          }
          case 88: {
            IsLiquidation = input.ReadBool();
            break;
          }
          case 98: {
            CumQty = input.ReadString();
            break;
          }
          case 105: {
            AvgPrice = input.ReadDouble();
            break;
          }
          case 114: {
            OrderRef = input.ReadString();
            break;
          }
          case 122: {
            EvRule = input.ReadString();
            break;
          }
          case 129: {
            EvMultiplier = input.ReadDouble();
            break;
          }
          case 138: {
            ModelCode = input.ReadString();
            break;
          }
          case 144: {
            LastLiquidity = input.ReadInt32();
            break;
          }
          case 152: {
            IsPriceRevisionPending = input.ReadBool();
            break;
          }
          case 162: {
            Submitter = input.ReadString();
            break;
          }
          case 168: {
            OptExerciseOrLapseType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
