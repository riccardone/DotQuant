// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TickOptionComputation.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IBApi.protobuf {

  /// <summary>Holder for reflection information generated from TickOptionComputation.proto</summary>
  public static partial class TickOptionComputationReflection {

    #region Descriptor
    /// <summary>File descriptor for TickOptionComputation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TickOptionComputationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtUaWNrT3B0aW9uQ29tcHV0YXRpb24ucHJvdG8SCHByb3RvYnVmIo8DChVU",
            "aWNrT3B0aW9uQ29tcHV0YXRpb24SEgoFcmVxSWQYASABKAVIAIgBARIVCgh0",
            "aWNrVHlwZRgCIAEoBUgBiAEBEhcKCnRpY2tBdHRyaWIYAyABKAVIAogBARIX",
            "CgppbXBsaWVkVm9sGAQgASgBSAOIAQESEgoFZGVsdGEYBSABKAFIBIgBARIV",
            "CghvcHRQcmljZRgGIAEoAUgFiAEBEhcKCnB2RGl2aWRlbmQYByABKAFIBogB",
            "ARISCgVnYW1tYRgIIAEoAUgHiAEBEhEKBHZlZ2EYCSABKAFICIgBARISCgV0",
            "aGV0YRgKIAEoAUgJiAEBEhUKCHVuZFByaWNlGAsgASgBSAqIAQFCCAoGX3Jl",
            "cUlkQgsKCV90aWNrVHlwZUINCgtfdGlja0F0dHJpYkINCgtfaW1wbGllZFZv",
            "bEIICgZfZGVsdGFCCwoJX29wdFByaWNlQg0KC19wdkRpdmlkZW5kQggKBl9n",
            "YW1tYUIHCgVfdmVnYUIICgZfdGhldGFCCwoJX3VuZFByaWNlQkUKFmNvbS5p",
            "Yi5jbGllbnQucHJvdG9idWZCGlRpY2tPcHRpb25Db21wdXRhdGlvblByb3Rv",
            "qgIOSUJBcGkucHJvdG9idWZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IBApi.protobuf.TickOptionComputation), global::IBApi.protobuf.TickOptionComputation.Parser, new[]{ "ReqId", "TickType", "TickAttrib", "ImpliedVol", "Delta", "OptPrice", "PvDividend", "Gamma", "Vega", "Theta", "UndPrice" }, new[]{ "ReqId", "TickType", "TickAttrib", "ImpliedVol", "Delta", "OptPrice", "PvDividend", "Gamma", "Vega", "Theta", "UndPrice" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TickOptionComputation : pb::IMessage<TickOptionComputation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TickOptionComputation> _parser = new pb::MessageParser<TickOptionComputation>(() => new TickOptionComputation());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TickOptionComputation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IBApi.protobuf.TickOptionComputationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickOptionComputation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickOptionComputation(TickOptionComputation other) : this() {
      _hasBits0 = other._hasBits0;
      reqId_ = other.reqId_;
      tickType_ = other.tickType_;
      tickAttrib_ = other.tickAttrib_;
      impliedVol_ = other.impliedVol_;
      delta_ = other.delta_;
      optPrice_ = other.optPrice_;
      pvDividend_ = other.pvDividend_;
      gamma_ = other.gamma_;
      vega_ = other.vega_;
      theta_ = other.theta_;
      undPrice_ = other.undPrice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickOptionComputation Clone() {
      return new TickOptionComputation(this);
    }

    /// <summary>Field number for the "reqId" field.</summary>
    public const int ReqIdFieldNumber = 1;
    private readonly static int ReqIdDefaultValue = 0;

    private int reqId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqId {
      get { if ((_hasBits0 & 1) != 0) { return reqId_; } else { return ReqIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        reqId_ = value;
      }
    }
    /// <summary>Gets whether the "reqId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReqId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "reqId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReqId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tickType" field.</summary>
    public const int TickTypeFieldNumber = 2;
    private readonly static int TickTypeDefaultValue = 0;

    private int tickType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TickType {
      get { if ((_hasBits0 & 2) != 0) { return tickType_; } else { return TickTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        tickType_ = value;
      }
    }
    /// <summary>Gets whether the "tickType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTickType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "tickType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTickType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "tickAttrib" field.</summary>
    public const int TickAttribFieldNumber = 3;
    private readonly static int TickAttribDefaultValue = 0;

    private int tickAttrib_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TickAttrib {
      get { if ((_hasBits0 & 4) != 0) { return tickAttrib_; } else { return TickAttribDefaultValue; } }
      set {
        _hasBits0 |= 4;
        tickAttrib_ = value;
      }
    }
    /// <summary>Gets whether the "tickAttrib" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTickAttrib {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "tickAttrib" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTickAttrib() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "impliedVol" field.</summary>
    public const int ImpliedVolFieldNumber = 4;
    private readonly static double ImpliedVolDefaultValue = 0D;

    private double impliedVol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ImpliedVol {
      get { if ((_hasBits0 & 8) != 0) { return impliedVol_; } else { return ImpliedVolDefaultValue; } }
      set {
        _hasBits0 |= 8;
        impliedVol_ = value;
      }
    }
    /// <summary>Gets whether the "impliedVol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasImpliedVol {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "impliedVol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearImpliedVol() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "delta" field.</summary>
    public const int DeltaFieldNumber = 5;
    private readonly static double DeltaDefaultValue = 0D;

    private double delta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Delta {
      get { if ((_hasBits0 & 16) != 0) { return delta_; } else { return DeltaDefaultValue; } }
      set {
        _hasBits0 |= 16;
        delta_ = value;
      }
    }
    /// <summary>Gets whether the "delta" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDelta {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "delta" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDelta() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "optPrice" field.</summary>
    public const int OptPriceFieldNumber = 6;
    private readonly static double OptPriceDefaultValue = 0D;

    private double optPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OptPrice {
      get { if ((_hasBits0 & 32) != 0) { return optPrice_; } else { return OptPriceDefaultValue; } }
      set {
        _hasBits0 |= 32;
        optPrice_ = value;
      }
    }
    /// <summary>Gets whether the "optPrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOptPrice {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "optPrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOptPrice() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "pvDividend" field.</summary>
    public const int PvDividendFieldNumber = 7;
    private readonly static double PvDividendDefaultValue = 0D;

    private double pvDividend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PvDividend {
      get { if ((_hasBits0 & 64) != 0) { return pvDividend_; } else { return PvDividendDefaultValue; } }
      set {
        _hasBits0 |= 64;
        pvDividend_ = value;
      }
    }
    /// <summary>Gets whether the "pvDividend" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPvDividend {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "pvDividend" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPvDividend() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "gamma" field.</summary>
    public const int GammaFieldNumber = 8;
    private readonly static double GammaDefaultValue = 0D;

    private double gamma_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Gamma {
      get { if ((_hasBits0 & 128) != 0) { return gamma_; } else { return GammaDefaultValue; } }
      set {
        _hasBits0 |= 128;
        gamma_ = value;
      }
    }
    /// <summary>Gets whether the "gamma" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGamma {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "gamma" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGamma() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "vega" field.</summary>
    public const int VegaFieldNumber = 9;
    private readonly static double VegaDefaultValue = 0D;

    private double vega_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Vega {
      get { if ((_hasBits0 & 256) != 0) { return vega_; } else { return VegaDefaultValue; } }
      set {
        _hasBits0 |= 256;
        vega_ = value;
      }
    }
    /// <summary>Gets whether the "vega" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVega {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "vega" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVega() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "theta" field.</summary>
    public const int ThetaFieldNumber = 10;
    private readonly static double ThetaDefaultValue = 0D;

    private double theta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Theta {
      get { if ((_hasBits0 & 512) != 0) { return theta_; } else { return ThetaDefaultValue; } }
      set {
        _hasBits0 |= 512;
        theta_ = value;
      }
    }
    /// <summary>Gets whether the "theta" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTheta {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "theta" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTheta() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "undPrice" field.</summary>
    public const int UndPriceFieldNumber = 11;
    private readonly static double UndPriceDefaultValue = 0D;

    private double undPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UndPrice {
      get { if ((_hasBits0 & 1024) != 0) { return undPrice_; } else { return UndPriceDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        undPrice_ = value;
      }
    }
    /// <summary>Gets whether the "undPrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUndPrice {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "undPrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUndPrice() {
      _hasBits0 &= ~1024;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TickOptionComputation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TickOptionComputation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqId != other.ReqId) return false;
      if (TickType != other.TickType) return false;
      if (TickAttrib != other.TickAttrib) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ImpliedVol, other.ImpliedVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Delta, other.Delta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OptPrice, other.OptPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PvDividend, other.PvDividend)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Gamma, other.Gamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Vega, other.Vega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Theta, other.Theta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UndPrice, other.UndPrice)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasReqId) hash ^= ReqId.GetHashCode();
      if (HasTickType) hash ^= TickType.GetHashCode();
      if (HasTickAttrib) hash ^= TickAttrib.GetHashCode();
      if (HasImpliedVol) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ImpliedVol);
      if (HasDelta) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Delta);
      if (HasOptPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OptPrice);
      if (HasPvDividend) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PvDividend);
      if (HasGamma) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Gamma);
      if (HasVega) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Vega);
      if (HasTheta) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Theta);
      if (HasUndPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UndPrice);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasReqId) {
        output.WriteRawTag(8);
        output.WriteInt32(ReqId);
      }
      if (HasTickType) {
        output.WriteRawTag(16);
        output.WriteInt32(TickType);
      }
      if (HasTickAttrib) {
        output.WriteRawTag(24);
        output.WriteInt32(TickAttrib);
      }
      if (HasImpliedVol) {
        output.WriteRawTag(33);
        output.WriteDouble(ImpliedVol);
      }
      if (HasDelta) {
        output.WriteRawTag(41);
        output.WriteDouble(Delta);
      }
      if (HasOptPrice) {
        output.WriteRawTag(49);
        output.WriteDouble(OptPrice);
      }
      if (HasPvDividend) {
        output.WriteRawTag(57);
        output.WriteDouble(PvDividend);
      }
      if (HasGamma) {
        output.WriteRawTag(65);
        output.WriteDouble(Gamma);
      }
      if (HasVega) {
        output.WriteRawTag(73);
        output.WriteDouble(Vega);
      }
      if (HasTheta) {
        output.WriteRawTag(81);
        output.WriteDouble(Theta);
      }
      if (HasUndPrice) {
        output.WriteRawTag(89);
        output.WriteDouble(UndPrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasReqId) {
        output.WriteRawTag(8);
        output.WriteInt32(ReqId);
      }
      if (HasTickType) {
        output.WriteRawTag(16);
        output.WriteInt32(TickType);
      }
      if (HasTickAttrib) {
        output.WriteRawTag(24);
        output.WriteInt32(TickAttrib);
      }
      if (HasImpliedVol) {
        output.WriteRawTag(33);
        output.WriteDouble(ImpliedVol);
      }
      if (HasDelta) {
        output.WriteRawTag(41);
        output.WriteDouble(Delta);
      }
      if (HasOptPrice) {
        output.WriteRawTag(49);
        output.WriteDouble(OptPrice);
      }
      if (HasPvDividend) {
        output.WriteRawTag(57);
        output.WriteDouble(PvDividend);
      }
      if (HasGamma) {
        output.WriteRawTag(65);
        output.WriteDouble(Gamma);
      }
      if (HasVega) {
        output.WriteRawTag(73);
        output.WriteDouble(Vega);
      }
      if (HasTheta) {
        output.WriteRawTag(81);
        output.WriteDouble(Theta);
      }
      if (HasUndPrice) {
        output.WriteRawTag(89);
        output.WriteDouble(UndPrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasReqId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqId);
      }
      if (HasTickType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TickType);
      }
      if (HasTickAttrib) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TickAttrib);
      }
      if (HasImpliedVol) {
        size += 1 + 8;
      }
      if (HasDelta) {
        size += 1 + 8;
      }
      if (HasOptPrice) {
        size += 1 + 8;
      }
      if (HasPvDividend) {
        size += 1 + 8;
      }
      if (HasGamma) {
        size += 1 + 8;
      }
      if (HasVega) {
        size += 1 + 8;
      }
      if (HasTheta) {
        size += 1 + 8;
      }
      if (HasUndPrice) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TickOptionComputation other) {
      if (other == null) {
        return;
      }
      if (other.HasReqId) {
        ReqId = other.ReqId;
      }
      if (other.HasTickType) {
        TickType = other.TickType;
      }
      if (other.HasTickAttrib) {
        TickAttrib = other.TickAttrib;
      }
      if (other.HasImpliedVol) {
        ImpliedVol = other.ImpliedVol;
      }
      if (other.HasDelta) {
        Delta = other.Delta;
      }
      if (other.HasOptPrice) {
        OptPrice = other.OptPrice;
      }
      if (other.HasPvDividend) {
        PvDividend = other.PvDividend;
      }
      if (other.HasGamma) {
        Gamma = other.Gamma;
      }
      if (other.HasVega) {
        Vega = other.Vega;
      }
      if (other.HasTheta) {
        Theta = other.Theta;
      }
      if (other.HasUndPrice) {
        UndPrice = other.UndPrice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReqId = input.ReadInt32();
            break;
          }
          case 16: {
            TickType = input.ReadInt32();
            break;
          }
          case 24: {
            TickAttrib = input.ReadInt32();
            break;
          }
          case 33: {
            ImpliedVol = input.ReadDouble();
            break;
          }
          case 41: {
            Delta = input.ReadDouble();
            break;
          }
          case 49: {
            OptPrice = input.ReadDouble();
            break;
          }
          case 57: {
            PvDividend = input.ReadDouble();
            break;
          }
          case 65: {
            Gamma = input.ReadDouble();
            break;
          }
          case 73: {
            Vega = input.ReadDouble();
            break;
          }
          case 81: {
            Theta = input.ReadDouble();
            break;
          }
          case 89: {
            UndPrice = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ReqId = input.ReadInt32();
            break;
          }
          case 16: {
            TickType = input.ReadInt32();
            break;
          }
          case 24: {
            TickAttrib = input.ReadInt32();
            break;
          }
          case 33: {
            ImpliedVol = input.ReadDouble();
            break;
          }
          case 41: {
            Delta = input.ReadDouble();
            break;
          }
          case 49: {
            OptPrice = input.ReadDouble();
            break;
          }
          case 57: {
            PvDividend = input.ReadDouble();
            break;
          }
          case 65: {
            Gamma = input.ReadDouble();
            break;
          }
          case 73: {
            Vega = input.ReadDouble();
            break;
          }
          case 81: {
            Theta = input.ReadDouble();
            break;
          }
          case 89: {
            UndPrice = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
